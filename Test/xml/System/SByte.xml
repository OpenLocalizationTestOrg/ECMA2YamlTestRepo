<Type Name="SByte" FullName="System.SByte">
  <TypeSignature Language="C#" Value="public struct SByte : IComparable, IComparable&lt;sbyte&gt;, IConvertible, IEquatable&lt;sbyte&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit int8 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;int8&gt;, class System.IConvertible, class System.IEquatable`1&lt;int8&gt;, class System.IFormattable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.SByte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.SByte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an 8-bit signed integer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SByte value type represents integers with values ranging from negative 128 to positive 127.  
  
> [!IMPORTANT]
>  The SByte type is not CLS-compliant. The CLS-compliant alternative type is <xref:System.Int16>. <xref:System.Byte> can be used instead to replace a positive SByte value that ranges from zero to <xref:System.Byte.MaxValue>. For more information about CLS compliance, see [Language Independence and Language-Independent Components](../Topic/Language%20Independence%20and%20Language-Independent%20Components.md).  
  
 SByte provides methods to compare instances of this type, convert the value of an instance to its string representation, and convert the string representation of a number to an instance of this type.  
  
 For information about how format specification codes control the string representation of value types, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare, or `null`.</param>
        <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
        <returns>A signed number indicating the relative values of this instance and .  
  
|Return Value|Description|  
|------------------|-----------------|  
|Less than zero|This instance is less than .|  
|Zero|This instance is equal to .|  
|Greater than zero|This instance is greater than .&lt;br /&gt;&lt;br /&gt; -or-&lt;br /&gt;&lt;br /&gt; is `null`.|</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any instance of <xref:System.SByte>, regardless of its value, is considered greater than `null`.  
  
 The  parameter must be `null` or an instance of <xref:System.SByte>; otherwise, an exception is thrown.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">An 8-bit signed integer to compare.</param>
        <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
        <returns>A signed integer that indicates the relative order of this instance and .  
  
|Return Value|Description|  
|------------------|-----------------|  
|Less than zero|This instance is less than .|  
|Zero|This instance is equal to .|  
|Greater than zero|This instance is greater than .|</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.SByte.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the  parameter to an object.  
  
 Depending on your programming language, it might be possible to code a <xref:System.SByte.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  
  
 For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.  
  
 Consult your programming language's documentation to determine if its compiler performs implicit widening conversions on numeric types.  
  
   
  
## Examples  
 The following example demonstrates generic and nongeneric versions of the <xref:System.SByte.CompareTo%2A> method for several value and reference types.  
  
 [!CODE [T.CompareTo#1](../CodeSnippet/VS_Snippets_CLR/T.CompareTo#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>`true` if  is an instance of &lt;see cref="T:System.SByte"&gt; and equals the value of this instance; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (sbyte obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(int8 obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="obj">An &lt;see cref="T:System.SByte"&gt; value to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified &lt;see cref="T:System.SByte"&gt; value.</summary>
        <returns>`true` if  has the same value as this instance; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.SByte.Equals%2A> because it does not have to convert the  parameter to an object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the &lt;see cref="T:System.TypeCode"&gt; for value type &lt;xref:System.SByte&gt;.</summary>
        <returns>The enumerated constant, &lt;xref:System.TypeCode?displayProperty=fullName&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const sbyte MaxValue = 127;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 MaxValue = int8(127)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>Represents the largest possible value of &lt;see cref="T:System.SByte"&gt;. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 127; that is, hexadecimal 0x7F.  
  
   
  
## Examples  
 The following example uses the <xref:System.SByte> and MaxValue fields to verify that an <xref:System.Int64> value is within the range of the <xref:System.SByte> type before it performs a type conversion. This verification prevents an <xref:System.OverflowException> at run time.  
  
 [!CODE [System.SByte.MaxValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.MaxValue#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const sbyte MinValue = -128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 MinValue = int8(-128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>-128</MemberValue>
      <Docs>
        <summary>Represents the smallest possible value of &lt;see cref="T:System.SByte"&gt;. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is -128; that is, hexadecimal 0x80.  
  
   
  
## Examples  
 The following example uses the MinValue and <xref:System.SByte> fields to verify that an <xref:System.Int64> value is within the range of the <xref:System.SByte> type before it performs a type conversion. This verification prevents an <xref:System.OverflowException> at run time.  
  
 [!CODE [System.SByte.MaxValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.MaxValue#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that represents a number to convert. The string is interpreted using the &lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt; style.</param>
        <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number contained in the  parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter contains a number of the form:  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|*sign*|An optional sign.|  
|*digits*|A sequence of digits ranging from 0 to 9.|  
  
 The  parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the byte value's decimal digits, only leading and trailing spaces with a leading positive or negative sign are allowed. To explicitly define the style elements that can be present in , use either the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> or the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.  
  
 The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of some other culture, use the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.  
  
   
  
## Examples  
 The following example demonstrates how to convert a string value into a signed byte value using the Parse method. The resulting signed byte value is then displayed to the console.  
  
 [!CODE [System.SByte.Parse2#1](../CodeSnippet/VS_Snippets_CLR_System/system.sbyte.parse2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by .</param>
        <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in . A typical value to specify is &lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;.</param>
        <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number specified in .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter defines the style elements (such as white space or the positive or negative sign symbol) that are allowed in the  parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.  
  
 Depending on the value of , the  parameter may include the following elements:  
  
 [*ws*][*$*][*sign*]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 If  includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the  parameter may contain the following elements:  
  
 [*ws*]*hexdigits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space. White space can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if style includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> property of the current culture. The current culture's currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*sign*|An optional sign. The sign can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*digits*|A sequence of digits from 0 through 9.|  
|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*fractional_digits*|One or more occurrences of the digit 0-9 if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or one or more occurrences of the digit 0 if it does not. Fractional digits can appear in  only if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|E|The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*exponential_digits*|One or more occurrences of the digit 0-9. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  
  
 A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  
  
|Non-composite NumberStyles values|Elements permitted in *s* in addition to digits|  
|----------------------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Decimal digits only.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The decimal point (*.*) and *fractional_digits* elements. However, if  does not include the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, *fractional_digits* must consist of only one or more 0 digits; otherwise, an <xref:System.OverflowException> is thrown.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning of .|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the end of .|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign before *digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign after *digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *sign* element in the form of parentheses enclosing the numeric value.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The group separator (,) element. Although the group separator can appear in , it must be preceded by only one or more 0 digits.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The currency (*$*) element.|  
  
 If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used,  must be a hexadecimal value. Valid hexadecimal digits are 0-9, a-f, and A-F. A prefix such as "0x" is not supported and causes the parse operation to fail. The only other flags that can be combined included in  are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white-space flags.)  
  
> [!NOTE]
>  If the  parameter is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the parse operation to throw an exception.  
  
 If  represents a hexadecimal number, the <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets the high-order bit of the byte as a sign bit.  
  
 The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To use the formatting information of some other culture, call the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.  
  
   
  
## Examples  
 The following example parses string representations of <xref:System.SByte> values with the <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method. The current culture for the example is en-US.  
  
 [!CODE [System.SByte.Parse2#2](../CodeSnippet/VS_Snippets_CLR_System/system.sbyte.parse2#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that represents a number to convert. The string is interpreted using the &lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt; style.</param>
        <param name="provider">An object that supplies culture-specific formatting information about . If  is `null`, the thread current culture is used.</param>
        <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number specified in .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter contains a number of the form:  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|*sign*|An optional sign.|  
|*digits*|A sequence of digits ranging from 0 to 9.|  
  
 The  parameter is interpreted using the <xref:System.Globalization.NumberStyles> style. In addition to the byte value's decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in , use the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.  
  
 The  parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . There are three ways to use the  parameter to supply custom formatting information to the parse operation:  
  
-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.IFormatProvider.GetFormat%2A> simply returns itself.)  
  
-   You can pass a <xref:System.Globalization.CultureInfo> object that specifies the culture whose formatting is to be used. Its <xref:System.Globalization.CultureInfo.NumberFormat%2A> property provides formatting information.  
  
-   You can pass a custom <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method must instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  
  
 If  is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as the negative sign. It then parses a number of numeric strings using this custom <xref:System.Globalization.NumberFormatInfo> object as well as a <xref:System.Globalization.CultureInfo> object that represents the invariant culture.  
  
 [!CODE [System.SByte.Parse2#3](../CodeSnippet/VS_Snippets_CLR_System/system.sbyte.parse2#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by .</param>
        <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in . A typical value to specify is &lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;.</param>
        <param name="provider">An object that supplies culture-specific formatting information about . If  is `null`, the thread current culture is used.</param>
        <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
        <returns>An 8-bit signed byte value that is equivalent to the number specified in the  parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter defines the style elements (such as white space or the positive or negative sign symbol) that are allowed in the  parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.  
  
 Depending on the value of , the  parameter may include the following elements:  
  
 [*ws*][*$*][*sign*]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 If  includes <xref:System.Globalization.NumberStyles>, the  parameter may include the following elements:  
  
 [*ws*]*hexdigits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space. White space can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> property of the current culture. The current culture's currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*sign*|An optional sign. The sign can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*digits*|A sequence of digits from 0 through 9.|  
|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*fractional_digits*|One or more occurrences of the digit 0-9 if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or one or more occurrences of the digit 0 if it does not. Fractional digits can appear in  only if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|E|The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*exponential_digits*|A sequence of digits from 0 through 9. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  
  
 A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  
  
|Non-composite `NumberStyles` values|Elements permitted in  in addition to digits|  
|------------------------------------------|--------------------------------------------------|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Decimal digits only.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The decimal point (*.*) and *fractional_digits* elements. However, if style does not include the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, *fractional_digits* must consist of only one or more 0 digits; otherwise, an <xref:System.OverflowException> is thrown.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning of .|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the end of .|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign before *digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign after *digits*.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Parentheses before and after *digits* to indicate a negative value.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The group separator (*,*) element. Although the group separator can appear in , it must be preceded by only one or more 0 digits.|  
|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The currency (*$*) element.|  
  
 If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used,  must be a hexadecimal value. Valid hexadecimal digits are 0-9, a-f, and A-F. The only other flags that can be combined with it are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white-space flags.)  
  
> [!NOTE]
>  If the  parameter is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the parse operation to throw an exception.  
  
 If  represents a hexadecimal number, the <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets the high-order bit of the byte as a sign bit.  
  
 The  parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . There are three ways to use the  parameter to supply custom formatting information to the parse operation:  
  
-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.IFormatProvider.GetFormat%2A> simply returns itself.)  
  
-   You can pass a <xref:System.Globalization.CultureInfo> object that specifies the culture whose formatting is to be used. Its <xref:System.Globalization.CultureInfo.NumberFormat%2A> property provides formatting information.  
  
-   You can pass a custom <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method must instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  
  
 If  is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  
  
   
  
## Examples  
 The following example illustrates the use of the Parse method to convert various string representations of numbers to signed integer values.  
  
 [!CODE [System.SByte.Parse#2](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.Parse#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToBoolean%2A?displayProperty=fullName&gt;.</summary>
        <returns>`true` if the value of the current instance is not zero; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToByte%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.Byte"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToChar%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.Char"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>This conversion is not supported. Attempting to do so throws an &lt;see cref="T:System.InvalidCastException"&gt;.</summary>
        <returns>None. This conversion is not supported.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.Decimal"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToDouble%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.Double"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToInt16%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to an &lt;see cref="T:System.Int16"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToInt32%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to an &lt;see cref="T:System.Int32"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToInt64%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to an &lt;see cref="T:System.Int64"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToSByte%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToSingle%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.Single"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;see cref="T:System.Type"&gt; to which to convert this &lt;xref:System.SByte&gt; value.</param>
        <param name="provider">A &lt;see cref="T:System.IFormatProvider"&gt; implementation that provides information about the format of the returned value.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToType%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to an object of type .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.UInt16"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.UInt32"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see &lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName&gt;.</summary>
        <returns>The value of the current instance, converted to a &lt;see cref="T:System.UInt64"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.SByte> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.SByte%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
        <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToString method formats an <xref:System.SByte> value in the default ("G", or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.SByte.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Default ("G") format|A specific culture|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|A specific format|Default (current) culture|<xref:System.SByte.ToString%28System.String%29>|  
|A specific format|A specific culture|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The return value is formatted using the general numeric format specifier ("G") The string representation of the <xref:System.SByte> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.  
  
 To define the formatting of the signed byte value's string representation, call the <xref:System.SByte.ToString%28System.String%29> method.  
  
   
  
## Examples  
 The following example displays an <xref:System.SByte> value using the default ToString method. It also displays the string representations of the <xref:System.SByte> value that results from using a number of standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  
  
 [!CODE [System.SByte.ToString#2](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.ToString#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>The string representation of the value of this instance, as specified by .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToString method formats an <xref:System.SByte> value in the default ("G", or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.SByte.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Default ("G") format|Default (current) culture|<xref:System.SByte.ToString>|  
|A specific format|Default (current) culture|<xref:System.SByte.ToString%28System.String%29>|  
|A specific format|A specific culture|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. If  is `null`, the <xref:System.SByte> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.SByte> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.  
  
 The  parameter can be one of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.  
  
-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  
  
-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object and assigns the "~" character to its <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> property. The example then uses this custom object as well as the <xref:System.Globalization.NumberFormatInfo> object of the invariant culture to format a series of <xref:System.SByte> values.  
  
 [!CODE [System.SByte.ToString#3](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.ToString#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom numeric format string.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
        <returns>The string representation of the value of this instance as specified by .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToString method formats an <xref:System.SByte> value in a specified format by using the conventions of the current culture. If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Default ("G") format|Default (current) culture|<xref:System.SByte.ToString>|  
|Default ("G") format|A specific culture|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|A specific format|A specific culture|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The  parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If  is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.SByte> object is formatted with the general format specifier ("G"). If  is any other value, the method throws a <xref:System.FormatException>.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  
  
 The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the  parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29> overload.  
  
   
  
## Examples  
 The following example initializes an array of <xref:System.SByte> values and displays them by using each standard format string and some custom format strings.  
  
 [!CODE [System.SByte.ToString#4](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.ToString#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom numeric format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>The string representation of the value of this instance as specified by  and .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToString method formats an <xref:System.SByte> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <xref:System.SByte.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Default ("G") format|Default (current) culture|<xref:System.SByte.ToString>|  
|Default ("G") format|A specific culture|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|A specific format|Default (current) culture|<xref:System.SByte.ToString%28System.String%29>|  
  
 The  parameter can be any valid standard numeric format specifier, or any combination of custom numeric format specifiers. If  is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.SByte> object is formatted with the general format specifier ("G"). If  is any other value, the method throws a <xref:System.FormatException>.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  
  
 The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the ToString method is invoked, it calls the  parameter's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the  parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the  parameter to supply formatting information to the ToString method:  
  
-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  
  
-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  
  
-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  
  
 If  is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.  
  
   
  
## Examples  
 The following example displays both a positive and a negative <xref:System.SByte> value using the standard numeric format specifiers and a number of specific <xref:System.Globalization.CultureInfo> objects.  
  
 [!CODE [System.SByte.ToString#5](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.ToString#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, int8 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a number to convert.</param>
        <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in  if the conversion succeeded, or zero if the conversion failed. The conversion fails if the  parameter is `null` or &lt;xref:System.String?displayProperty=fullName&gt;, is not in the correct format, or represents a number that is less than &lt;xref:System.SByte&gt; or greater than &lt;xref:System.SByte&gt;. This parameter is passed uninitialized; any value originally supplied in  will be overwritten.</param>
        <summary>Tries to convert the string representation of a number to its &lt;see cref="T:System.SByte"&gt; equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>`true` if  was converted successfully; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParse method is like the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if  is invalid and cannot be successfully parsed.  
  
 The  parameter should be the string representation of a decimal number in the following form:  
  
 [*ws*][*sign*]*digits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  
|*digits*|A sequence of decimal digits ranging from 0 to 9.|  
  
> [!NOTE]
>  The string specified by the  parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  
  
 The  parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in , call the <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> method.  
  
 The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.  
  
 This overload interprets all digits in the  parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> overload instead.  
  
   
  
## Examples  
 The following example tries to convert the strings in an array to <xref:System.SByte> values by calling the TryParse method.  
  
 [!CODE [System.SByte.TryParse#1](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.TryParse#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, int8 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string representing a number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of . A typical value to specify is &lt;see cref="T:System.Globalization.NumberStyles"&gt;.</param>
        <param name="provider">An object that supplies culture-specific formatting information about .</param>
        <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the  parameter is `null` or &lt;xref:System.String.Empty?displayProperty=fullName&gt;, is not in a format compliant with , or represents a number less than &lt;xref:System.SByte.MinValue&gt; or greater than &lt;xref:System.SByte.MaxValue&gt;. This parameter is passed uninitialized; any value originally supplied in  will be overwritten.</param>
        <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its &lt;see cref="T:System.SByte"&gt; equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>`true` if  was converted successfully; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParse method is like the <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if  is invalid and cannot be parsed successfully.  
  
 The  parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the  parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of , the  parameter may include the following elements:  
  
 [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  
  
 If the  parameter includes <xref:System.Globalization.NumberStyles>, the  parameter may include the following elements:  
  
 [*ws*]*hexdigits*[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space. White space can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the  parameter. The currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*sign*|An optional sign. The sign can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*digits*|A sequence of digits from 0 through 9.|  
|*,*|A culture-specific group separator. The group separator of the culture specified by  can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by  can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in  only if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|E|The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*exponential_digits*|A sequence of digits from 0 through 9. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  
|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  
  
 A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  
  
|Non-composite `NumberStyles` values|Elements permitted in value in addition to digits|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles>|Decimal digits only.|  
|<xref:System.Globalization.NumberStyles>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.|  
|<xref:System.Globalization.NumberStyles>|The "e" or "E" character, which indicates exponential notation, along with *exponential_digits*. If  represents a number in exponential notation, it cannot have a non-zero, fractional component.|  
|<xref:System.Globalization.NumberStyles>|The *ws* element at the start of .|  
|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of .|  
|<xref:System.Globalization.NumberStyles>|The *sign* element before *digits*.|  
|<xref:System.Globalization.NumberStyles>|The *sign* element after *digits*.|  
|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  
|<xref:System.Globalization.NumberStyles>|The group separator (*,*) element.|  
|<xref:System.Globalization.NumberStyles>|The currency (*$*) element.|  
|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number or a number in exponential notation.|  
|<xref:System.Globalization.NumberStyles>|The *ws* element at the start or end of , *sign* at the start of , and the decimal point (*.*) symbol. The  parameter can also use exponential notation.|  
|<xref:System.Globalization.NumberStyles>|The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.|  
|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number.|  
  
 If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used,  must be a hexadecimal value. Valid hexadecimal digits are 0-9, a-f, and A-F. The only other flags that can be present in  are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles>, that includes both white-space flags.)  
  
> [!NOTE]
>  If  is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  
  
 The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . The  parameter can be any one of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  
  
-   A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  
  
-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  
  
 If  is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  
  
   
  
## Examples  
 The following example calls the TryParse method with a number of different string and <xref:System.Globalization.NumberStyles> values.  
  
 [!CODE [System.SByte.TryParse#2](../CodeSnippet/VS_Snippets_CLR_System/system.SByte.TryParse#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>