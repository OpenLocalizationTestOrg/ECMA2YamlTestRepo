<Type Name="EventArgs" FullName="System.EventArgs">
  <TypeSignature Language="C#" Value="public class EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit EventArgs extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class serves as the base class for all classes that represent event data. For example, the <xref:System.AssemblyLoadEventArgs?displayProperty=fullName> class derives from EventArgs and is used to hold the data for assembly load events. To create a custom event data class, create a class that derives from the EventArgs class and provide the properties to store the necessary data. The name of your custom event data class should end with `EventArgs`.  
  
 To pass an object that does not contain any data, use the <xref:System.EventArgs.Empty> field.  
  
 For more information about events, see the [Events](../Topic/Handling%20and%20Raising%20Events.md) article.  
  
   
  
## Examples  
 The following example shows a custom event data class named `ThresholdReachedEventArgs` that derives from the EventArgs class. An instance of the event data class is passed to the event handler for the `ThresholdReached` event.  
  
 [!CODE [EventsOverview#6](../CodeSnippet/VS_Snippets_CLR/eventsoverview#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.EventArgs"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pass an object that does not contain any data, use the <xref:System.EventArgs.Empty> field.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly EventArgs Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.EventArgs Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventArgs</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a value to use with events that do not have event data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pass this value to event handlers that are associated with events that do not have data.  
  
   
  
## Examples  
 The following example shows a simple counting application that raises an event when a threshold is equaled or exceeded. The Empty field is passed to the `OnThresholdReached` method.  
  
 [!CODE [EventsOverview#5](../CodeSnippet/VS_Snippets_CLR/eventsoverview#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>