<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the status of an asynchronous operation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IAsyncResult interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>. IAsyncResult objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.  
  
 An object that supports the IAsyncResult interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.  
  
> [!NOTE]
>  The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of IAsyncResult that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.  
  
 For a detailed description of how the IAsyncResult interface is used, see the [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md) topic.  
  
   
  
## Examples  
 The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  
  
 The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  
  
 For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  
  
 [!CODE [AsyncDelegateExamples#1](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#1)]  
[!CODE [AsyncDelegateExamples#3](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        <value>A user-defined object that qualifies or contains information about an asynchronous operation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the object that is the last parameter of the method that initiates an asynchronous operation.  
  
   
  
## Examples  
 The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  
  
 The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  
  
 For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  
  
 [!CODE [AsyncDelegateExamples#1](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#1)]  
[!CODE [AsyncDelegateExamples#5](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Threading.WaitHandle"&gt; that is used to wait for an asynchronous operation to complete.</summary>
        <value>A &lt;see cref="T:System.Threading.WaitHandle"&gt; that is used to wait for an asynchronous operation to complete.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes. The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.  
  
 The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.  
  
   
  
## Examples  
 The following example demonstrates how to use the AsyncWaitHandle property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  
  
 The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  
  
 For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  
  
 [!CODE [AsyncDelegateExamples#1](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#1)]  
[!CODE [AsyncDelegateExamples#3](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
        <value>`true` if the asynchronous operation completed synchronously; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
        <value>`true` if the operation is complete; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.  
  
   
  
## Examples  
 The following example shows how to use the IsCompleted property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes. In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate. You might use the IsCompleted property to poll for completion when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  
  
 The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  
  
 For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  
  
 [!CODE [AsyncDelegateExamples#1](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#1)]  
[!CODE [AsyncDelegateExamples#4](../CodeSnippet/VS_Snippets_CLR/AsyncDelegateExamples#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>