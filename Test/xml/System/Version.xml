<Type Name="Version" FullName="System.Version">
  <TypeSignature Language="C#" Value="public sealed class Version : ICloneable, IComparable, IComparable&lt;Version&gt;, IEquatable&lt;Version&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Version extends System.Object implements class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;class System.Version&gt;, class System.IEquatable`1&lt;class System.Version&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Version&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Version&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Version numbers consist of two to four components: major, minor, build, and revision. The major and minor components are required; the build and revision components are optional, but the build component is required if the revision component is defined. All defined components must be integers greater than or equal to 0. The format of the version number is as follows (optional components are shown in square brackets ([ and ]):  
  
 *major*.*minor*[.*build*[.*revision*]]  
  
 The components are used by convention as follows:  
  
-   *Major*: Assemblies with the same name but different major versions are not interchangeable. A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed.  
  
-   *Minor*: If the name and major version number on two assemblies are the same, but the minor version number is different, this indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product.  
  
-   *Build*: A difference in build number represents a recompilation of the same source. Different build numbers might be used when the processor, platform, or compiler changes.  
  
-   *Revision*: Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. A higher revision number might be used in a build that fixes a security hole in a previously released assembly.  
  
 Subsequent versions of an assembly that differ only by build or revision numbers are considered to be Hotfix updates of the prior version.  
  
> [!IMPORTANT]
>  The value of Version properties that have not been explicitly assigned a value is undefined (-1).  
  
 Starting with .NET Framework 2.0, the <xref:System.Version.MajorRevision%2A> and <xref:System.Version.MinorRevision%2A> properties enable you to identify a temporary version of your application that, for example, corrects a problem until you can release a permanent solution.  Furthermore, the Windows NT operating system uses the <xref:System.Version.MajorRevision%2A> property to encode the service pack number.  
  
## Assigning Version Information to Assemblies  
 Ordinarily, the Version class is not used to assign a version number to an assembly. Instead, the <xref:System.Reflection.AssemblyVersionAttribute> class is used to define an assembly's version, as illustrated by the example in this topic.  
  
## Retrieving Version Information  
 Version objects are most frequently used to store version information about some system or application component (such as the operating system), the common language runtime, the current application's executable, or a particular assembly. The following examples illustrate some of the most common scenarios:  
  
-   Retrieving the operating system version. The following example uses the <xref:System.OperatingSystem.Version%2A?displayProperty=fullName> property to retrieve the version number of the operating system.  
  
     [!CODE [System.Version.Class#1](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#1)]  
  
-   Retrieving the version of the common language runtime. The following example uses the <xref:System.Environment.Version%2A?displayProperty=fullName> property to retrieve version information about the common language runtime.  
  
     [!CODE [System.Version.Class#2](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#2)]  
  
-   Retrieving the current application's assembly version. The following example uses the <xref:System.Reflection.Assembly.GetEntryAssembly%2A?displayProperty=fullName> method to obtain a reference to an <xref:System.Reflection.Assembly> object that represents the application executable and then retrieves its assembly version number.  
  
     [!CODE [System.Version.Class#5](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#5)]  
  
-   Retrieving the current assembly's assembly version. The following example uses the <xref:System.Type.Assembly%2A?displayProperty=fullName> property to obtain a reference to an <xref:System.Reflection.Assembly> object that represents the assembly that contains the application entry point, and then retrieves its version information.  
  
     [!CODE [System.Version.Class#4](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#4)]  
  
-   Retrieving the version of a specific assembly. The following example uses the <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A?displayProperty=fullName> method to obtain a reference to an <xref:System.Reflection.Assembly> object that has a particular file name, and then retrieves its version information. Note that several other methods also exist to instantiate an <xref:System.Reflection.Assembly> object by file name or by strong name.  
  
     [!CODE [System.Version.Class#3](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#3)]  
  
-   Retrieving the Publish Version of a ClickOnce application. The following example uses the <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A?displayProperty=fullName> property to display an application's Publish Version. Note that its successful execution requires the example's application identity to be set. This is handled automatically by the Visual Studio Publish Wizard.  
  
     [!CODE [System.Version.Class#7](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#7)]  
  
    > [!IMPORTANT]
    >  The Publish Version of an application for ClickOnce deployment is completely independent of its assembly version.  
  
## Comparing Version Objects  
 You can use the <xref:System.Version.CompareTo%2A> method to determine whether one Version object is earlier than, the same as, or later than a second Version object. The following example indicates that Version 2.1 is later than Version 2.0.  
  
 [!CODE [System.Version.Class.Comparing#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.class.comparing#1)]  
  
 For two versions to be equal, the major, minor, build, and revision numbers of the first Version object must be identical to those of the second Version object. If the build or revision number of a Version object is undefined, that Version object is considered to be earlier than a Version object whose build or revision number is equal to zero. The following example illustrates this by comparing three Version objects that have undefined version components.  
  
 [!CODE [System.Version.Class.Comparing#2](../CodeSnippet/VS_Snippets_CLR_System/system.version.class.comparing#2)]  
  
   
  
## Examples  
 The following example uses the <xref:System.Reflection.AssemblyVersionAttribute> attribute to assign a version number to an assembly. At compile time, this version information is stored with the assembly's metadata. At run time, the example retrieves the value of the <xref:System.Type.Assembly%2A?displayProperty=fullName> property on a type found in the assembly to get a reference to the executing assembly, and it retrieves the assembly's version information from the <xref:System.Reflection.AssemblyName.Version%2A> property of the <xref:System.Reflection.AssemblyName> object returned by the <xref:System.Reflection.Assembly.GetName%2A?displayProperty=fullName> method.  
  
 [!CODE [System.Version.Class#6](../CodeSnippet/VS_Snippets_CLR_System/system.Version.Class#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Version ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Version"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a <xref:System.Version> object with the following property values.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Version.Major%2A>|0|  
|<xref:System.Version.Minor%2A>|0|  
|<xref:System.Version.Build%2A>|undefined (-1)|  
|<xref:System.Version.Revision%2A>|undefined (-1)|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Version (string version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string version) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Version"&gt; class using the specified string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter can contain only the components major, minor, build, and revision, in that order, and all separated by periods. There must be at least two components, and at most four. The first two components are assumed to be major and minor. The value of unspecified components is undefined.  
  
 The format of the version number is as follows. Optional components are shown in square brackets ('[' and ']'):  
  
 major.minor[.build[.revision]]  
  
 All defined components must be integers greater than or equal to 0. For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then  should be "6.2.1.3".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Version (int major, int minor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version number.</param>
        <param name="minor">The minor version number.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Version"&gt; class using the specified major and minor values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a <xref:System.Version> object with the following property values.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Version.Major%2A>||  
|<xref:System.Version.Minor%2A>||  
|<xref:System.Version.Build%2A>|undefined (-1)|  
|<xref:System.Version.Revision%2A>|undefined (-1)|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Version (int major, int minor, int build);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor, int32 build) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
        <Parameter Name="build" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version number.</param>
        <param name="minor">The minor version number.</param>
        <param name="build">The build number.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Version"&gt; class using the specified major, minor, and build values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a <xref:System.Version> object with the following property values.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Version.Major%2A>||  
|<xref:System.Version.Minor%2A>||  
|<xref:System.Version.Build%2A>||  
|<xref:System.Version.Revision%2A>|undefined (-1)|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Version (int major, int minor, int build, int revision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 major, int32 minor, int32 build, int32 revision) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="major" Type="System.Int32" />
        <Parameter Name="minor" Type="System.Int32" />
        <Parameter Name="build" Type="System.Int32" />
        <Parameter Name="revision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="major">The major version number.</param>
        <param name="minor">The minor version number.</param>
        <param name="build">The build number.</param>
        <param name="revision">The revision number.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Version"&gt; class with the specified major, minor, build, and revision numbers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates a <xref:System.Version> object with the following property values.  
  
|Property|Value|  
|--------------|-----------|  
|<xref:System.Version.Major%2A>||  
|<xref:System.Version.Minor%2A>||  
|<xref:System.Version.Build%2A>||  
|<xref:System.Version.Revision%2A>||  
  
   
  
## Examples  
 The following code example demonstrates the Version constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public int Build { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Build" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the build component of the version number for the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <value>The build number, or -1 if the build number is undefined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, if the version number is 6.2.1.3, the build number is 1. If the version number is 6.2, the build number is undefined.  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, Build, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new &lt;see cref="T:System.Version"&gt; object whose value is the same as the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>A new &lt;see cref="T:System.Object"&gt; whose values are a copy of the current &lt;xref:System.Version&gt; object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the type of the return value is important, cast the <xref:System.Object> instance that is returned by this method to a <xref:System.Version> object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="version">An object to compare, or `null`.</param>
        <summary>Compares the current &lt;see cref="T:System.Version"&gt; object to a specified object and returns an indication of their relative values.</summary>
        <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  
|Return value|Meaning|  
|------------------|-------------|  
|Less than zero|The current &lt;see cref="T:System.Version"&gt; object is a version before .|  
|Zero|The current &lt;see cref="T:System.Version"&gt; object is the same version as .|  
|Greater than zero|The current &lt;see cref="T:System.Version"&gt; object is a version subsequent to .&lt;br /&gt;&lt;br /&gt; -or-&lt;br /&gt;&lt;br /&gt; is `null`.|</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The components of `Version` in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component.  
  
 For example:  
  
-   Version 1.1 is older than version 1.1.0  
  
-   Version 1.1 is older than version 1.1.1  
  
-   Version 1.1 is older than version 1.1.2.3  
  
-   Version 1.1.2 is older than version 1.1.2.4  
  
-   Version 1.2.5 is newer than version 1.2.3.4  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Version value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class System.Version value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="value">A &lt;see cref="T:System.Version"&gt; object to compare to the current &lt;see cref="T:System.Version"&gt; object, or `null`.</param>
        <summary>Compares the current &lt;see cref="T:System.Version"&gt; object to a specified &lt;see cref="T:System.Version"&gt; object and returns an indication of their relative values.</summary>
        <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  
|Return value|Meaning|  
|------------------|-------------|  
|Less than zero|The current &lt;see cref="T:System.Version"&gt; object is a version before .|  
|Zero|The current &lt;see cref="T:System.Version"&gt; object is the same version as .|  
|Greater than zero|The current &lt;see cref="T:System.Version"&gt; object is a version subsequent to .&lt;br /&gt;&lt;br /&gt; -or-&lt;br /&gt;&lt;br /&gt; is `null`.|</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface, and performs slightly better than the <xref:System.Version.CompareTo%2A> method because it does not have to unbox the  parameter.  
  
 The components of `Version` in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component. For example:  
  
-   Version 1.1 is older than version 1.1.0.  
  
-   Version 1.1 is older than version 1.1.1.  
  
-   Version 1.1 is older than version 1.1.2.3.  
  
-   Version 1.1.2 is older than version 1.1.2.4.  
  
-   Version 1.2.5 is newer than version 1.2.3.4.  
  
   
  
## Examples  
 The following code example demonstrates generic and nongeneric versions of the `CompareTo` method for several value and reference types.  
  
 [!CODE [T.CompareTo#1](../CodeSnippet/VS_Snippets_CLR/T.CompareTo#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with the current &lt;see cref="T:System.Version"&gt; object, or `null`.</param>
        <summary>Returns a value indicating whether the current &lt;see cref="T:System.Version"&gt; object is equal to a specified object.</summary>
        <returns>`true` if the current &lt;see cref="T:System.Version"&gt; object and  are both &lt;see cref="T:System.Version"&gt; objects, and every component of the current &lt;see cref="T:System.Version"&gt; object matches the corresponding component of ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Version obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Version obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="obj">A &lt;see cref="T:System.Version"&gt; object to compare to the current &lt;see cref="T:System.Version"&gt; object, or `null`.</param>
        <summary>Returns a value indicating whether the current &lt;see cref="T:System.Version"&gt; object and a specified &lt;see cref="T:System.Version"&gt; object represent the same value.</summary>
        <returns>`true` if every component of the current &lt;see cref="T:System.Version"&gt; object matches the corresponding component of the  parameter; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IEquatable%601> interface, and performs slightly better than the <xref:System.Version.Equals%2A> method because it does not have to unbox the  parameter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Major">
      <MemberSignature Language="C#" Value="public int Major { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Major" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the major component of the version number for the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <value>The major version number.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, if the version number is 6.2, the major version is 6.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MajorRevision">
      <MemberSignature Language="C#" Value="public short MajorRevision { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 MajorRevision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the high 16 bits of the revision number.</summary>
        <value>A 16-bit signed integer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref:System.Version.Revision%2A> property to obtain the entire revision number, use the MajorRevision property to obtain the high 16 bits, and use the <xref:System.Version.MinorRevision%2A> property to obtain the low 16 bits.  
  
 Starting in the .NET Framework version 2.0, the Windows NT operating system uses the MajorRevision property to encode the service pack number.  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and the <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, MajorRevision, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minor">
      <MemberSignature Language="C#" Value="public int Minor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the minor component of the version number for the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <value>The minor version number.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, if the version number is 6.2, the minor version is 2.  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, Minor, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinorRevision">
      <MemberSignature Language="C#" Value="public short MinorRevision { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 MinorRevision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the low 16 bits of the revision number.</summary>
        <value>A 16-bit signed integer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref:System.Version.Revision%2A> property to obtain the entire revision number, use the <xref:System.Version.MajorRevision%2A> property to obtain the high 16 bits, and use the MinorRevision property to obtain the low 16 bits.  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and the <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and MinorRevision properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether two specified &lt;see cref="T:System.Version"&gt; objects are equal.</summary>
        <returns>`true` if  equals ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether the first specified &lt;see cref="T:System.Version"&gt; object is greater than the second specified &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>`true` if  is greater than ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether the first specified &lt;see cref="T:System.Version"&gt; object is greater than or equal to the second specified &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>`true` if  is greater than or equal to ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether two specified &lt;see cref="T:System.Version"&gt; objects are not equal.</summary>
        <returns>`true` if  does not equal ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether the first specified &lt;see cref="T:System.Version"&gt; object is less than the second specified &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>`true` if  is less than ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (Version v1, Version v2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(class System.Version v1, class System.Version v2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v1" Type="System.Version" />
        <Parameter Name="v2" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="v1">The first &lt;see cref="T:System.Version"&gt; object.</param>
        <param name="v2">The second &lt;see cref="T:System.Version"&gt; object.</param>
        <summary>Determines whether the first specified &lt;see cref="T:System.Version"&gt; object is less than or equal to the second &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>`true` if  is less than or equal to ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Version Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Version Parse(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a version number to convert.</param>
        <summary>Converts the string representation of a version number to an equivalent &lt;see cref="T:System.Version"&gt; object.</summary>
        <returns>An object that is equivalent to the version number specified in the  parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must have the following format:  
  
```  
  
major.minor[.build[.revision]]  
```  
  
 where *major*, *minor*, *build*, and *revision* are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in the specified order, and must be separated by periods.  
  
> [!IMPORTANT]
>  Because the string representation of a version number must conform to a recognized pattern, applications should always use exception handling when calling the Parse method to parse user input. Alternatively, you can call the <xref:System.Version.TryParse%2A> method to parse the string representation of a version number and return a value that indicates whether the parse operation succeeded.  
  
 The Parse method is a convenience method; it is equivalent to calling the <xref:System.Version.%23ctor%28System.String%29> constructor.  
  
   
  
## Examples  
 The following example uses the Parse method to parse a number of strings that contain version information.  
  
 [!CODE [System.Version.Parse#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.parse#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revision">
      <MemberSignature Language="C#" Value="public int Revision { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Revision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the revision component of the version number for the current &lt;see cref="T:System.Version"&gt; object.</summary>
        <value>The revision number, or -1 if the revision number is undefined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, if the version number is 6.2.1.3, the revision number is 3. If the version number is 6.2, the revision number is undefined.  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, Revision, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  
  
 [!CODE [system.version.revision#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.revision#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current &lt;see cref="T:System.Version"&gt; object to its equivalent &lt;xref:System.String&gt; representation.</summary>
        <returns>The &lt;see cref="T:System.String"&gt; representation of the values of the major, minor, build, and revision components of the current &lt;xref:System.Version&gt; object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:  
  
 major.minor[.build[.revision]]  
  
 For example, if you create a &lt;xref:System.Version&gt; object using the constructor `Version(1,1)`, the returned string is "1.1". If you create a &lt;xref:System.Version&gt; object using the constructor `Version(1,3,4,2)`, the returned string is "1.3.4.2".</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (int fieldCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(int32 fieldCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fieldCount">The number of components to return. The  ranges from 0 to 4.</param>
        <summary>Converts the value of the current &lt;see cref="T:System.Version"&gt; object to its equivalent &lt;xref:System.String&gt; representation. A specified count indicates the number of components to return.</summary>
        <returns>The &lt;see cref="T:System.String"&gt; representation of the values of the major, minor, build, and revision components of the current &lt;xref:System.Version&gt; object, each separated by a period character ('.'). The  parameter determines how many components are returned.  
  
|fieldCount|Return Value|  
|----------------|------------------|  
|0|An empty string ("").|  
|1|major|  
|2|major.minor|  
|3|major.minor.build|  
|4|major.minor.build.revision|  
  
 For example, if you create &lt;xref:System.Version&gt; object using the constructor `Version(1,3,5)`, `ToString(2)` returns "1.3" and `ToString(4)` throws an exception.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out Version result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.Version result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.Version&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a version number to convert.</param>
        <param name="result">When this method returns, contains the &lt;see cref="T:System.Version"&gt; equivalent of the number that is contained in , if the conversion succeeded, or a &lt;see cref="T:System.Version"&gt; object whose major and minor version numbers are 0 if the conversion failed. If  is `null` or &lt;xref:System.String.Empty?displayProperty=fullName&gt;,  is `null` when the method returns.</param>
        <summary>Tries to convert the string representation of a version number to an equivalent &lt;see cref="T:System.Version"&gt; object, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>`true` if the  parameter was converted successfully; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParse method is similar to the <xref:System.Version.Parse%2A> method, except that it does not throw an exception if the conversion fails. Instead, it returns `false` if  is null, has fewer than two or more than four components, has at least one component that is not an integer, has at least one component that is less than zero, or has at least one component that is greater than <xref:System.Int32.MaxValue?displayProperty=fullName>.  
  
 For the parse operation to succeed, the  parameter must be in the following format:  
  
```  
  
major.minor[.build[.revision]]  
```  
  
 where *major*, *minor*, *build*, and *revision* are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in order, and must be separated by periods.  
  
   
  
## Examples  
 The following example uses the TryParse method to parse a number of strings that contain version information.  
  
 [!CODE [System.Version.TryParse#1](../CodeSnippet/VS_Snippets_CLR_System/system.version.tryparse#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>