<Type Name="Type" FullName="System.Type">
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/type.cs#3d00eeab9feb80f3).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/type.cs#3d00eeab9feb80f3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 `Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata. Use the members of Type to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.  
  
 No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels. No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation. However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>. See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).  
  
 `Type` is an abstract base class that allows multiple implementations. The system will always provide the derived class `RuntimeType`. In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.  
  
> [!NOTE]
>  In multithreading scenarios, do not lock Type objects in order to synchronize access to `static` data. Other code, over which you have no control, might also lock your class type. This might result in a deadlock. Instead, synchronize access to static data by locking a private `static` object.  
  
> [!NOTE]
>  A derived class can access protected members of the calling code's base classes. Also, access is allowed to assembly members of the calling code's assembly. As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.  
  
> [!NOTE]
>  Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.  
  
 In this section:  
  
 [What types does a Type object represent?](#WhatTypes)   
 [Retrieving a Type object](#Retrieve)   
 [Comparing type objects for equality](#Equality)  
  
<a name="WhatTypes"></a>   
## What types does a Type object represent?  
 This class is thread safe; multiple threads can concurrently read from an instance of this type. An instance of the Type class can represent any of the following types:  
  
-   Classes  
  
-   Value types  
  
-   Arrays  
  
-   Interfaces  
  
-   Enumerations  
  
-   Delegates  
  
-   Constructed generic types and generic type definitions  
  
-   Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions  
  
<a name="Retrieve"></a>   
## Retrieving a Type object  
 The Type object associated with a particular type can be obtained in the following ways:  
  
-   The instance <xref:System.Object.GetType%2A?displayProperty=fullName> method returns a Type object that represents the type of an instance. Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.  
  
     The following example calls the <xref:System.Object.GetType%2A?displayProperty=fullName> method to determine the runtime type of each object in an object array.  
  
     [!CODE [System.Type#2](../CodeSnippet/VS_Snippets_CLR_System/system.Type#2)]  
  
-   The static <xref:System.Type.GetType%2A?displayProperty=fullName> methods return a Type object that represents a type specified by its fully qualified name.  
  
-   The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName>, <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=fullName> methods return `Type` objects that represent the types defined in a module. The first method can be used to obtain an array of Type objects for all the public and private types defined in a module. (You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=fullName> method, or through the <xref:System.Type.Module%2A?displayProperty=fullName> property.)  
  
-   The <xref:System.Reflection.Assembly?displayProperty=fullName> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=fullName>.  
  
-   The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.  
  
-   The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.  
  
-   The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return Type objects representing the interface types supported by a type.  
  
-   The <xref:System.Type.GetTypeArray%2A> method returns an array of Type objects representing the types specified by an arbitrary set of objects. The objects are specified with an array of type <xref:System.Object>.  
  
-   The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability. They return a Type object that represents the type specified by a `ProgID` or `CLSID`.  
  
-   The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability. It returns a `Type` object that represents the type specified by a class handle.  
  
-   The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.  
  
-   The <xref:System.Type.MakeGenericType%2A> method returns a Type object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise. A generic type can be instantiated only if it is closed.  
  
-   The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return Type objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).  
  
<a name="Equality"></a>   
## Comparing type objects for equality  
 A Type object that represents a type is unique; that is, two Type object references refer to the same object if and only if they represent the same type. This allows for comparison of Type objects using reference equality. The following example compares the Type objects that represent a number of integer values to determine whether they are of the same type.  
  
 [!CODE [System.Type#3](../CodeSnippet/VS_Snippets_CLR_System/system.Type#3)]  
  
   
  
## Examples  
 The following  example shows a few representative features of Type. The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a Type object representing <xref:System.String>. From this Type object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.  
  
 To identify the overload signature, the code example creates a temporary array containing two Type objects representing `int` (`Integer` in Visual Basic).  
  
> [!NOTE]
>  To be precise, the array contains two references to the instance of Type that represents `int` in the current application domain. For any type, there is only one instance of Type per application domain.  
  
 The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.  
  
 [!CODE [System.Type#1](../CodeSnippet/VS_Snippets_CLR_System/system.Type#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Type"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is invoked by derived classes during the construction of type objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Reflection.Assembly"&gt; in which the type is declared. For generic types, gets the &lt;see cref="T:System.Reflection.Assembly"&gt; in which the generic type is defined.</summary>
        <value>An &lt;see cref="T:System.Reflection.Assembly"&gt; instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition. For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++). If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the Assembly property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.  
  
 Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter , this property returns the assembly that contains the generic type that defines .  
  
 If the Assembly property is not available on a particular .NET platform, such as .NET Core or the Universal Windows Platform, use the  `System.Reflection.TypeInfo.Assembly` property instead. ?qualifyHint=False&autoUpgrade=True  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example displays the assembly name associated with the class and the fully qualified name of the type.  
  
 [!CODE [Type_Assembly#1](../CodeSnippet/VS_Snippets_CLR/Type_Assembly#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the assembly-qualified name of the type, which includes the name of the assembly from which this &lt;see cref="T:System.Type"&gt; object was loaded.</summary>
        <value>The assembly-qualified name of the &lt;see cref="T:System.Type"&gt;, which includes the name of the assembly from which the &lt;see cref="T:System.Type"&gt; was loaded, or `null` if the current instance represents a generic type parameter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly. The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property.  
  
> [!NOTE]
>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, "ProcessorArchitecture=msil". However, it is not included in the string returned by the AssemblyQualifiedName property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  
  
 All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  
  
|Delimiter|Meaning|  
|---------------|-------------|  
|Backslash (\\)|Escape character.|  
|Comma (,)|Precedes the Assembly name.|  
|Plus sign (+)|Precedes a nested class.|  
|Period (.)|Denotes namespace identifiers.|  
|Brackets ([])|After a type name, denotes an array of that type.<br /><br /> -or-<br /><br /> For a generic type, encloses the generic type argument list.<br /><br /> -or-<br /><br /> Within a type argument list, encloses an assembly-qualified type.|  
  
 For example, the assembly-qualified name for a class might look like this:  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator. Reflection would emit this string as follows:  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".  
  
 This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  
  
 Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where  is the type.  
  
 Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  
  
 Generic arguments of generic types are themselves qualified by assembly name. For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.  
  
 If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.  
  
   
  
## Examples  
 The following example displays the assembly name associated with the class and the fully qualified name of the type.  
  
 [!CODE [type_assembly#1](../CodeSnippet/VS_Snippets_CLR/Type_Assembly#1)]  
  
 The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and AssemblyQualifiedName properties.  
  
 [!CODE [System.Type.ToString#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.tostring#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the attributes associated with the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>A &lt;see cref="T:System.Reflection.TypeAttributes"&gt; object representing the attribute set of the &lt;xref:System.Type&gt;, unless the &lt;xref:System.Type&gt; represents a generic type parameter, in which case the value is unspecified.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values. Each group includes one member whose underlying value is zero. For example, the underlying value of the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> member in the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> group is zero, as is the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> member in the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> group. Because of this, you must use the mask before testing for those values. The example provides an illustration.  
  
> [!TIP]
>  For most purposes, properties like<xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and<xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition. For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).  
  
 If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.  
  
   
  
## Examples  
 The following example usesthe Attributes property.  
  
 [!CODE [System.Type.Attributes#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.attributes#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type from which the current &lt;see cref="T:System.Type"&gt; directly inherits.</summary>
        <value>The &lt;see cref="T:System.Type"&gt; from which the current &lt;see cref="T:System.Type"&gt; directly inherits, or `null` if the current `Type` represents the &lt;xref:System.Object&gt; class or an interface.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The base type is the type from which the current type directly inherits. <xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.  
  
 Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface. The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.  
  
 If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments. For example, consider the following declarations:  
  
 [!CODE [System.Type.BaseType#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.basetype#1)]  
  
 For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the BaseType property returns `B<int>`.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type definition, BaseType returns the class constraint, that is, the class the type parameter must inherit. If there is no class constraint, BaseType returns <xref:System.Object?displayProperty=fullName>.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example demonstrates using the BaseType property.  
  
 [!CODE [TestBaseType#1](../CodeSnippet/VS_Snippets_CLR/TestBaseType#1)]  
  
 The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly. The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.  
  
 [!CODE [System.Type.BaseType#2](../CodeSnippet/VS_Snippets_CLR_System/system.type.basetype#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; object has type parameters that have not been replaced by specific types.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type. Another way of saying this is that when examined recursively, the type must contain no generic type parameters.  
  
 Since types can be arbitrarily complex, making this determination is difficult. For convenience and to reduce the chance of error, the ContainsGenericParameters property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot. If the ContainsGenericParameters property returns `true`, the type cannot be instantiated.  
  
 The ContainsGenericParameters property searches recursively for type parameters. For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic. Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.  
  
 For a set of example classes and a table showing the values of the ContainsGenericParameters property, see <xref:System.Type.IsGenericType%2A>.  
  
   
  
## Examples  
 The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class. The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type. The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.  
  
 [!CODE [System.Type.HasUnboundGenericParameters#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Reflection.MethodBase"&gt; that represents the declaring method, if the current &lt;xref:System.Type&gt; represents a type parameter of a generic method.</summary>
        <value>If the current &lt;see cref="T:System.Type"&gt; represents a type parameter of a generic method, a &lt;xref:System.Reflection.MethodBase&gt; that represents declaring method; otherwise, `null`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The declaring method is a generic method definition. That is, if DeclaringMethod does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.  
  
 The <xref:System.Type.DeclaringType%2A> and DeclaringMethod properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:  
  
-   If the DeclaringMethod property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  
  
-   If the DeclaringMethod property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  
  
-   Getting the DeclaringMethod property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.  
  
 The <xref:System.Reflection.MethodBase> that is returned by the DeclaringMethod property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.  
  
> [!NOTE]
>  In the .NET Framework version 2.0, generic constructors are not supported.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method. It also displays information about the generic method definition and the constructed method. When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the DeclaringMethod property for the method's generic type parameter.  
  
 [!CODE [MethodInfo.Generics#1](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type that declares the current nested type or generic type parameter.</summary>
        <value>A &lt;see cref="T:System.Type"&gt; object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, `null`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.  
  
 If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition. If the type is generic, the generic type definition is returned. That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:  
  
 [!CODE [System.Type.DeclaringType#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.declaringtype#1)]  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the DeclaringType and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:  
  
-   If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  
  
-   If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the DeclaringType property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  
  
-   Getting the DeclaringType property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 This example displays the declaring type of a method in a derived class.  
  
 [!CODE [Classic Type.DeclaringType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by &lt;xref:System.Type.InvokeMember%2A&gt;.</summary>
        <value>A reference to the default binder used by the system.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default binder provided with the common language runtime is applicable in all but the most specialized circumstances. If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the  parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.  
  
 Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.  
  
 The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data. An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing conversion, which may lose data. An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.  
  
 The following table lists the conversions supported by the default binder.  
  
|Source Type|Target Type|  
|-----------------|-----------------|  
|Any type|Its base type.|  
|Any type|The interface it implements.|  
|Char|Unt16, UInt32, Int32, UInt64, Int64, Single, Double|  
|Byte|Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  
|SByte|Int16, Int32, Int64, Single, Double|  
|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  
|Int16|Int32, Int64, Single, Double|  
|UInt32|UInt64, Int64, Single, Double|  
|Int32|Int64, Single, Double|  
|UInt64|Single, Double|  
|Int64|Single, Double|  
|Single|Double|  
|Non-reference|By-reference.|  
  
   
  
## Examples  
 The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.  
  
 [!CODE [Type_DefaultBinder#1](../CodeSnippet/VS_Snippets_CLR/Type_DefaultBinder#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Separates names in the namespace of the &lt;see cref="T:System.Type"&gt;. This field is read-only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents an empty array of type &lt;see cref="T:System.Type"&gt;. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.  
  
 [!CODE [Classic Type.EmptyTypes Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current &lt;see cref="T:System.Type"&gt;. For the comparison to succeed,  must be able to be cast or converted to an object of type   &lt;see cref="T:System.Type"&gt;.</param>
        <summary>Determines if the underlying system type of the current &lt;see cref="T:System.Type"&gt; object is the same as the underlying system type of the specified &lt;xref:System.Object&gt;.</summary>
        <returns>`true` if the underlying system type of  is the same as the underlying system type of the current &lt;see cref="T:System.Type"&gt;; otherwise, `false`. This method also returns `false` if: .  
  
-   is `null`.  
  
-   cannot be cast or converted to a &lt;see cref="T:System.Type"&gt; object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>. It casts  to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example uses Equals to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.  
  
 [!CODE [System.Type.Equals#1](../CodeSnippet/VS_Snippets_CLR_System/System.Type.Equals#1)]  
  
 Two things are particularly worth noting about the example:  
  
-   The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.  
  
-   The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current &lt;see cref="T:System.Type"&gt;.</param>
        <summary>Determines if the underlying system type of the current &lt;see cref="T:System.Type"&gt; is the same as the underlying system type of the specified &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>`true` if the underlying system type of  is the same as the underlying system type of the current &lt;see cref="T:System.Type"&gt;; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses `Equals` to compare two types.  
  
 [!CODE [Classic Type.Equals1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.Equals1 Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the member filter used on attributes. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.  
  
 For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public. In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.  
  
   
  
## Examples  
 The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.  
  
 [!CODE [Type_FilterAttribute#1](../CodeSnippet/VS_Snippets_CLR/Type_FilterAttribute#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the case-sensitive member filter used on names. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` is assigned a string value, which may include a trailing "*" wildcard character. Only wildcard end string matching is supported.  
  
 For example, the `Object` may be assigned the value "Byte*". In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".  
  
   
  
## Examples  
 The following code example gets the methods associated with the user-defined `Application` type.  
  
 [!CODE [Classic Type.FilterName Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.FilterName Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the case-insensitive member filter used on names. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` is assigned a string value, which may include a trailing "*" wildcard character. Only wildcard end string matching is supported.  
  
 For example, the `Object` may be assigned the value "ByTe*". In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.  
  
   
  
## Examples  
 The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.  
  
 [!CODE [Type_FilterNameIgnoreCase#1](../CodeSnippet/VS_Snippets_CLR/Type_FilterNameIgnoreCase#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">The delegate that compares the interfaces against .</param>
        <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
        <summary>Returns an array of &lt;see cref="T:System.Type"&gt; objects representing a filtered list of interfaces implemented or inherited by the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects representing a filtered list of the interfaces implemented or inherited by the current &lt;see cref="T:System.Type"&gt;, or an empty array of type &lt;see cref="T:System.Type"&gt; if no interfaces matching the filter are implemented or inherited by the current &lt;see cref="T:System.Type"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
 The <xref:System.Reflection.Module.FilterTypeName?displayProperty=fullName> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=fullName> delegates supplied by the <xref:System.Reflection.Module?displayProperty=fullName> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=fullName> delegate.  
  
 All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.  
  
 This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned). No duplicate interfaces are returned.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, FindInterfaces searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints. If the current <xref:System.Type> represents a type argument of a generic type, FindInterfaces searches all the interfaces implemented by the type, whether or not they match constraints.  
  
> [!NOTE]
>  FindInterfaces can return generic interfaces, even on types that are not generic. For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).  
  
   
  
## Examples  
 The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.  
  
 [!CODE [Type_FindInterfaces#1](../CodeSnippet/VS_Snippets_CLR/Type_FindInterfaces#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">An object that indicates the type of member to search for.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="filter">The delegate that does the comparisons, returning `true` if the member currently being inspected matches the  and `false` otherwise. You can use the `FilterAttribute`, `FilterName`, and `FilterNameIgnoreCase` delegates supplied by this class. The first uses the fields of `FieldAttributes`, `MethodAttributes`, and `MethodImplAttributes` as search criteria, and the other two delegates use `String` objects as the search criteria.</param>
        <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of `MemberInfo` objects.  
  
 The fields of `FieldAttributes`, `MethodAttributes`, and `MethodImplAttributes` can be used in conjunction with the `FilterAttribute` delegate supplied by this class.</param>
        <summary>Returns a filtered array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects of the specified member type.</summary>
        <returns>A filtered array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects of the specified member type.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MemberInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have members of type  that match the filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
 Members include properties, methods, fields, events, and so on.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Instance` to include instance members in the search.  
  
-   Specify `BindingFlags.Static` to include static members in the search.  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>. If no such members are found, an empty array is returned.  
  
 To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type or generic method, FindMembers processes any members declared by the class constraint and the interface constraints of the type parameter.  
  
   
  
## Examples  
 The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.  
  
 [!CODE [Type_FindMembers#1](../CodeSnippet/VS_Snippets_CLR/Type_FindMembers#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the fully qualified name of the type, including its namespace but not its assembly.</summary>
        <value>The fully qualified name of the type, including its namespace but not its assembly; or `null` if the current instance represents a generic type parameter, an array type, pointer type, or `byref` type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, the fully qualified name of the <xref:System.String> type is `System.String`. Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.  
  
 If the current type represents a closed generic type, the type arguments in the string returned by the FullNameproperty are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name. The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.  
  
 [!CODE [System.Type.FullName#2](../CodeSnippet/VS_Snippets_CLR_System/system.type.fullname#2)]  
  
 This property returns `null` if:  
  
-   The current <xref:System.Type> object represents a type parameter of a generic type.  
  
     The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its FullName property.  
  
     [!CODE [System.Type.FullName#3](../CodeSnippet/VS_Snippets_CLR_System/system.type.fullname#3)]  
  
-   The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.  
  
     The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference. Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type. The output from the example shows that in all three cases, the FullName property is `null`.  
  
     [!CODE [System.Type.FullName#4](../CodeSnippet/VS_Snippets_CLR_System/system.type.fullname#4)]  
  
-   The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`  
  
     In the following example, `Derived<T>` inherits from `Base<T>`. The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its FullName property returns `null`.  
  
     [!CODE [System.Type.FullName#5](../CodeSnippet/VS_Snippets_CLR_System/system.type.fullname#5)]  
  
     To get a FullName that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example displays the full name of the specified type.  
  
 [!CODE [TestFullName#1](../CodeSnippet/VS_Snippets_CLR/TestFullName#1)]  
  
 The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, FullName, and <xref:System.Type.AssemblyQualifiedName%2A> properties.  
  
 [!CODE [System.Type.ToString#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.tostring#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a combination of &lt;see cref="T:System.Reflection.GenericParameterAttributes"&gt; flags that describe the covariance and special constraints of the current generic type parameter.</summary>
        <value>A bitwise combination of &lt;see cref="T:System.Reflection.GenericParameterAttributes"&gt; values that describes the covariance and special constraints of the current generic type parameter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints. Use the <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> value to select the constraint flags.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following code example defines a generic type `Test` with two type parameters that have different constraints. When the program executes, the constraints are examined using the GenericParameterAttributes property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.  
  
 [!CODE [System.Type.GetGenericParameterConstraints#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the &lt;see cref="T:System.Type"&gt; object represents a type parameter of a generic type or a generic method.</summary>
        <value>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GenericParameterPosition property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined. The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:  
  
-   If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  
  
-   If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  
  
 To provide the correct context for the value of the GenericParameterPosition property, it is necessary to identify the generic type or method a type parameter belongs to. For example, consider the return value of the generic method `GetSomething` in the following code:  
  
 [!CODE [System.Type.GenericParameterPosition#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.genericparameterposition#1)]  
  
 The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself. You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type. When you examine the type parameters of the return type, GenericParameterPosition returns 0 for both. The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`. The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.  
  
> [!NOTE]
>  Calling the GenericParameterPosition property causes an exception if the current <xref:System.Type> does not represent a type parameter. When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types. The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the GenericParameterPosition method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.  
  
   
  
## Examples  
 The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class. The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type. The example displays information about these generic classes, including the positions reported by the GenericParameterPosition property.  
  
 [!CODE [System.Type.HasUnboundGenericParameters#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array of the generic type arguments for this type.</summary>
        <value>An array of the generic type arguments for this type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type. If the current type is a generic type definition, this property returns an empty array.  
  
> [!NOTE]
>  If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.  
  
 To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=fullName> property. To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=fullName> extension method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of dimensions in an array.</summary>
        <returns>An integer that contains the number of dimensions in the current type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays the number of dimensions in an array.  
  
 [!CODE [Type_GetArrayRank#1](../CodeSnippet/VS_Snippets_CLR/Type_GetArrayRank#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.Attributes%2A&gt; property and gets a bitmask indicating the attributes associated with the &lt;xref:System.Type&gt;.</summary>
        <returns>A &lt;see cref="T:System.Reflection.TypeAttributes"&gt; object representing the attribute set of the &lt;xref:System.Type&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the desired constructor.  
  
 -or-  
  
 An empty array of &lt;see cref="T:System.Type"&gt; objects, to get a constructor that takes no parameters. Such an empty array is provided by the `static` field &lt;xref:System.Type?displayProperty=fullName&gt;.</param>
        <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
        <returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor). To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the requested constructor is non-public, this method returns `null`.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.  
  
   
  
## Examples  
 The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.  
  
 [!CODE [Type_GetConstructor#1](../CodeSnippet/VS_Snippets_CLR/Type_GetConstructor#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.  
  
 -or-  
  
 &lt;see cref="T:System.Type"&gt;.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
        <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
        <returns>A &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; object representing the constructor that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an exact match does not exist, the  will attempt to coerce the parameter types specified in the  array in order to select a match. If the  is unable to select a match, then `null` is returned.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public constructors in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.  
  
   
  
## Examples  
 The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.  
  
 [!CODE [Type_GetConstructor2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetConstructor2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
        <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 If an exact match does not exist, the  will attempt to coerce the parameter types specified in the  array in order to select a match. If the  is unable to select a match, then `null` is returned.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public constructors in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.  
  
   
  
## Examples  
 The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.  
  
 [!CODE [Type_GetConstructor3#1](../CodeSnippet/VS_Snippets_CLR/Type_GetConstructor3#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the constructor to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
        <returns>A &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; object representing the constructor that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 If an exact match does not exist, the  will attempt to coerce the parameter types specified in the  array in order to select a match. If the  is unable to select a match, then `null` is returned.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public constructors in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 This method implements <xref:System.Type.GetConstructor%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public constructors defined for the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; objects representing all the public instance constructors defined for the current &lt;xref:System.Type&gt;, but not including the type initializer (static constructor). If no public instance constructors are defined for the current &lt;xref:System.Type&gt;, or if the current &lt;xref:System.Type&gt; represents a type parameter in the definition of a generic type or generic method, an empty array of type &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetConstructors method does not return constructors in a particular order, such as declaration order. Your code must not depend on the order in which constructors are returned, because that order varies.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). It will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling GetConstructors on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).  
  
 If the current <xref:System.Type> represents a generic type parameter, the GetConstructors method returns an empty array.  
  
   
  
## Examples  
 This example shows the output of the GetConstructors overload from a class that has two instance constructors and one static constructor.  
  
 [!CODE [Classic Type.GetConstructors Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example#1)]  
  
 The output of this code is:  
  
 2  
  
 False  
  
 False  
  
 Because the GetConstructors overload uses only <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.  
  
 To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, as shown in the following code example:  
  
 [!CODE [Classic Type.GetConstructors Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example#2)]  
  
 Now the output is:  
  
 3  
  
 False  
  
 True  
  
 False  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the constructors defined for the current &lt;see cref="T:System.Type"&gt;, using the specified `BindingFlags`.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; objects representing all constructors defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; if no constructors are defined for the current &lt;xref:System.Type&gt;, if none of the defined constructors match the binding constraints, or if the current &lt;xref:System.Type&gt; represents a type parameter in the definition of a generic type or generic method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetConstructors method does not return constructors in a particular order, such as declaration order. Your code must not depend on the order in which constructors are returned, because that order varies.  
  
 can be used to specify whether to return only public constructors or both public and non-public constructors.  
  
 If an exact match does not exist, the  will attempt to coerce the parameter types specified in the  array in order to select a match. If the  is unable to select a match, then `null` is returned.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public constructors in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search. Constructors of base classes are not returned.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).  
  
 If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.  
  
   
  
## Examples  
 This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.  
  
 [!CODE [Classic Type.GetConstructors Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example#1)]  
  
 The output of this code is:  
  
 2  
  
 False  
  
 False  
  
 Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags> and <xref:System.Reflection.BindingFlags>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.  
  
 To find static constructors, use the GetConstructors overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, as shown in the following code example:  
  
 [!CODE [Classic Type.GetConstructors Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example#2)]  
  
 Now the output is:  
  
 3  
  
 False  
  
 True  
  
 False  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Searches for the members defined for the current &lt;see cref="T:System.Type"&gt; whose &lt;xref:System.Reflection.DefaultMemberAttribute&gt; is set.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing all default members of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MemberInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have default members.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetDefaultMembers method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 This method can be overridden by a derived class.  
  
 Members include properties, methods, fields, events, and so on.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a property `P` that returns `T`, calling GetDefaultMembers on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
   
  
## Examples  
 The following example obtains the default member information of `MyClass` and displays the default members.  
  
 [!CODE [Type_GetDefaultMembers#1](../CodeSnippet/VS_Snippets_CLR/Type_GetDefaultMembers#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, returns the &lt;see cref="T:System.Type"&gt; of the object encompassed or referred to by the current array, pointer or reference type.</summary>
        <returns>The &lt;see cref="T:System.Type"&gt; of the object encompassed or referred to by the current array, pointer, or reference type, or `null` if the current &lt;see cref="T:System.Type"&gt; is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `null` for the <xref:System.Array> class.  
  
   
  
## Examples  
 The following example demonstrates using the `GetElementType` method.  
  
 [!CODE [TestGetElementType#1](../CodeSnippet/VS_Snippets_CLR/TestGetElementType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value whose name is to be retrieved.</param>
        <summary>Returns the name of the constant that has the specified value, for the current enumeration type.</summary>
        <returns>The name of the member of the current enumeration type that has the specified value, or `null` if no such constant is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the members of the current enumeration type.</summary>
        <returns>An array that contains the names of the members of the enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants. If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the underlying type of the current enumeration type.</summary>
        <returns>The underlying type of the current enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>. Other integer types can be specified.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of the values of the constants in the current enumeration type.</summary>
        <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of an event that is declared or inherited by the current &lt;see cref="T:System.Type"&gt;.</param>
        <summary>Returns the &lt;see cref="T:System.Reflection.EventInfo"&gt; object representing the specified public event.</summary>
        <returns>The object representing the specified public event that is declared or inherited by the current &lt;see cref="T:System.Type"&gt;, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The search for  is case-sensitive. The search includes public static and public instance events.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.  
  
   
  
## Examples  
 The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.  
  
 [!CODE [Type_GetEvent#1](../CodeSnippet/VS_Snippets_CLR/Type_GetEvent#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of an event which is declared or inherited by the current &lt;see cref="T:System.Type"&gt;.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, returns the &lt;see cref="T:System.Reflection.EventInfo"&gt; object representing the specified event, using the specified binding constraints.</summary>
        <returns>The object representing the specified event that is declared or inherited by the current &lt;see cref="T:System.Type"&gt;, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public events in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.  
  
   
  
## Examples  
 The following code example uses the GetEvent method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).  
  
 [!CODE [Type_GetEvent1#1](../CodeSnippet/VS_Snippets_CLR/type_getevent1#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public events that are declared or inherited by the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.EventInfo"&gt; objects representing all the public events which are declared or inherited by the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.EventInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have public events.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The GetEvents method does not return events in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which events are returned, because that order varies.  
  
 This method can be overridden by a derived class.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.  
  
   
  
## Examples  
 The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names. To compile the Visual Basic example, use the following command line:  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!CODE [Type_GetEvents1#1](../CodeSnippet/VS_Snippets_CLR/type_getevents1#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for events that are declared or inherited by the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.EventInfo"&gt; objects representing all events that are declared or inherited by the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.EventInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have events, or if none of the events match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetEvents method does not return events in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which events are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public events in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search. Only protected and internal events on base classes are returned; private events on base classes are not returned.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.  
  
   
  
## Examples  
 The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names. To compile the Visual Basic example, use the following command line:  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!CODE [Type_GetEvents2#1](../CodeSnippet/VS_Snippets_CLR/type_getevents2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the data field to get.</param>
        <summary>Searches for the public field with the specified name.</summary>
        <returns>An object representing the public field with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive. The search includes public static and public instance fields.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.  
  
   
  
## Examples  
 The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.  
  
 [!CODE [Type_GetField#1](../CodeSnippet/VS_Snippets_CLR/Type_GetField#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the data field to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>Searches for the specified field, using the specified binding constraints.</summary>
        <returns>An object representing the field that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public fields in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.  
  
   
  
## Examples  
 The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.  
  
 [!CODE [Type_GetField#2](../CodeSnippet/VS_Snippets_CLR/Type_GetField#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public fields of the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.FieldInfo"&gt; objects representing all the public fields defined for the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.FieldInfo"&gt;, if no public fields are defined for the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetFields method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order varies.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.  
  
   
  
## Examples  
 The following example shows a use of the `GetFields()` method.  
  
 [!CODE [FieldInfo_IsSpecialName#1](../CodeSnippet/VS_Snippets_CLR/FieldInfo_IsSpecialName#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the fields defined for the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.FieldInfo"&gt; objects representing all fields defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.FieldInfo"&gt;, if no fields are defined for the current &lt;xref:System.Type&gt;, or if none of the defined fields match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public fields in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search. Only protected and internal fields on base classes are returned; private fields on base classes are not returned.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.  
  
   
  
## Examples  
 The following example shows a use of the `GetFields(BindingFlags)` method.  
  
 [!CODE [Classic MethodBase.Attributes Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of &lt;see cref="T:System.Type"&gt; objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The array elements are returned in the order in which they appear in the list of type arguments for the generic type.  
  
-   If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the GetGenericArguments method contains the types that have been assigned to the generic type parameters of the generic type definition.  
  
-   If the current type is a generic type definition, the array contains the type parameters.  
  
-   If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following code example uses the GetGenericArguments method to display the type arguments of a constructed type and the type parameters of its generic type definition.  
  
 This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property. See the larger example for sample output.  
  
 [!CODE [System.Type.IsGenericTypeDefinition#2](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of &lt;see cref="T:System.Type"&gt; objects that represent the constraints on the current generic type parameter.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects that represent the constraints on the current generic type parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each constraint on a generic type parameter is expressed as a <xref:System.Type> object. Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint. If a type parameter has no class constraint and no interface constraints, an empty array is returned.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following code example defines a generic type `Test` with two type parameters that have different constraints. When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the GetGenericParameterConstraints method.  
  
 [!CODE [System.Type.GetGenericParameterConstraints#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;see cref="T:System.Type"&gt; object that represents a generic type definition from which the current generic type can be constructed.</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; object representing a generic type from which the current type can be constructed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A generic type definition is a template from which other types can be constructed. For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic). Given a <xref:System.Type> object representing this constructed type, the GetGenericTypeDefinition method returns the generic type definition.  
  
 If two constructed types are created from the same generic type definition, using the same type arguments, the GetGenericTypeDefinition method returns the same <xref:System.Type> object for both types.  
  
 If you call the GetGenericTypeDefinition method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.  
  
> [!IMPORTANT]
>  An array of generic types is not itself generic. In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic. Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling GetGenericTypeDefinition.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and GetGenericTypeDefinition methods to retrieve the constructed type and the generic type definition. This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.  
  
 [!CODE [System.Type.GetGenericTypeDefinition#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>The hash code for this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example displays the hash code of the `System.Windows.Forms.Button` class.  
  
 [!CODE [Type_GetHashCode_GetFields#1](../CodeSnippet/VS_Snippets_CLR/Type_GetHashCode_GetFields#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
        <summary>Searches for the interface with the specified name.</summary>
        <returns>An object representing the interface with the specified name, implemented or inherited by the current &lt;see cref="T:System.Type"&gt;, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.  
  
> [!NOTE]
>  For generic interfaces, the  parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters. This is true for both generic interface definitions and constructed generic interfaces. For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"`.  
  
   
  
## Examples  
 The following code example uses the GetInterface method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.  
  
 The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.  
  
 [!CODE [Type_GetInterface#1](../CodeSnippet/VS_Snippets_CLR/Type_GetInterface#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
        <param name="ignoreCase">`true` to ignore the case of that part of  that specifies the simple interface name (the part that specifies the namespace must be correctly cased).  
  
 -or-  
  
 `false` to perform a case-sensitive search for all parts of .</param>
        <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
        <returns>An object representing the interface with the specified name, implemented or inherited by the current &lt;see cref="T:System.Type"&gt;, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter applies only to the simple interface name, not to the namespace. The portion of  that specifies the namespace must have the correct case, or the interface will not be found. For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.  
  
> [!NOTE]
>  For generic interfaces, the  parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters. This is true for both generic interface definitions and constructed generic interfaces. For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"`.  
  
   
  
## Examples  
 The following code example uses the GetInterface method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.  
  
 The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.  
  
 [!CODE [Type_GetInterface#2](../CodeSnippet/VS_Snippets_CLR/Type_GetInterface#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">The interface type to retrieve a mapping for.</param>
        <summary>Returns an interface mapping for the specified interface type.</summary>
        <returns>An object that represents the interface mapping for .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.  
  
 If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.  
  
   
  
## Examples  
 The following example calls the GetInterfaceMap method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties. Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.  
  
 [!CODE [System.Type.GetInterfaceMap#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.getinterfacemap#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects representing all the interfaces implemented or inherited by the current &lt;see cref="T:System.Type"&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Type"&gt;, if no interfaces are implemented or inherited by the current &lt;see cref="T:System.Type"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetInterfaces method does not return interfaces in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which interfaces are returned, because that order varies.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.  
  
   
  
## Examples  
 The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits. To compile the Visual Basic example, use the following compiler commands:  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!CODE [Type_GetInterfaces1#1](../CodeSnippet/VS_Snippets_CLR/Type_GetInterfaces1#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public members to get.</param>
        <summary>Searches for the public members with the specified name.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive. The search includes public static and public instance members.  
  
 Members include properties, methods, fields, events, and so on.  
  
 The GetMember method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 This method overload will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example displays all the members of the `String` class that start with the letter C.  
  
 [!CODE [Type_GetMember#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMember#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the members to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return an empty array.</param>
        <summary>Searches for the specified members, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
 Members include properties, methods, fields, events, and so on.  
  
 The GetMember method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for , and <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic) for . You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example displays all the public static members of the `myString` class that start with the letter C.  
  
 [!CODE [Type_GetMember#2](../CodeSnippet/VS_Snippets_CLR/Type_GetMember#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the members to get.</param>
        <param name="type">The value to search for.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return an empty array.</param>
        <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Members include properties, methods, fields, events, and so on.  
  
 The GetMember method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for , <xref:System.Reflection.MemberTypes?displayProperty=fullName> for , and  <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic) for . You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example displays all the methods of the `myString` class that start with the letter C.  
  
 [!CODE [Type_GetMember#3](../CodeSnippet/VS_Snippets_CLR/Type_GetMember#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public members of the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing all the public members of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MemberInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have public members.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Members include properties, methods, fields, events, and so on.  
  
 The GetMembers method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). It will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
   
  
## Examples  
 The following code example demonstrates how to use the GetMembers method overload to collect information about all public members of a specified class.  
  
 [!CODE [Type_GetMembers1#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMembers1#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero (&lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;), to return an empty array.</param>
        <summary>When overridden in a derived class, searches for the members defined for the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects representing all members defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MemberInfo"&gt;, if no members are defined for the current &lt;xref:System.Type&gt;, or if none of the defined members match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Members include properties, methods, fields, events, and so on.  
  
 The GetMembers method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search. Only protected and internal members on base classes are returned; private members on base classes are not returned.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  
  
   
  
## Examples  
 The following code example demonstrates how to use the GetMembers method overload to collect information about all public instance members of a specified class.  
  
 [!CODE [Type_GetMembers2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMembers2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public method to get.</param>
        <summary>Searches for the public method with the specified name.</summary>
        <returns>An object that represents the public method with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive. The search includes public static and public instance methods.  
  
 If a method is overloaded and has more than one public method, the GetMethod method throws an <xref:System.Reflection.AmbiguousMatchException> exception. In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.  On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=fullName> and therefore is not overloaded, the GetMethod method is able to retrieve the <xref:System.Reflection.MethodInfo> object.  
  
 [!CODE [System.Type.GetMethod#3](../CodeSnippet/VS_Snippets_CLR_System/System.Type.GetMethod#3)]  
  
 You can do one of the following to retrieve a specific method:  
  
-   Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a  argument that uniquely identifies the method. For example, if the exception is thrown because a type has a static and an instance overload, you can specify a   argument  of <xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName>.  
  
-   Call an overload of the GetMethod method that includes a  parameter which defines the types of the method's parameters.  
  
-   Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type. You can then iterate it to identify the duplicate methods named .  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example gets a method named `MethodA`.  
  
 [!CODE [Type_GetMethod1#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethod1#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>Searches for the specified method, using the specified binding constraints.</summary>
        <returns>An object representing the method that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  
  
-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> in order to get a return.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public methods in the search.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public methods (that is, private, internal, and protected methods) in the search.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   <xref:System.Reflection.BindingFlags?displayProperty=fullName> to ignore the case of .  
  
-   <xref:System.Reflection.BindingFlags?displayProperty=fullName> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If a method is overloaded and more than one overload meets the constraints specified by the  argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception. In the following example, an exception is thrown because:  
  
-   The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.  
  
-   The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.  
  
 [!CODE [System.Type.GetMethod#2](../CodeSnippet/VS_Snippets_CLR_System/System.Type.GetMethod#2)]  
  
 You can do one of the following to retrieve a specific method:  
  
-   Change the binding constraints. In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.  
  
-   Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a  parameter which defines the types of the method's parameters.  
  
-   Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes. You can then iterate it to identify the duplicate methods named . This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example gets the method that matches the specified binding flags.  
  
 [!CODE [Type_GetMethod2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethod2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public method to get.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of &lt;see cref="T:System.Type"&gt; objects (as provided by the &lt;see cref="T:System.Type"&gt; field) to get a method that takes no parameters.</param>
        <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
        <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive. The search includes public static and public instance methods.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  The  parameter cannot include type arguments. For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`. Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the  array.  
  
   
  
## Examples  
 The following example finds specific overloads of `MethodA`, specifying a variety of argument types.  
  
> [!NOTE]
>  The [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  
  
 [!CODE [Type_GetMethod4#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethod4#1)]  
  
 The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.  
  
 [!CODE [System.Type.GetMethod#1](../CodeSnippet/VS_Snippets_CLR_System/System.Type.GetMethod#1)]  
  
 The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object. To provide the  argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To provide the  argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public method to get.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of &lt;see cref="T:System.Type"&gt; objects (as provided by the &lt;see cref="T:System.Type"&gt; field) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
        <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
        <returns>An object representing the public method that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The search for  is case-sensitive. The search includes public static and public instance methods.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`. Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the  array.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of &lt;see cref="T:System.Type"&gt; objects (as provided by the &lt;see cref="T:System.Type"&gt; field) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
        <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
        <returns>An object representing the method that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public methods in the search.  
  
-   Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.  
  
> [!NOTE]
>  The [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  
  
 [!CODE [Type_GetMethod5#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethod5#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of &lt;see cref="T:System.Type"&gt; objects (as provided by the &lt;see cref="T:System.Type"&gt; field) to get a method that takes no parameters.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
        <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
        <returns>An object representing the method that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public methods in the search.  
  
-   Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
> [!NOTE]
>  For generic methods, do not include the type arguments in . For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.  
  
   
  
## Examples  
 The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.  
  
> [!NOTE]
>  The [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  
  
 [!CODE [Type_GetMethod3#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethod3#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the method to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the method to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a method that takes no parameters.  
  
 -or-  
  
 `null`. If  is `null`, arguments are not matched.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
        <returns>An object representing the method that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 If  is `null`, arguments are not matched.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public methods in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public methods of the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MethodInfo"&gt; objects representing all the public methods defined for the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MethodInfo"&gt;, if no public methods are defined for the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetMethods method does not return methods in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which methods are returned, because that order varies.  
  
 Constructors are not included in the array of methods returned by this call. Make a separate call to `GetConstructors()` to get the constructor methods.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the methods defined for the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.MethodInfo"&gt; objects representing all methods defined for the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.MethodInfo"&gt;, if no methods are defined for the current &lt;xref:System.Type&gt;, or if none of the defined methods match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetMethods method does not return methods in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which methods are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public methods in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search. Only protected and internal methods on base classes are returned; private methods on base classes are not returned.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
> [!NOTE]
>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  
  
   
  
## Examples  
 The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.  
  
 [!CODE [Type_GetMethods2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetMethods2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the nested type to get.</param>
        <summary>Searches for the public nested type with the specified name.</summary>
        <returns>An object representing the public nested type with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive.  
  
 Use the simple name of the nested class for . Do not qualify it with the name of the outer class. For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments. For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic). Do not include language-specific syntax for type parameters.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  
  
 If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  
  
> [!NOTE]
>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\(IL%20Assembler\).md).  
  
 For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the nested type to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
        <returns>An object representing the nested type that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the simple name of the nested class for . Do not qualify it with the name of the outer class. For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters. For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic). Do not include language-specific syntax for type parameters.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  
  
-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> to get a return.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public nested types in the search.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public nested types (that is, private, internal, and protected nested types) in the search.  
  
 This method returns only the nested types of the current type. It does not search the base classes of the current type. To find types that are nested in base classes, you must walk the inheritance hierarchy, calling GetNestedType at each level.  
  
 <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> are ignored.  
  
 Calling this method with only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag or only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag will return the specified nested types and does not require any other flags.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  
  
 If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  
  
> [!NOTE]
>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\(IL%20Assembler\).md).  
  
 For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the public types nested in the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects representing the public types nested in the current &lt;see cref="T:System.Type"&gt; (the search is not recursive), or an empty array of type &lt;see cref="T:System.Type"&gt; if no public types are nested in the current &lt;see cref="T:System.Type"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetNestedTypes method does not return types in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which types are returned, because that order varies.  
  
 Only the public types immediately nested in the current type are returned; the search is not recursive.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  
  
 If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  
  
> [!NOTE]
>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\(IL%20Assembler\).md).  
  
 For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.  
  
   
  
## Examples  
 The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.  
  
 [!CODE [Type_GetNestedTypes#1](../CodeSnippet/VS_Snippets_CLR/Type_GetNestedTypes#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the types nested in the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects representing all the types nested in the current &lt;see cref="T:System.Type"&gt; that match the specified binding constraints (the search is not recursive), or an empty array of type &lt;see cref="T:System.Type"&gt;, if no nested types are found that match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for nested types is not recursive.  
  
 The GetNestedTypes method does not return types in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which types are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  
  
-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> to get a return.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public nested types in the search.  
  
-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public nested types (that is, private, internal, and protected nested types) in the search.  
  
 This method returns only the nested types of the current type. It does not search the base classes of the current type. To find types that are nested in base classes, you must walk the inheritance hierarchy, calling GetNestedTypes at each level.  
  
 <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> are ignored.  
  
 Calling this method with only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag or only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag will return the specified nested types and does not require any other flags.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  
  
 If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  
  
> [!NOTE]
>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\(IL%20Assembler\).md).  
  
 For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.  
  
   
  
## Examples  
 The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.  
  
 [!CODE [Type_GetNestedClassesAbs#1](../CodeSnippet/VS_Snippets_CLR/Type_GetNestedClassesAbs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the public properties of the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.PropertyInfo"&gt; objects representing all public properties of the current &lt;xref:System.Type&gt;.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.PropertyInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have public properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a  argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic. It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.  
  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The GetProperties method does not return properties in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which properties are returned, because that order varies.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
   
  
## Examples  
 The following example demonstrates the use of the `GetProperties` method.  
  
 [!CODE [Type_GetTypeCode#2](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeCode#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>When overridden in a derived class, searches for the properties of the current &lt;see cref="T:System.Type"&gt;, using the specified binding constraints.</summary>
        <returns>An array of &lt;see cref="T:System.Reflection.PropertyInfo"&gt; objects representing all properties of the current &lt;xref:System.Type&gt; that match the specified binding constraints.  
  
 -or-  
  
 An empty array of type &lt;see cref="T:System.Reflection.PropertyInfo"&gt;, if the current &lt;xref:System.Type&gt; does not have properties, or if none of the properties match the binding constraints.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The GetProperties method does not return properties in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which properties are returned, because that order varies.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public properties in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search. Only protected and internal properties on base classes are returned; private properties on base classes are not returned.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
   
  
## Examples  
 The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic). It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.  
  
 [!CODE [Type_GetProperties2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperties2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public property to get.</param>
        <summary>Searches for the public property with the specified name.</summary>
        <returns>An object representing the public property with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The search for  is case-sensitive. The search includes public static and public instance properties.  
  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
 Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:  
  
-   A type contains two indexed properties that have the same name but different numbers of parameters. To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.  
  
-   A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic). To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag to restrict the search to members that are not inherited.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
   
  
## Examples  
 The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.  
  
 [!CODE [Type_GetProperty1#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperty1#1)]  
  
 Internally, this property is referred to in the metadata by the name "Item." Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the property to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <summary>Searches for the specified property, using the specified binding constraints.</summary>
        <returns>An object representing the property that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public properties in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
 Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:  
  
-   A type contains two indexed properties that have the same name but different numbers of parameters. To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.  
  
-   A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic). To resolve the ambiguity, include <xref:System.Reflection.BindingFlags?displayProperty=fullName> to restrict the search to members that are not inherited.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
   
  
## Examples  
 The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.  
  
 [!CODE [Type_GetProperty2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperty2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <summary>Searches for the public property with the specified name and return type.</summary>
        <returns>An object representing the public property with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The search for  is case-sensitive. The search includes public static and public instance properties.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
   
  
## Examples  
 The following example defines a class with one property and retrieves the name and type of the property.  
  
 [!CODE [Type_GetProperty_Types#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperty_Types#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public property to get.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
        <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The search for  is case-sensitive. The search includes public static and public instance properties.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
   
  
## Examples  
 The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.  
  
 [!CODE [Type_GetProperty3#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperty3#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
        <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 The search for  is case-sensitive. The search includes public static and public instance properties.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the public property to get.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
        <returns>An object representing the public property that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The search for  is case-sensitive. The search includes public static and public instance properties.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
   
  
## Examples  
 The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.  
  
 [!CODE [Type_GetProperty5#1](../CodeSnippet/VS_Snippets_CLR/Type_GetProperty5#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the property to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
        <returns>An object representing the property that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  
  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public properties in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  
  
## Indexers and Default Properties  
 [!INCLUDE[vbprvblong](../../add/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](../../add/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](../../add/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  
  
 In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named "Item". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  
  
 To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the property to get.</param>
        <param name="bindingAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted.  
  
 -or-  
  
 Zero, to return `null`.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;.</param>
        <param name="returnType">The return type of the property.</param>
        <param name="types">An array of &lt;see cref="T:System.Type"&gt; objects representing the number, order, and type of the parameters for the indexed property to get.  
  
 -or-  
  
 An empty array of the type &lt;see cref="T:System.Type"&gt; (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. The default binder does not process this parameter.</param>
        <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
        <returns>An object representing the property that matches the specified requirements, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the  parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  
  
-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  
  
-   Specify `BindingFlags.Public` to include public properties in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>The current &lt;see cref="T:System.Type"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">The assembly-qualified name of the type to get. See &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
        <summary>Gets the &lt;see cref="T:System.Type"&gt; with the specified name, performing a case-sensitive search.</summary>
        <returns>The type with the specified name, if found; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in . You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.  
  
> [!NOTE]
>  If  cannot be found, the call to the GetType method returns `null`. It does not throw an exception. To control whether an exception is thrown, call an overload of the GetType method that has a  parameter.  
  
 GetTypeGetType only works on assemblies loaded from disk. If you call GetType to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  
  
 To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  
  
 can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  
  
 If  includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  
  
 The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  
  
> [!NOTE]
>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, "ProcessorArchitecture=msil". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  
  
|Delimiter|Meaning|  
|---------------|-------------|  
|Backslash (\\)|Escape character.|  
|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  
|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  
|Comma (,)|Precedes the Assembly name.|  
|Period (.)|Denotes namespace identifiers.|  
|Plus sign (+)|Precedes a nested class.|  
  
 For example, the fully qualified name for a class might look like this:  
  
<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  
 If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  
  
<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  
 A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".  
  
 This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  
  
 Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where  is the type.  
  
 Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  
  
 The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`<T0, T1>` in Visual C#.  
  
 For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  
  
<CodeContentPlaceHolder>3</CodeContentPlaceHolder>  
> [!NOTE]
>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  
  
 Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable`1[System.Int32]".  
  
> [!NOTE]
>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  
  
 The following table shows the syntax you use with `GetType` for various types.  
  
|To Get|Use|  
|------------|---------|  
|A nullable <xref:System.Int32>|`Type.GetType("System.Nullable`1[System.Int32]")`|  
|An unmanaged pointer to `MyType`|`Type.GetType("MyType*")`|  
|An unmanaged pointer to a pointer to `MyType`|`Type.GetType("MyType**")`|  
|A managed pointer or reference to `MyType`|`Type.GetType("MyType&")`. Note that unlike pointers, references are limited to one level.|  
|A parent class and a nested class|`Type.GetType("MyParentClass+MyNestedClass")`|  
|A one-dimensional array with a lower bound of 0|`Type.GetType("MyType[]")`|  
|A one-dimensional array with an unknown lower bound|`Type.GetType("MyType[*]")`|  
|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  
|An array of one-dimensional arrays|`Type.GetType("MyType[][]")`|  
|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType("MyType[,]")`|  
|A generic type with one type argument|`Type.GetType("MyGenericType`1[MyType]")`|  
|A generic type with two type arguments|`Type.GetType("MyGenericType`2[MyType,AnotherType]")`|  
|A generic type with two assembly-qualified type arguments|`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")`|  
|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`|  
|A generic type whose type argument is a generic type with two type arguments|`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`|  
  
   
  
## Examples  
 The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.  
  
 [!CODE [Type_GetType#1](../CodeSnippet/VS_Snippets_CLR/Type_GetType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">The assembly-qualified name of the type to get. See &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
        <param name="throwOnError">`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
        <summary>Gets the &lt;see cref="T:System.Type"&gt; with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</summary>
        <returns>The type with the specified name. If the type is not found, the  parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of . See the Exceptions section.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in . You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.  
  
 `GetType` only works on assemblies loaded from disk. If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  
  
 To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  
  
 The  parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of . For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if  is `false`.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  
  
 can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  
  
 If  includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  
  
 The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  
  
> [!NOTE]
>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, "ProcessorArchitecture=msil". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  
  
|Delimiter|Meaning|  
|---------------|-------------|  
|Backslash (\\)|Escape character.|  
|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  
|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  
|Comma (,)|Precedes the Assembly name.|  
|Period (.)|Denotes namespace identifiers.|  
|Plus sign (+)|Precedes a nested class.|  
  
 For example, the fully qualified name for a class might look like this:  
  
<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  
 If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  
  
<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  
 A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".  
  
 This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  
  
 Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where  is the type.  
  
 Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  
  
 The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`<T0, T1>` in Visual C#.  
  
 For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  
  
<CodeContentPlaceHolder>3</CodeContentPlaceHolder>  
> [!NOTE]
>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  
  
 Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable`1[System.Int32]".  
  
> [!NOTE]
>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  
  
 The following table shows the syntax you use with `GetType` for various types.  
  
|To Get|Use|  
|------------|---------|  
|A nullable <xref:System.Int32>|`Type.GetType("System.Nullable`1[System.Int32]")`|  
|An unmanaged pointer to `MyType`|`Type.GetType("MyType*")`|  
|An unmanaged pointer to a pointer to `MyType`|`Type.GetType("MyType**")`|  
|A managed pointer or reference to `MyType`|`Type.GetType("MyType&")`. Note that unlike pointers, references are limited to one level.|  
|A parent class and a nested class|`Type.GetType("MyParentClass+MyNestedClass")`|  
|A one-dimensional array with a lower bound of 0|`Type.GetType("MyArray[]")`|  
|A one-dimensional array with an unknown lower bound|`Type.GetType("MyArray[*]")`|  
|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  
|A two-dimensional array's array|`Type.GetType("MyArray[][]")`|  
|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType("MyArray[,]")`|  
|A generic type with one type argument|`Type.GetType("MyGenericType`1[MyType]")`|  
|A generic type with two type arguments|`Type.GetType("MyGenericType`2[MyType,AnotherType]")`|  
|A generic type with two assembly-qualified type arguments|`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")`|  
|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`|  
|A generic type whose type argument is a generic type with two type arguments|`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`|  
  
   
  
## Examples  
 The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`. If a type object refers to an assembly that does not exist, this example throws an exception.  
  
 [!CODE [Type_GetType#1](../CodeSnippet/VS_Snippets_CLR/Type_GetType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">The assembly-qualified name of the type to get. See &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
        <param name="throwOnError">`true` to throw an exception if the type cannot be found; `false` to return `null`.Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
        <param name="ignoreCase">`true` to perform a case-insensitive search for , `false` to perform a case-sensitive search for .</param>
        <summary>Gets the &lt;see cref="T:System.Type"&gt; with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</summary>
        <returns>The type with the specified name. If the type is not found, the  parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of . See the Exceptions section.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in . You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A>method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.  
  
 `GetType` only works on assemblies loaded from disk. If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  
  
 To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  
  
 The  parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of . For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if  is `false`.  
  
 The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  
  
|Member Type|Static|Non-Static|  
|-----------------|------------|-----------------|  
|Constructor|No|No|  
|Field|No|Yes. A field is always hide-by-name-and-signature.|  
|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  
|Nested Type|No|No|  
|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  
  
1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  
  
2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  
  
3.  Custom attributes are not part of the common type system.  
  
 Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  
  
 can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  
  
 If  includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  
  
 The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  
  
> [!NOTE]
>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, "ProcessorArchitecture=msil". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  
  
|Delimiter|Meaning|  
|---------------|-------------|  
|Backslash (\\)|Escape character.|  
|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  
|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  
|Comma (,)|Precedes the Assembly name.|  
|Period (.)|Denotes namespace identifiers.|  
|Plus sign (+)|Precedes a nested class.|  
  
 For example, the fully qualified name for a class might look like this:  
  
<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  
 If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  
  
<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  
 A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".  
  
 This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  
  
 Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where  is the type.  
  
 Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  
  
 The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`<T0, T1>` in Visual C#.  
  
 For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  
  
<CodeContentPlaceHolder>3</CodeContentPlaceHolder>  
> [!NOTE]
>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  
  
 Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable`1[System.Int32]".  
  
> [!NOTE]
>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  
  
 The following table shows the syntax you use with `GetType` for various types.  
  
|To Get|Use|  
|------------|---------|  
|A nullable <xref:System.Int32>|`Type.GetType("System.Nullable`1[System.Int32]")`|  
|An unmanaged pointer to `MyType`|`Type.GetType("MyType*")`|  
|An unmanaged pointer to a pointer to `MyType`|`Type.GetType("MyType**")`|  
|A managed pointer or reference to `MyType`|`Type.GetType("MyType&")`. Note that unlike pointers, references are limited to one level.|  
|A parent class and a nested class|`Type.GetType("MyParentClass+MyNestedClass")`|  
|A one-dimensional array with a lower bound of 0|`Type.GetType("MyArray[]")`|  
|A one-dimensional array with an unknown lower bound|`Type.GetType("MyArray[*]")`|  
|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  
|A two-dimensional array's array|`Type.GetType("MyArray[][]")`|  
|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType("MyArray[,]")`|  
|A generic type with one type argument|`Type.GetType("MyGenericType`1[MyType]")`|  
|A generic type with two type arguments|`Type.GetType("MyGenericType`2[MyType,AnotherType]")`|  
|A generic type with two assembly-qualified type arguments|`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")`|  
|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`|  
|A generic type whose type argument is a generic type with two type arguments|`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">The name of the type to get. If the  parameter is provided, the type name can be any string that  is capable of resolving. If the  parameter is provided or if standard type resolution is used,  must be an assembly-qualified name (see &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
        <param name="assemblyResolver">A method that locates and returns the assembly that is specified in . The assembly name is passed to  as an &lt;see cref="T:System.Reflection.AssemblyName"&gt; object. If  does not contain the name of an assembly,  is not called. If  is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
        <param name="typeResolver">A method that locates and returns the type that is specified by  from the assembly that is returned by  or by standard assembly resolution. If no assembly is provided, the  method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; `false` is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
        <summary>Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</summary>
        <returns>The type with the specified name, or `null` if the type is not found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usage scenarios for this method and details about the  and  parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  
  
> [!NOTE]
>  If  cannot be found, the call to the GetType method returns `null`. It does not throw an exception. To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a  parameter.  
  
 Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the  and  parameters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">The name of the type to get. If the  parameter is provided, the type name can be any string that  is capable of resolving. If the  parameter is provided or if standard type resolution is used,  must be an assembly-qualified name (see &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
        <param name="assemblyResolver">A method that locates and returns the assembly that is specified in . The assembly name is passed to  as an &lt;see cref="T:System.Reflection.AssemblyName"&gt; object. If  does not contain the name of an assembly,  is not called. If  is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
        <param name="typeResolver">A method that locates and returns the type that is specified by  from the assembly that is returned by  or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; `false` is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
        <param name="throwOnError">`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
        <summary>Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
        <returns>The type with the specified name. If the type is not found, the  parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of . See the Exceptions section.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usage scenarios for this method and details about the  and  parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  
  
 Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the  parameter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">The name of the type to get. If the  parameter is provided, the type name can be any string that  is capable of resolving. If the  parameter is provided or if standard type resolution is used,  must be an assembly-qualified name (see &lt;xref:System.Type.AssemblyQualifiedName%2A&gt;), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
        <param name="assemblyResolver">A method that locates and returns the assembly that is specified in . The assembly name is passed to  as an &lt;see cref="T:System.Reflection.AssemblyName"&gt; object. If  does not contain the name of an assembly,  is not called. If  is not supplied, standard assembly resolution is performed.  
  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
        <param name="typeResolver">A method that locates and returns the type that is specified by  from the assembly that is returned by  or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of  is passed to that parameter.  
  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
        <param name="throwOnError">`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
        <param name="ignoreCase">`true` to perform a case-insensitive search for , `false` to perform a case-sensitive search for .</param>
        <summary>Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
        <returns>The type with the specified name. If the type is not found, the  parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of . See the Exceptions section.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations. By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:  
  
-   Control which version of an assembly a type is loaded from.  
  
-   Provide another place to look for a type name that does not include an assembly name.  
  
-   Load assemblies using partial assembly names.  
  
-   Return subclasses of <xref:System.Type?displayProperty=fullName> that are not created by the common language runtime (CLR).  
  
 For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name. Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.  
  
 Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=fullName> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.  
  
<a name="usage_notes"></a>   
## Usage Notes  
 This method overload and its associated overloads parse  into the name of a type and the name of an assembly, and then resolve the names. Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.  
  
> [!NOTE]
>  If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.  
  
 If  is not an assembly-qualified name, assembly resolution is skipped. Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the  parameter. The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.  
  
 General usage notes:  
  
-   Do not pass methods to  or  if they come from unknown or untrusted callers. Use only methods that you provide or that you are familiar with.  
  
    > [!CAUTION]
    >  Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.  
  
-   If you omit the  and/or  parameters, the value of the  parameter is passed to the methods that perform the default resolution.  
  
-   If  is `true`, this method throws a <xref:System.TypeLoadException> when  returns `null`, and a <xref:System.IO.FileNotFoundException> when  returns `null`.  
  
-   This method does not catch exceptions thrown by  and . You are responsible for any exceptions that are thrown by the resolver methods.  
  
<a name="resolving_assemblies"></a>   
### Resolving Assemblies  
 The  method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in . If  does not contain an assembly name,  is not called and `null` is passed to .  
  
 If  is not supplied, standard assembly probing is used to locate the assembly. If  is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your  can handle all the assemblies you pass to it.  
  
 The  method should return `null` if the assembly cannot be resolved. If  returns `null`,  is not called and no further processing occurs; additionally, if  is `true`, a <xref:System.IO.FileNotFoundException> is thrown.  
  
 If the <xref:System.Reflection.AssemblyName> that is passed to  is a partial name, one or more of its parts are `null`. For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`. If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied. The  method can use or ignore all parts of the assembly name.  
  
 The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.  
  
<a name="resolving_types"></a>   
### Resolving Types  
 If  does not specify an assembly name,  is always called. If  specifies an assembly name,  is called only when the assembly name is successfully resolved. If  or standard assembly probing returns `null`,  is not called.  
  
 The  method receives three arguments:  
  
-   The assembly to search or `null` if  does not contain an assembly name.  
  
-   The simple name of the type. In the case of a nested type, this is the outermost containing type. In the case of a generic type, this is the simple name of the generic type.  
  
-   A Boolean value that is `true` if the case of type names is to be ignored.  
  
 The implementation determines the way these arguments are used. The  method should return `null` if it cannot resolve the type. If  returns `null` and  is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.  
  
 The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.  
  
#### Resolving Nested Types  
 If  is a nested type, only the name of the outermost containing type is passed to . When  returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.  
  
#### Resolving Generic Types  
 The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments. If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.  
  
 The combination of  and  that you provide must be capable of resolving all levels of this recursion. For example, suppose you supply an  that controls the loading of `MyAssembly`. Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic). You might pass the following generic type name:  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 Notice that `MyType` is the only assembly-qualified type argument. The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified. Your  must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>. It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:  
  
 [!CODE [GetTypeOnSteroids#1](../CodeSnippet/VS_Snippets_CLR/gettypeonsteroids#1)]  
  
 The  method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.  
  
 Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name. Because your  will be called recursively, it must be able to handle this case. Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.  
  
 [!CODE [GetTypeOnSteroids#2](../CodeSnippet/VS_Snippets_CLR/gettypeonsteroids#2)]  
  
 Back to [Usage Notes](#usage_notes).  
  
#### Resolving Type Names with Special Characters  
 Certain characters have special meanings in assembly-qualified names. If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name. To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method. For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.  
  
> [!NOTE]
>  Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.  
  
 The following table shows the special characters for type names.  
  
|Character|Meaning|  
|---------------|-------------|  
|, (comma)|Delimiter for assembly-qualified names.|  
|[] (square brackets)|As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.|  
|& (ampersand)|As a suffix, indicates that a type is a reference type.|  
|* (asterisk)|As a suffix, indicates that a type is a pointer type.|  
|+ (plus)|Delimiter for nested types.|  
|\ (backslash)|Escape character.|  
  
 Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings. You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method. In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to  and to the default type resolution methods. If you need to compare a name to an unescaped name in , you must remove the escape characters.  
  
 Back to [Usage Notes](#usage_notes).  
  
<a name="mixed_name_resolution"></a>   
## Mixed Name Resolution  
 The following table summarizes the interactions between , , and default name resolution, for all combinations of type name and assembly name in :  
  
|Contents of type name|Assembly resolver method|Type resolver method|Result|  
|---------------------------|------------------------------|--------------------------|------------|  
|type, assembly|null|null|Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload.|  
|type, assembly|provided|null|returns the assembly or returns `null` if it cannot resolve the assembly. If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.|  
|type, assembly|null|provided|Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=fullName> method overload to get the assembly. If the assembly is resolved, it is passed to ; otherwise,  is not called and there is no further attempt to resolve the type.|  
|type, assembly|provided|provided|returns the assembly or returns `null` if it cannot resolve the assembly. If the assembly is resolved, it is passed to ; otherwise,  is not called and there is no further attempt to resolve the type.|  
|type|null, provided|null|Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload. Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched. If  is provided, it is ignored.|  
|type|null, provided|provided|is called, and `null` is passed for the assembly.  can provide a type from any assembly, including assemblies it loads for the purpose. If  is provided, it is ignored.|  
|assembly|null, provided|null, provided|A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name. This results in an invalid assembly name.|  
  
 Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">An array of objects whose types to determine.</param>
        <summary>Gets the types of the objects in the specified array.</summary>
        <returns>An array of &lt;see cref="T:System.Type"&gt; objects representing the types of the corresponding elements in .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the GetTypeArray method to list the types of the elements of an array.  
  
 [!CODE [Type_GetTypeCode#3](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeCode#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type whose underlying type code to get.</param>
        <summary>Gets the underlying type code of the specified &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>The code of the underlying type, or &lt;see cref="T:System.TypeCode"&gt; if  is `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.  
  
   
  
## Examples  
 The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used. In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.  
  
 [!CODE [System.TypeCode#2](../CodeSnippet/VS_Snippets_CLR_System/system.TypeCode#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the underlying type code of this &lt;see cref="T:System.Type"&gt; instance.</summary>
        <returns>The type code of the underlying type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method. When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">The CLSID of the type to get.</param>
        <summary>Gets the type associated with the specified class identifier (CLSID).</summary>
        <returns>`System.__ComObject` regardless of whether the CLSID is valid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetTypeFromCLSID method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  
  
> [!TIP]
>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  
  
 Instantiating an unmanaged COM object from its CLSID is a two-step process:  
  
1.  Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the GetTypeFromCLSID method.  
  
2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  
  
 See the example for an illustration.  
  
 The GetTypeFromCLSID overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the  argument. Note that no exception is thrown if  is not found in the registry.  
  
   
  
## Examples  
 The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.  
  
 [!CODE [System.Type.GetTypeFromCLSID#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.gettypefromclsid#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">The CLSID of the type to get.</param>
        <param name="throwOnError">`true` to throw any exception that occurs.  
  
 -or-  
  
 `false` to ignore any exception that occurs.</param>
        <summary>Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
        <returns>`System.__ComObject` regardless of whether the CLSID is valid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  
  
> [!TIP]
>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  
  
 Instantiating an unmanaged COM object from its CLSID is a two-step process:  
  
1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  
  
2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  
  
 See the example for an illustration.  
  
 Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for , but it will not fail for unregistered CLSIDs.  
  
   
  
## Examples  
 The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method. An exception is thrown if an error occurs while loading the type.  
  
 [!CODE [System.Type.GetTypeFromCLSID#2](../CodeSnippet/VS_Snippets_CLR_System/system.type.gettypefromclsid#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">The CLSID of the type to get.</param>
        <param name="server">The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.</param>
        <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server.</summary>
        <returns>`System.__ComObject` regardless of whether the CLSID is valid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  
  
> [!TIP]
>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  
  
 Instantiating an unmanaged COM object from its CLSID is a two-step process:  
  
1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  
  
2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  
  
   
  
## Examples  
 The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.  
  
 [!CODE [System.Type.GetTypeFromCLSID#3](../CodeSnippet/VS_Snippets_CLR_System/system.type.gettypefromclsid#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">The CLSID of the type to get.</param>
        <param name="server">The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.</param>
        <param name="throwOnError">`true` to throw any exception that occurs.  
  
 -or-  
  
 `false` to ignore any exception that occurs.</param>
        <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
        <returns>`System.__ComObject` regardless of whether the CLSID is valid.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  
  
> [!TIP]
>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  
  
 Instantiating an unmanaged COM object from its CLSID is a two-step process:  
  
1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  
  
2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  
  
 Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for , but it will not fail for unregistered CLSIDs.  
  
   
  
## Examples  
 The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method. An exception is thrown if an error occurs while loading the type.  
  
 [!CODE [System.Type.GetTypeFromCLSID#4](../CodeSnippet/VS_Snippets_CLR_System/system.type.gettypefromclsid#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">The object that refers to the type.</param>
        <summary>Gets the type referenced by the specified type handle.</summary>
        <returns>The type referenced by the specified &lt;see cref="T:System.RuntimeTypeHandle"&gt;, or `null` if the &lt;xref:System.RuntimeTypeHandle.Value%2A&gt; property of  is `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The handles are valid only in the application domain in which they were obtained.  
  
   
  
## Examples  
 The following example uses the GetTypeFromHandle method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.  
  
 [!CODE [Type_GetTypeFromHandle#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeFromHandle#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">The ProgID of the type to get.</param>
        <summary>Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>The type associated with the specified ProgID, if  is a valid entry in the registry and a type is associated with it; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is provided for COM support. ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">The ProgID of the type to get.</param>
        <param name="throwOnError">`true` to throw any exception that occurs.  
  
 -or-  
  
 `false` to ignore any exception that occurs.</param>
        <summary>Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
        <returns>The type associated with the specified program identifier (ProgID), if  is a valid entry in the registry and a type is associated with it; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.  
  
   
  
## Examples  
 The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid. The example then displays the ClassID related to the ProgID, along with any applicable exception message.  
  
 [!CODE [Type_GetTypeFromProgID2#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeFromProgID2#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">The progID of the type to get.</param>
        <param name="server">The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.</param>
        <summary>Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</summary>
        <returns>The type associated with the specified program identifier (progID), if  is a valid entry in the registry and a type is associated with it; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.  
  
   
  
## Examples  
 The following example retrieves a type by passing a ProgID and server name. The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.  
  
 [!CODE [Type_GetTypeFromProgID3#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeFromProgID3#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">The progID of the &lt;see cref="T:System.Type"&gt; to get.</param>
        <param name="server">The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.</param>
        <param name="throwOnError">`true` to throw any exception that occurs.  
  
 -or-  
  
 `false` to ignore any exception that occurs.</param>
        <summary>Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
        <returns>The type associated with the specified program identifier (progID), if  is a valid entry in the registry and a type is associated with it; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.  
  
   
  
## Examples  
 The following example retrieves a type by passing a ProgID and server name. The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.  
  
 [!CODE [Type_GetTypeFromProgID4#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeFromProgID4#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object for which to get the type handle.</param>
        <summary>Gets the handle for the &lt;see cref="T:System.Type"&gt; of a specified object.</summary>
        <returns>The handle for the &lt;see cref="T:System.Type"&gt; of the specified &lt;xref:System.Object&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The handles are valid only in the application domain in which they were obtained.  
  
   
  
## Examples  
 The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.  
  
 [!CODE [Type_GetTypeHandle#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeHandle#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the GUID associated with the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>The GUID associated with the &lt;see cref="T:System.Type"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.  
  
   
  
## Examples  
 The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.  
  
 [!CODE [Type_Guid#1](../CodeSnippet/VS_Snippets_CLR/Type_Guid#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; encompasses or refers to another type; that is, whether the current &lt;see cref="T:System.Type"&gt; is an array, a pointer, or is passed by reference.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is an array, a pointer, or is passed by reference; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`. HasElementType also returns `true` for "Int32*" and "Int32&".  
  
 If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.  
  
 [!CODE [Type_HasElementType#1](../CodeSnippet/VS_Snippets_CLR/Type_HasElementType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.HasElementType%2A&gt; property and determines whether the current &lt;xref:System.Type&gt; encompasses or refers to another type; that is, whether the current &lt;xref:System.Type&gt; is an array, a pointer, or is passed by reference.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is an array, a pointer, or is passed by reference; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`. HasElementTypeImpl also returns `true` for "Int32*" and "Int32&".  
  
   
  
## Examples  
 The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method. The main class checks for the `HasElementType` property and displays the element type.  
  
 [!CODE [Type_HasElementTypeImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_HasElementTypeImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For `IDispatch` members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` &amp;#124; `BindingFlags.Instance` &amp;#124; `BindingFlags.Static` are used.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;. Note that explicitly defining a &lt;xref:System.Reflection.Binder&gt; object may be required for successfully invoking method overloads with variable arguments.</param>
        <param name="target">The object on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
        <returns>An object representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  You cannot use InvokeMember to invoke a generic method.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  
  
-   `CreateInstance` to invoke a constructor.  is ignored. Not valid with other invocation flags.  
  
-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  
  
-   `GetField` to get the value of a field. Not valid with `SetField`.  
  
-   `SetField` to set the value of a field. Not valid with `GetField`.  
  
-   `GetProperty` to get a property. Not valid with `SetProperty`.  
  
-   `SetProperty` to set a property. Not valid with `GetProperty`.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 A method will be invoked if both of the following conditions are true:  
  
-   The number of parameters in the method declaration equals the number of arguments in the  array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  
  
-   The type of each argument can be converted by the binder to the type of the parameter.  
  
 The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  
  
 After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  
  
 Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.  
  
 You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 If F is a `String[]`, you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 This will change string "z" in the array that F holds to string "b".  
  
 When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]". For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  
  
> [!NOTE]
>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  
>   
>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.  
  
   
  
## Examples  
 The following example uses `InvokeMember` to access members of a type.  
  
 [!CODE [InvokeMem#1](../CodeSnippet/VS_Snippets_CLR/InvokeMem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For `IDispatch` members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` &amp;#124; `BindingFlags.Instance` &amp;#124; `BindingFlags.Static` are used.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;. Note that explicitly defining a &lt;xref:System.Reflection.Binder&gt; object may be required for successfully invoking method overloads with variable arguments.</param>
        <param name="target">The object on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric &lt;see cref="T:System.String"&gt; to a &lt;xref:System.Double&gt;.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic) to use the current thread's &lt;xref:System.Globalization.CultureInfo&gt;.</param>
        <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary>
        <returns>An object representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Although the default binder does not process <xref:System.Globalization.CultureInfo> (the parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process .  
  
> [!NOTE]
>  You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  
  
-   `CreateInstance` to invoke a constructor.  is ignored. Not valid with other invocation flags.  
  
-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  
  
-   `GetField` to get the value of a field. Not valid with `SetField`.  
  
-   `SetField` to set the value of a field. Not valid with `GetField`.  
  
-   `GetProperty` to get a property. Not valid with `SetProperty`.  
  
-   `SetProperty` to set a property. Not valid with `GetProperty`.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 A method will be invoked if both of the following conditions are true:  
  
-   The number of parameters in the method declaration equals the number of arguments in the  array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  
  
-   The type of each argument can be converted by the binder to the type of the parameter.  
  
 The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  
  
 After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  
  
 Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.  
  
 You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 If F is a `String[]`, you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 This will change string "z" in the array that F holds to string "b".  
  
 When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]". For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  
  
> [!NOTE]
>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  
>   
>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
  
 -or-  
  
 An empty string ("") to invoke the default member.  
  
 -or-  
  
 For `IDispatch` members, a string representing the DispID, for example "[DispID=3]".</param>
        <param name="invokeAttr">A bitmask comprised of one or more &lt;see cref="T:System.Reflection.BindingFlags"&gt; that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` &amp;#124; `BindingFlags.Instance` &amp;#124; `BindingFlags.Static` are used.</param>
        <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
  
 -or-  
  
 A null reference (Nothing in Visual Basic), to use the &lt;xref:System.Type.DefaultBinder%2A&gt;. Note that explicitly defining a &lt;xref:System.Reflection.Binder&gt; object may be required for successfully invoking method overloads with variable arguments.</param>
        <param name="target">The object on which to invoke the specified member.</param>
        <param name="args">An array containing the arguments to pass to the member to invoke.</param>
        <param name="modifiers">An array of &lt;see cref="T:System.Reflection.ParameterModifier"&gt; objects representing the attributes associated with the corresponding element in the  array. A parameter's associated attributes are stored in the member's signature.  
  
 The default binder processes this parameter only when calling a COM component.</param>
        <param name="culture">The &lt;see cref="T:System.Globalization.CultureInfo"&gt; object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  
  
 -or-  
  
 A null reference (`Nothing` in Visual Basic) to use the current thread's &lt;see cref="T:System.Globalization.CultureInfo"&gt;.</param>
        <param name="namedParameters">An array containing the names of the parameters to which the values in the  array are passed.</param>
        <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
        <returns>An object representing the return value of the invoked member.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.  
  
> [!NOTE]
>  You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.  
  
 When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]". For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  
  
 Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the  and  parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process  and . `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  
  
 Each parameter in the  array gets the value in the corresponding element in the  array. If the length of  is greater than the length of , the remaining argument values are passed in order.  
  
 The  array can be used to change the order of arguments in an input array. For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to  if the array `{ "b", "a" }` is supplied for .  
  
 The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  
  
-   Specify `BindingFlags.Public` to include public members in the search.  
  
-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  
  
-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  
  
 The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  
  
-   `BindingFlags.IgnoreCase` to ignore the case of .  
  
-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  
  
 The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  
  
-   `CreateInstance` to invoke a constructor.  is ignored. Not valid with other invocation flags.  
  
-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  
  
-   `GetField` to get the value of a field. Not valid with `SetField`.  
  
-   `SetField` to set the value of a field. Not valid with `GetField`.  
  
-   `GetProperty` to get a property. Not valid with `SetProperty`.  
  
-   `SetProperty` to set a property. Not valid with `GetProperty`.  
  
 See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  
  
 A method will be invoked if both of the following conditions are true:  
  
-   The number of parameters in the method declaration equals the number of arguments in the  array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  
  
-   The type of each argument can be converted by the binder to the type of the parameter.  
  
 The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  
  
 After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  
  
 `InvokeMember` can be used to invoke methods with parameters that have default values. To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags?displayProperty=fullName> to be specified. For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=fullName> to use the default value.  
  
 For example, consider a method such as MyMethod(int x, float y = 2.0). To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument. Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method. If you must do so, use `InvokeMember` instead.  
  
 Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.  
  
 You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 If F is a `String[]`, you can use code such as:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 This will change string "z" in the array that F holds to string "b".  
  
> [!NOTE]
>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  
>   
>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is abstract and must be overridden.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is abstract; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsAbstract property returns `true` in the following cases:  
  
-   The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes. In C#, abstract classes are marked with the [abstract](../Topic/abstract%20\(C%23%20Reference\).md) keyword; in Visual Basic, they are marked with the [MustInherit](../Topic/MustInherit%20\(Visual%20Basic\).md) keyword.  
  
-   The current type is an interface.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.  
  
-   `AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).  
  
-   `DerivedClass`, a class that inherits from `AbstractClass`.  
  
-   `SingleClass`, a non-inheritable class. It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.  
  
-   `ITypeInfo`, an interface.  
  
-   `ImplementingClass`, a class that implements the `ITypeInfo` interface.  
  
 The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.  
  
 [!CODE [System.Type.IsAbstract#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isabstract#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the string format attribute `AnsiClass` is selected for the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>`true` if the string format attribute `AnsiClass` is selected for the &lt;see cref="T:System.Type"&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Reflection.TypeAttributes> selects the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  
  
 If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
   
  
## Examples  
 The following example gets the field information and checks for the `AnsiClass` attribute.  
  
 [!CODE [Type_IsAnsiClass#1](../CodeSnippet/VS_Snippets_CLR/Type_IsAnsiClass#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the type is an array.</summary>
        <value>`true` if the current type is an array; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsArray property returns `false` for the <xref:System.Array> class. It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.  
  
 To check for an array, use code such as:  
  
<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  
<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  
 If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example demonstrates using theIsArray property.  
  
 [!CODE [System.Type.IsArray#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isarray#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.IsArray%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is an array.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is an array; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.  
  
   
  
## Examples  
 The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.  
  
 [!CODE [Type_IsArrayImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_IsArrayImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">The type to compare with the current type.</param>
        <summary>Determines whether an instance of a specified type can be assigned to an instance of the current type.</summary>
        <returns>`true` if any of the following conditions is true:  
  
-   and the current instance represent the same type.  
  
-   is derived either directly or indirectly from the current instance.  is derived directly from the current instance if it inherits from the current instance;  is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.  
  
-   The current instance is an interface that  implements.  
  
-   is a generic type parameter, and the current instance represents one of the constraints of .  
  
     In the following example, the current instance is a &lt;see cref="T:System.Type"&gt; object that represents the &lt;xref:System.IO.Stream&gt; class. `GenericWithConstraint` is a generic type whose generic type parameter must be of type    &lt;xref:System.IO.Stream&gt;. Passing its generic type parameter to the IsAssignableFrom indicates that  an instance of the generic type parameter can be assigned to an &lt;xref:System.IO.Stream&gt; object.  
  
     [!CODE [System.Type.IsAssignableFrom#2](../CodeSnippet/VS_Snippets_CLR_System/system.type.isassignablefrom#2)]  
  
-   represents a value type, and the current instance represents `Nullable&lt;c&gt;` (`Nullable(Of c)` in Visual Basic).  
  
 `false` if none of these conditions are true, or if  is `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsAssignableFrom method can be used to determine whether an instance of  can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.  
  
 [!CODE [System.Type.IsAssignableFrom#3](../CodeSnippet/VS_Snippets_CLR_System/system.type.isassignablefrom#3)]  
  
 This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:  
  
 [!CODE [System.Type.IsAssignableFrom#4](../CodeSnippet/VS_Snippets_CLR_System/system.type.isassignablefrom#4)]  
  
 This method can be overridden by a derived class.  
  
> [!NOTE]
>  A generic type definition is not assignable from a closed constructed type. That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.  
  
 If the  parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built. The following code example demonstrates this using a built type named `B`.  
  
 [!CODE [System.Type.IsAssignableFrom#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isassignablefrom#1)]  
  
   
  
## Examples  
 The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.  
  
 [!CODE [TestIsAssignableFrom#1](../CodeSnippet/VS_Snippets_CLR/TestIsAssignableFrom#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the string format attribute `AutoClass` is selected for the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>`true` if the string format attribute `AutoClass` is selected for the &lt;see cref="T:System.Type"&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Reflection.TypeAttributes> selects the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</summary>
        <value>`true` if the &lt;xref:System.Type.Attributes%2A&gt; property of the current type includes &lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>,<xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  
  
 For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.  
  
> [!NOTE]
>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example creates an instance of the type and displays the IsAutoLayout property.  
  
 [!CODE [Type_IsAutoLayout#1](../CodeSnippet/VS_Snippets_CLR/Type_IsAutoLayout#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is passed by reference.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is passed by reference; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.  
  
   
  
## Examples  
 The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference. The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method. The main class checks for the `HasElementType` property and displays the element type.  
  
 [!CODE [Type_HasElementTypeImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_HasElementTypeImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.IsByRef%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is passed by reference.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is passed by reference; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is a class or a delegate; that is, not a value type or interface.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is a class; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns `true` for classes as well as delegates. It returns `false` for value types (for structures and enumerations) even if they are boxed.  
  
 If the current<xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.  
  
> [!NOTE]
>  This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes. These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves. For more information, see the <xref:System.Type.IsValueType%2A>and <xref:System.Type.IsEnum%2A> properties.  
  
 The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute. If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property. The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example creates an instance of a type and indicates whether the type is a class.  
  
 [!CODE [Type_IsClass#1](../CodeSnippet/VS_Snippets_CLR/Type_IsClass#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is a COM object.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is a COM object; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `false` for COM interfaces because they are not objects. COM interfaces can be implemented by Microsoft .NET Framework objects.  
  
 You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](../Topic/Tlbimp.exe%20\(Type%20Library%20Importer\).md) tool.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.IsCOMObject%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is a COM object.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is a COM object; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `false` for COM interfaces because they are not objects. COM interfaces can be implemented by Microsoft .NET Framework objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type.</summary>
        <value>`true` if this object represents a constructed generic type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A constructed generic type has had explicit types supplied for all of its generic type parameters. It is also referred to as a closed generic type.  
  
 When this property is `true`, you can create instances of the current type; when it is `false`, you can't.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; can be hosted in a context.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; can be hosted in a context; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization. For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  
  
 [!CODE [Type_IsContextful#1](../CodeSnippet/VS_Snippets_CLR/Type_IsContextful#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements the &lt;xref:System.Type.IsContextful%2A&gt; property and determines whether the &lt;xref:System.Type&gt; can be hosted in a context.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; can be hosted in a context; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
 A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.  
  
   
  
## Examples  
 The following example demonstrates a use of the `IsContextfulImpl` method.  
  
 [!CODE [Type_IsContextfulImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_IsContextfulImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; represents an enumeration.</summary>
        <value>`true` if the current &lt;see cref="T:System.Type"&gt; represents an enumeration; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example demonstrates how to use the `IsEnum` property.  
  
 [!CODE [TestIsEnum#1](../CodeSnippet/VS_Snippets_CLR/TestIsEnum#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to be tested.</param>
        <summary>Returns a value that indicates whether the specified value exists in the current enumeration type.</summary>
        <returns>`true` if the specified value is a member of the current enumeration type; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">The COM type that is tested for equivalence with the current type.</param>
        <summary>Determines whether two COM types have the same identity and are eligible for type equivalence.</summary>
        <returns>`true` if the COM types are equivalent; otherwise, `false`. This method also returns `false` if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beginning with the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies. Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type. Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type. The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.  
  
 Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly. The IsEquivalentTo method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.  
  
 For more information, see [Type Equivalence and Embedded Interop Types](../Topic/Type%20Equivalence%20and%20Embedded%20Interop%20Types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</summary>
        <value>`true` if the &lt;xref:System.Type.Attributes%2A&gt; property of the current type includes &lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  
  
 For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.  
  
> [!NOTE]
>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example creates an instance of a type and displays the value of its IsExplicitLayout property. It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.  
  
 [!CODE [Type_IsExplicitLayout#1](../CodeSnippet/VS_Snippets_CLR/Type_IsExplicitLayout#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; represents a type parameter in the definition of a generic type or method.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; object represents a type parameter of a generic type definition or generic method definition; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.  
  
-   For a generic type or method definition, the IsGenericParameter property returns `true` for every element of the resulting array.  
  
-   For a closed constructed type or method, the IsGenericParameter property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.  
  
-   For an open constructed type or method, some elements of the array might be specific types and others might be type parameters. IsGenericParameter returns `false` for the types and `true` for the type parameters. The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following example uses the IsGenericParameter property to test for generic type parameters in a generic type.  
  
 [!CODE [System.Type.IsGenericParameter#2](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current type is a generic type.</summary>
        <value>`true` if the current type is a generic type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the IsGenericType property to determine whether a <xref:System.Type> object represents a generic type. Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.  
  
> [!NOTE]
>  The IsGenericType property returns `false` if the immediate type is not generic. For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.  
  
 The following table summarizes the invariant conditions for common terms used in generic reflection.  
  
|Term|Invariant|  
|----------|---------------|  
|generic type definition|The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.<br /><br /> Defines a generic type. A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.<br /><br /> <xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.<br /><br /> Any generic type definition is a generic type (the IsGenericType property is `true`), but the converse is not true.|  
|generic type|The IsGenericType property is `true`.<br /><br /> Can be a generic type definition, an open constructed type, or a closed constructed type.<br /><br /> Note that an array type whose element type is generic is not itself a generic type. The same is true of a <xref:System.Type> object representing a pointer to a generic type.|  
|open constructed type|The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> It is not possible to create an instance of an open constructed type.<br /><br /> Note that not all open constructed types are generic. For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.|  
|closed constructed type|The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.<br /><br /> When examined recursively, the type has no unassigned generic parameters.|  
|generic type parameter|The <xref:System.Type.IsGenericParameter%2A> property is `true`.<br /><br /> The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> In a generic type definition, a placeholder for a type that will be assigned later.|  
|generic type argument|Can be any type, including a generic type parameter.<br /><br /> Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type. If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.|  
  
 The following code example and table illustrate some of these terms and invariants. The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.  
  
 [!CODE [System.Type.IsGenericType#2](../../add/codesnippet/system.type.md)]  
  
 The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`. When the C++ and C# code is the same, only one entry is shown.  
  
|Example|Invariants|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|For this type:<br /><br /> IsGenericType is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `true`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true`.|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|For this type:<br /><br /> IsGenericType is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true`.|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|For the type of variable `d`:<br /><br /> IsGenericType is `false` because `d` is an array.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `false`.|  
|`T`, `U`, and `V` (everywhere they appear)|<xref:System.Type.IsGenericParameter%2A> is `true`.<br /><br /> IsGenericType is `false` because there is no way to constrain a type parameter to generic types.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters. This does not imply anything about type arguments that are assigned to them later.|  
|The type of field `F`|IsGenericType is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to to the type parameter of `G`. Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type. The constructed type is open because its type argument (that is, `Base`) is a generic type definition. This illustrates the recursive nature of the IsGenericType property.|  
|The nested class `Nested`|IsGenericType is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `true`. That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters. This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.|  
  
   
  
## Examples  
 The following code example displays the value of the IsGenericType, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section. For explanations of the property values, see the accompanying table in Remarks.  
  
 [!CODE [System.Type.IsGenericType#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; represents a generic type definition, from which other generic types can be constructed.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; object represents a generic type definition; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A generic type definition is a template from which other types can be constructed. For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type. Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.  
  
 Use the IsGenericTypeDefinition property to determine whether you can create new types from the current type. If the IsGenericTypeDefinition property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
   
  
## Examples  
 The following example displays information about a type, including whether or not it is a generic type definition. Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.  
  
 [!CODE [System.Type.IsGenericTypeDefinition#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; has a &lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt; attribute applied, indicating that it was imported from a COM type library.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; has a &lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare with the current type.</param>
        <summary>Determines whether the specified object is an instance of the current &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>`true` if the current `Type` is in the inheritance hierarchy of the object represented by , or if the current `Type` is an interface that  implements. `false` if neither of these conditions is the case, if  is `null`, or if the current `Type` is an open generic type (that is, &lt;xref:System.Type.ContainsGenericParameters%2A&gt; returns `true`).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
> [!NOTE]
>  A constructed type is not an instance of its generic type definition. That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).  
  
   
  
## Examples  
 The following example demonstrates the use of the `IsInstanceOfType` method.  
  
 [!CODE [TestIsInstanceOfType#1](../CodeSnippet/VS_Snippets_CLR/TestIsInstanceOfType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is an interface; that is, not a class or a value type.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is an interface; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Reflection.TypeAttributes> distinguishes a type declaration as class, interface or value type.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.  
  
 [!CODE [Type_IsInterface#1](../CodeSnippet/VS_Snippets_CLR/Type_IsInterface#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</summary>
        <value>`true` if the &lt;xref:System.Type.Attributes%2A&gt; property of the current type includes &lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  
  
 For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to specify that layout is sequential.  
  
> [!NOTE]
>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  
  
 For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the IsLayoutSequential property, and displays the result.  
  
 [!CODE [Type_IsLayoutSequential#1](../CodeSnippet/VS_Snippets_CLR/Type_IsLayoutSequential#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is marshaled by reference.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is marshaled by reference; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the `IsContextful`, IsMarshalByRef, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  
  
 [!CODE [Type_IsContextful#1](../CodeSnippet/VS_Snippets_CLR/Type_IsContextful#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements the &lt;xref:System.Type.IsMarshalByRef%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is marshaled by reference.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is marshaled by reference; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be overridden by a derived class.  
  
   
  
## Examples  
 The following example determines whether the given type is marshaled by reference and displays the result.  
  
 [!CODE [Type_IsMarshalByRefImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_IsMarshalByRefImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current &lt;see cref="T:System.Type"&gt; object represents a type whose definition is nested inside the definition of another type.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested inside another type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsNested property returns `true` for all nested types, regardless of visibility. To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.  
  
> [!NOTE]
>  The <xref:System.Reflection.TypeAttributes> enumeration member selects the visibility attributes for a type.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is nested and visible only within its own assembly.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested and visible only within its own assembly; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is nested and visible only to classes that belong to both its own family and its own assembly.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
> [!NOTE]
>  The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly. `protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.  
  
 A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is nested and visible only within its own family.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested and visible only within its own family; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
 A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is nested and visible only to classes that belong to either its own family or to its own assembly.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the IsNestedFamORAssem property returns `true`.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
 A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is nested and declared private.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is nested and declared private; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a class is nested and declared public.</summary>
        <value>`true` if the class is nested and declared public; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
   
  
## Examples  
 The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  
  
 [!CODE [System.Type.IsNestedFamAndAssem#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.isnestedfamandassem#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is not declared public.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is not declared public and is not a nested type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.  
  
   
  
## Examples  
 This example usesthe `IsNotPublic` property to get the visibility of the type.  
  
 [!CODE [Classic Type.IsNotPublic Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example#1)]  
  
 The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.  
  
 [!CODE [Classic Type.IsNotPublic Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example#2)]  
  
 For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`. The reflection output for this code fragment would be as follows:  
  
|Class|IsNotPublic|IsPublic|IsNestedPublic|IsNestedPrivate|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|A|FALSE|TRUE|FALSE|FALSE|  
|B|FALSE|FALSE|TRUE|FALSE|  
|C|FALSE|FALSE|FALSE|TRUE|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is a pointer.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is a pointer; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example shows a use of the `IsPointer` property.  
  
 [!CODE [Type_HasElementTypeImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_HasElementTypeImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.IsPointer%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is a pointer.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is a pointer; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is one of the primitive types.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is one of the primitive types; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.  
  
 If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and IsPrimitive properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  
  
 [!CODE [Type_IsContextful#1](../CodeSnippet/VS_Snippets_CLR/Type_IsContextful#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, implements the &lt;xref:System.Type.IsPrimitive%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is one of the primitive types.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is one of the primitive types; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.  
  
   
  
## Examples  
 The following example determines whether the given type is a primitive type and displays the result.  
  
 [!CODE [Type_IsPrimitiveImpl#1](../CodeSnippet/VS_Snippets_CLR/Type_IsPrimitiveImpl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is declared public.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is declared public and is not a nested type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.  
  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.  
  
 <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  
  
   
  
## Examples  
 The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.  
  
 [!CODE [Type.IsPublic#1](../CodeSnippet/VS_Snippets_CLR/Type.IsPublic#1)]  
  
 For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is declared sealed.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is declared sealed; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.  
  
   
  
## Examples  
 The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.  
  
 [!CODE [Type_IsSealed#1](../CodeSnippet/VS_Snippets_CLR/Type_IsSealed#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</summary>
        <value>`true` if the current type is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsSecurityCritical, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  
  
|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  
|--------------------|------------------------|----------------------------|---------------------------|  
|Critical|`true`|`false`|`false`|  
|Safe critical|`true`|`true`|`false`|  
|Transparent|`false`|`false`|`true`|  
  
 Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  
  
> [!IMPORTANT]
>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  
  
 For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</summary>
        <value>`true` if the current type is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.IsSecurityCritical%2A>, IsSecuritySafeCritical, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  
  
|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  
|--------------------|------------------------|----------------------------|---------------------------|  
|Critical|`true`|`false`|`false`|  
|Safe critical|`true`|`true`|`false`|  
|Transparent|`false`|`false`|`true`|  
  
 Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  
  
> [!IMPORTANT]
>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  
  
 For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
        <value>`true` if the type is security-transparent at the current trust level; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.  
  
 The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and IsSecurityTransparent properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  
  
> [!IMPORTANT]
>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  
  
 For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is serializable.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is serializable; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
   
  
## Examples  
 The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.  
  
 [!CODE [Type_IsSerializable#1](../CodeSnippet/VS_Snippets_CLR/Type_IsSerializable#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the type has a name that requires special handling.</summary>
        <value>`true` if the type has a name that requires special handling; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">The type to compare with the current type.</param>
        <summary>Determines whether the current &lt;see cref="T:System.Type"&gt; derives from the specified &lt;see cref="T:System.Type"&gt;.</summary>
        <returns>`true` if the current `Type` derives from ; otherwise, `false`. This method also returns `false` if  and the current `Type` are equal.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can call the IsSubclassOf method to determine any of the following:  
  
-   Whether one class derives from another.  
  
-   Whether a type derives from <xref:System.ValueType>. However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.  
  
-   Whether a type derives from <xref:System.Enum>. However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.  
  
-   Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.  
  
 The IsSubclassOf method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface. Use the<xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.  
  
 [!CODE [System.Type.IsSubclassOf#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.issubclassof#1)]  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=fullName> if it has no class constraint.  
  
> [!NOTE]
>  Except when used with interfaces, IsSubclassOf is the converse of <xref:System.Type.IsAssignableFrom%2A>. That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.  
  
 This method can be overridden by a derived class.  
  
   
  
## Examples  
 The following example creates a class named `Class1`and a derived class named `DerivedC1`. It calls the IsSubclassOf method to show that `DerivedC1` is a subclass of `Class1`.  
  
 [!CODE [TestIsSubclassOf#1](../CodeSnippet/VS_Snippets_CLR/TestIsSubclassOf#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the string format attribute `UnicodeClass` is selected for the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>`true` if the string format attribute `UnicodeClass` is selected for the &lt;see cref="T:System.Type"&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Reflection.TypeAttributes> is used to select the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; is a value type.</summary>
        <value>`true` if the &lt;see cref="T:System.Type"&gt; is a value type; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Value types are types that are represented as sequences of bits; value types are not classes or interfaces. Value types are referred to as "structs" in some programming languages. Enums are a special case of value types.  
  
 This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself. It is the base class for all value types, and therefore any value type can be assigned to it. This would not be possible if <xref:System.ValueType> itself was a value type. Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.  
  
 This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself. For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.  
  
 This property is read-only.  
  
   
  
## Examples  
 The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.  
  
 [!CODE [Type_IsValueType#1](../CodeSnippet/VS_Snippets_CLR/Type_IsValueType#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements the &lt;xref:System.Type.IsValueType%2A&gt; property and determines whether the &lt;xref:System.Type&gt; is a value type; that is, not a class or an interface.</summary>
        <returns>`true` if the &lt;see cref="T:System.Type"&gt; is a value type; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is provided to enable the implementation of alternate type systems. It is not generally used in application code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;see cref="T:System.Type"&gt; can be accessed by code outside the assembly.</summary>
        <value>`true` if the current &lt;see cref="T:System.Type"&gt; is a public type or a public nested type such that all the enclosing types are public; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to determine whether a type is part of the public interface of a component assembly.  
  
   
  
## Examples  
 The following code example tests two classes, only one of which is visible outside the assembly.  
  
 [!CODE [System.Type.IsVisible#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;see cref="T:System.Type"&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MakeArrayType method provides a way to generate array types whose element types are computed at run time.  
  
 **Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays. A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension. This method overload can only be used to create vector types, and it is the only way to create a vector type. Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.  
  
   
  
## Examples  
 The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  
  
 [!CODE [System.Type.MakeXxxType#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
        <summary>Returns a &lt;see cref="T:System.Type"&gt; object representing an array of the current type, with the specified number of dimensions.</summary>
        <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.  
  
> [!NOTE]
>  The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays. A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension. You cannot use this method overload to create a vector type; if  is 1, this method overload returns a multidimensional array type that happens to have one dimension. Use the <xref:System.Type.MakeArrayType> method overload to create vector types.  
  
   
  
## Examples  
 The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  
  
 [!CODE [System.Type.MakeXxxType#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;see cref="T:System.Type"&gt; object that represents the current type when passed as a `ref` parameter (`ByRef` parameter in Visual Basic).</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; object that represents the current type when passed as a `ref` parameter (`ByRef` parameter in Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MakeByRefType method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.  
  
 Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.  
  
   
  
## Examples  
 The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  
  
 [!CODE [System.Type.MakeXxxType#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
        <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a &lt;see cref="T:System.Type"&gt; object representing the resulting constructed type.</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; representing the constructed type formed by substituting the elements of  for the type parameters of the current generic type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MakeGenericType method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type. You can use this <xref:System.Type> object to create run-time instances of the constructed type.  
  
 Types constructed with MakeGenericType can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types. You might use such open constructed types when you emit dynamic assemblies. For example, consider the classes `Base` and `Derived` in the following code.  
  
 [!CODE [System.Type.MakeGenericType#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.makegenerictype#1)]  
  
 To generate `Derived` in a dynamic assembly, it is necessary to construct its base type. To do this, call the MakeGenericType method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`. Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the MakeGenericType method.  
  
> [!NOTE]
>  A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the MakeGenericType method on this type because it is not a generic type definition. To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call MakeGenericType with the desired type arguments.  
  
 The <xref:System.Type> object returned by MakeGenericType is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A>method of any constructed type that was created from the same generic type definition using the same type arguments.  
  
> [!NOTE]
>  An array of generic types is not itself a generic type. You cannot call MakeGenericType on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic). To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call MakeGenericType on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type. The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).  
  
 For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  
  
## Nested Types  
 If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic. This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types. Consider the following classes:  
  
 [!CODE [System.Type.MakeGenericType#2](../CodeSnippet/VS_Snippets_CLR_System/system.type.makegenerictype#2)]  
  
 The type parameter list of the nested class `Inner` has two type parameters,  and , the first of which is the type parameter of its enclosing class. Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, , , and , with  and  coming from its enclosing classes. The nested class `Innermost2` has two type parameters,  and , which come from its enclosing classes.  
  
 If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.  
  
 To construct a generic type from the generic type definition for a nested type, call the MakeGenericType method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own. To create an instance of `Innermost1`, call the MakeGenericType method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the MakeGenericType method with an array containing two types, to be assigned to T and U.  
  
 The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types. Otherwise, the type parameters would not be in scope within the bodies of the nested types. It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](../Topic/Ilasm.exe%20\(IL%20Assembler\).md). Consider the following code for the MSIL assembler:  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 In this example, it is not possible to define a field of type  or  in class `Innermost`, because those type parameters are not in scope. The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\(IL%20Disassembler\).md) to examine nested classes defined in the high-level languages and observe this naming scheme.  
  
   
  
## Examples  
 The following example uses the MakeGenericType method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type. The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.  
  
 [!CODE [System.Type.BindGenericParameters#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a &lt;see cref="T:System.Type"&gt; object that represents a pointer to the current type.</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; object that represents a pointer to the current type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The MakePointerType method provides a way to generate pointer types for parameter lists.  
  
 Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.  
  
   
  
## Examples  
 The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  
  
 [!CODE [System.Type.MakeXxxType#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Reflection.MemberTypes"&gt; value indicating that this member is a type or a nested type.</summary>
        <value>A &lt;see cref="T:System.Reflection.MemberTypes"&gt; value indicating that this member is a type or a nested type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> when a given member is a nested type.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns<xref:System.Reflection.MemberTypes?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example shows the `MemberType` field as a parameter to the `GetMember` method:  
  
 [!CODE [Classic Type.MemberType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.MemberType Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a missing value in the &lt;see cref="T:System.Type"&gt; information. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the `Missing` field for invocation through reflection to obtain the default value of a parameter. If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.  
  
   
  
## Examples  
 The following code example shows the use of the `Missing` field to invoke a method with its default arguments.  
  
 [!CODE [Classic Type.Missing Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.Missing Example#1)]  
  
 This code produces the following output:  
  
 a = 10 b = 55.3 c = 12  
  
 a = 10 b = 1.3 c = 1  
  
 a = 10 b = 1.2 c = 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the module (the DLL) in which the current &lt;see cref="T:System.Type"&gt; is defined.</summary>
        <value>The module in which the current &lt;see cref="T:System.Type"&gt; is defined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined. For example, if you create an instance of `MyGenericStack<int>`, the Module property for the constructed type returns the module in which `MyGenericStack<T>` is defined.  
  
 Similarly, if the current <xref:System.Type> represents a generic parameter , this property returns the assembly that contains the generic type that defines .  
  
   
  
## Examples  
 This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.  
  
 [!CODE [Type_ToString#1](../CodeSnippet/VS_Snippets_CLR/Type_ToString#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace of the &lt;see cref="T:System.Type"&gt;.</summary>
        <value>The namespace of the &lt;see cref="T:System.Type"&gt;; `null` if the current instance has no namespace or represents a generic parameter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure. From the viewpoint of the runtime, there are no namespaces.  
  
 If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition. Similarly, if the current <xref:System.Type> represents a generic parameter , this property returns the namespace that contains the generic type definition that defines .  
  
 If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.  
  
   
  
## Examples  
 This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.  
  
 [!CODE [Type_ToString#1](../CodeSnippet/VS_Snippets_CLR/Type_ToString#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Indicates whether two &lt;see cref="T:System.Type"&gt; objects are equal.</summary>
        <returns>`true` if  is equal to ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Indicates whether two &lt;see cref="T:System.Type"&gt; objects are not equal.</summary>
        <returns>`true` if  is not equal to ; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the class object that was used to obtain this member.</summary>
        <value>The `Type` object through which this &lt;see cref="T:System.Type"&gt; object was obtained.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.  
  
   
  
## Examples  
 This example displays the reflected type of a nested class.  
  
 [!CODE [Classic Type.ReflectedType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">The assembly-qualified name of the &lt;see cref="T:System.Type"&gt; to get.</param>
        <param name="throwIfNotFound">`true` to throw a &lt;see cref="T:System.TypeLoadException"&gt; if the type cannot be found; `false` to return `null` if the type cannot be found. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
        <param name="ignoreCase">`true` to perform a case-insensitive search for ; `false` to perform a case-sensitive search for .</param>
        <summary>Gets the &lt;see cref="T:System.Type"&gt; with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.</summary>
        <returns>The type with the specified name, if found; otherwise, `null`. If the type is not found, the  parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of . See the Exceptions section.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the assembly containing the type is not already loaded into the reflection-only context, using the ReflectionOnlyGetType method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method. For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName> property. For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  
  
 If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.  
  
 The  parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of . For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if  is `false`.  
  
 For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](../Topic/How%20to:%20Load%20Assemblies%20into%20the%20Reflection-Only%20Context.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"&gt; that describes the layout of the current type.</summary>
        <value>Gets a &lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"&gt; that describes the gross layout features of the current type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method. Instead, use this property to get it.  
  
   
  
## Examples  
 The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class). The example then uses the StructLayoutAttribute property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.  
  
 [!CODE [Type.StructLayoutAttribute#1](../CodeSnippet/VS_Snippets_CLR/Type.StructLayoutAttribute#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames(valuetype System.Guid riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="rgszNames">Passed-in array of names to be mapped.</param>
        <param name="cNames">Count of the names to be mapped.</param>
        <param name="lcid">The locale context in which to interpret the names.</param>
        <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
        <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">The type information to return.</param>
        <param name="lcid">The locale identifier for the type information.</param>
        <param name="ppTInfo">A pointer to the requested type information object.</param>
        <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount(unsigned int32 pcTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
        <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, valuetype System.Guid riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">Identifies the member.</param>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="lcid">The locale context in which to interpret arguments.</param>
        <param name="wFlags">Flags describing the context of the call.</param>
        <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
        <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
        <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
        <param name="puArgErr">The index of the first argument that has an error.</param>
        <summary>Provides access to properties and methods exposed by an object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a `String` representing the name of the current `Type`.</summary>
        <returns>A &lt;see cref="T:System.String"&gt; representing the name of the current &lt;xref:System.Type&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns the fully qualified common language runtime namespace and name for all primitive types. For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".  
  
 If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.  
  
   
  
## Examples  
 This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.  
  
 [!CODE [Type_ToString#1](../CodeSnippet/VS_Snippets_CLR/Type_ToString#1)]  
  
 The following example compares the strings returned by the ToString method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.  
  
 [!CODE [System.Type.ToString#1](../CodeSnippet/VS_Snippets_CLR_System/system.type.tostring#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handle for the current &lt;see cref="T:System.Type"&gt;.</summary>
        <value>The handle for the current &lt;see cref="T:System.Type"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TypeHandle` encapsulates a pointer to an internal data structure that represents the type. This handle is unique during the process lifetime. The handle is valid only in the application domain in which it was obtained.  
  
   
  
## Examples  
 The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.  
  
 [!CODE [Type_TypeHandle#1](../CodeSnippet/VS_Snippets_CLR/Type_TypeHandle#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the initializer for the type.</summary>
        <value>An object that contains the name of the class constructor for the &lt;see cref="T:System.Type"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.  
  
 If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the type provided by the common language runtime that represents this type.</summary>
        <value>The underlying system type for the &lt;see cref="T:System.Type"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>