<Type Name="RuntimeTypeHandle" FullName="System.RuntimeTypeHandle">
  <TypeSignature Language="C#" Value="public struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit RuntimeTypeHandle extends System.ValueType implements class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a type using an internal metadata token.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to obtain a RuntimeTypeHandlefrom a type or from an object, and how to turn the handle back into a type.  
  
 [!CODE [Type_GetTypeHandle#1](../CodeSnippet/VS_Snippets_CLR/Type_GetTypeHandle#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare to the current instance.</param>
        <summary>Indicates whether the specified object is equal to the current &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure.</summary>
        <returns>`true` if  is a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure and is equal to the value of this instance; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">The &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure to compare to the current instance.</param>
        <summary>Indicates whether the specified &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure is equal to the current &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure.</summary>
        <returns>`true` if the value of  is equal to the value of this instance; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModuleHandle">
      <MemberSignature Language="C#" Value="public ModuleHandle GetModuleHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ModuleHandle GetModuleHandle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ModuleHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a handle to the module that contains the type represented by the current instance.</summary>
        <returns>A &lt;see cref="T:System.ModuleHandle"&gt; structure representing a handle to the module that contains the type represented by the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to be populated with serialization information.</param>
        <param name="context">(Reserved) The location where serialized data will be stored and retrieved.</param>
        <summary>Populates a &lt;see cref="T:System.Runtime.Serialization.SerializationInfo"&gt; with the data necessary to deserialize the type represented by the current instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter is reserved; it does not currently participate in this operation.  
  
 For more information about the serialization operation performed by this method, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (object left, RuntimeTypeHandle right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(object left, valuetype System.RuntimeTypeHandle right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Object" />
        <Parameter Name="right" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="left">An object to compare to .</param>
        <param name="right">A &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure to compare to .</param>
        <summary>Indicates whether an object and a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure are equal.</summary>
        <returns>`true` if  is a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure and is equal to ; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this operator to compare two variables of type <xref:System.RuntimeTypeHandle> causes an ambiguous overload resolution error when compiled. Use the <xref:System.RuntimeTypeHandle.Equals%2A> method instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (RuntimeTypeHandle left, object right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.RuntimeTypeHandle left, object right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.RuntimeTypeHandle" />
        <Parameter Name="right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure to compare to .</param>
        <param name="right">An object to compare to .</param>
        <summary>Indicates whether a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure is equal to an object.</summary>
        <returns>`true` if  is a &lt;see cref="T:System.RuntimeTypeHandle"&gt; and is equal to ; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this operator to compare two variables of type <xref:System.RuntimeTypeHandle> causes an ambiguous overload resolution error when compiled. Use the <xref:System.RuntimeTypeHandle.Equals%2A> method instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (object left, RuntimeTypeHandle right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(object left, valuetype System.RuntimeTypeHandle right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Object" />
        <Parameter Name="right" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="left">An object to compare to .</param>
        <param name="right">A &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure to compare to .</param>
        <summary>Indicates whether an object and a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure are not equal.</summary>
        <returns>`true` if  is a &lt;see cref="T:System.RuntimeTypeHandle"&gt; and is not equal to ; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this operator to compare two variables of type <xref:System.RuntimeTypeHandle> causes an ambiguous overload resolution error when compiled. Use the <xref:System.RuntimeTypeHandle.Equals%2A> method instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (RuntimeTypeHandle left, object right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.RuntimeTypeHandle left, object right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.RuntimeTypeHandle" />
        <Parameter Name="right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure to compare to .</param>
        <param name="right">An object to compare to .</param>
        <summary>Indicates whether a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure is not equal to an object.</summary>
        <returns>`true` if  is a &lt;see cref="T:System.RuntimeTypeHandle"&gt; structure and is not equal to ; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using this operator to compare two variables of type <xref:System.RuntimeTypeHandle> causes an ambiguous overload resolution error when compiled. Use the <xref:System.RuntimeTypeHandle.Equals%2A> method instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public IntPtr Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a handle to the type represented by this instance.</summary>
        <value>A handle to the type represented by this instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>