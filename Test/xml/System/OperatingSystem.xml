<Type Name="OperatingSystem" FullName="System.OperatingSystem">
  <TypeSignature Language="C#" Value="public sealed class OperatingSystem : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit OperatingSystem extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents information about an operating system, such as the version and platform identifier. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OperatingSystem class contains information about an operating system.  
  
 For information about the current runtime operating system, retrieve the OperatingSystem object returned by the <xref:System.Environment.OSVersion%2A?displayProperty=fullName> property. For a list of Windows operating system versions and their corresponding version numbers returned by the <xref:System.OperatingSystem.Version%2A> and <xref:System.OperatingSystem.VersionString%2A> properties and the <xref:System.OperatingSystem.ToString%2A> method, see [Operating System Version](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) on the Windows Dev Center.  
  
 By design, the OperatingSystem class is not a general purpose means of describing an operating system, and you cannot derive a more inclusive type from the OperatingSystem class. If you need a type to contain other information about an operating system, create your own type, then include a field of type OperatingSystem and any additional fields, properties, or methods that you require.  
  
   
  
## Examples  
 The following code example uses the OperatingSystem object to display information about the runtime operating system.  
  
 [!CODE [System.Environment.OSVersion#1](../CodeSnippet/VS_Snippets_CLR_System/system.environment.osversion#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperatingSystem (PlatformID platform, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.PlatformID platform, class System.Version version) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="platform" Type="System.PlatformID" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="platform">One of the &lt;see cref="T:System.PlatformID"&gt; values that indicates the operating system platform.</param>
        <param name="version">A &lt;see cref="T:System.Version"&gt; object that indicates the version of the operating system.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.OperatingSystem"&gt; class, using the specified platform identifier value and version object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an &lt;see cref="T:System.OperatingSystem"&gt; object that is identical to this instance.</summary>
        <returns>An &lt;see cref="T:System.OperatingSystem"&gt; object that is a copy of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of the Clone method to make a copy of an <xref:System.OperatingSystem> object. The clone is compared with the original object to show that they are not the same object.  
  
 [!CODE [System.OperatingSystem.Clone#1](../CodeSnippet/VS_Snippets_CLR_System/system.OperatingSystem.Clone#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with serialization information.</param>
        <param name="context">The place to store and retrieve serialized data. Reserved for future use.</param>
        <summary>Populates a &lt;xref:System.Runtime.Serialization.SerializationInfo?displayProperty=fullName&gt; object with the data necessary to deserialize this instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter is reserved for future use; it is currently not implemented in the GetObjectData method.  
  
 For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A?displayProperty=fullName> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Platform">
      <MemberSignature Language="C#" Value="public PlatformID Platform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.PlatformID Platform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.PlatformID</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.PlatformID?displayProperty=fullName&gt; enumeration value that identifies the operating system platform.</summary>
        <value>One of the &lt;see cref="T:System.PlatformID"&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example creates several <xref:System.OperatingSystem> objects and displays the Platform property for each.  
  
 [!CODE [System.OperatingSystem.Platform_Version#1](../CodeSnippet/VS_Snippets_CLR_System/system.OperatingSystem.Platform_Version#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePack">
      <MemberSignature Language="C#" Value="public string ServicePack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServicePack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the service pack version represented by this &lt;see cref="T:System.OperatingSystem"&gt; object.</summary>
        <value>The service pack version, if service packs are supported and at least one is installed; otherwise, an empty string ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A service pack is used to distribute software updates for the operating system on which it is installed. However, not every operating system uses service packs.  
  
 The service pack version, if available, is already correctly formatted for display.  
  
   
  
## Examples  
 The following code example demonstrates the ServicePack property.  
  
 [!CODE [OperatingSystem.ServicePack#1](../CodeSnippet/VS_Snippets_CLR/OperatingSystem.ServicePack#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this &lt;see cref="T:System.OperatingSystem"&gt; object to its equivalent string representation.</summary>
        <returns>The string representation of the values returned by the &lt;xref:System.OperatingSystem.Platform%2A&gt;, &lt;xref:System.OperatingSystem.Version%2A&gt;, and &lt;xref:System.OperatingSystem.ServicePack%2A&gt; properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 See [Operating System Version](http://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) on the Windows Dev Center for a list of Windows operating system versions and their corresponding version numbers.  
  
   
  
## Examples  
 The following code example illustrates the use of the ToString method to display <xref:System.OperatingSystem> objects.  
  
 [!CODE [System.OperatingSystem.Ctor_ToString#1](../CodeSnippet/VS_Snippets_CLR_System/system.OperatingSystem.Ctor_ToString#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public Version Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;xref:System.Version?displayProperty=fullName&gt; object that identifies the operating system.</summary>
        <value>A &lt;see cref="T:System.Version"&gt; object that describes the major version, minor version, build, and revision numbers for the operating system.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 See [Operating System Version](http://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) on the Windows Dev Center for a list of Windows operating system versions and their corresponding version numbers.  
  
   
  
## Examples  
 The following code example creates several <xref:System.OperatingSystem> objects and displays the Version property for each.  
  
 [!CODE [System.OperatingSystem.Platform_Version#1](../CodeSnippet/VS_Snippets_CLR_System/system.OperatingSystem.Platform_Version#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VersionString">
      <MemberSignature Language="C#" Value="public string VersionString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VersionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the concatenated string representation of the platform identifier, version, and service pack that are currently installed on the operating system.</summary>
        <value>The string representation of the values returned by the &lt;xref:System.OperatingSystem.Platform%2A&gt;, &lt;xref:System.OperatingSystem.Version%2A&gt;, and &lt;xref:System.OperatingSystem.ServicePack%2A&gt; properties.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the value returned by VersionString is the same as the value returned by the <xref:System.OperatingSystem.ToString%2A> method. However, an implementation of the .NET Framework for a different platform might return a more appropriate string for that platform.  
  
 See [Operating System Version](http://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) on the Windows Dev Center for a list of Windows operating system versions and their corresponding version numbers.  
  
   
  
## Examples  
 The following code example demonstrates the VersionString property.  
  
 [!CODE [OperatingSystem.VersionString#1](../CodeSnippet/VS_Snippets_CLR/OperatingSystem.VersionString#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>