<Type Name="EventLevel" FullName="System.Diagnostics.Tracing.EventLevel">
  <TypeSignature Language="C#" Value="public enum EventLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventLevel extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Identifies the level of an event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The level signifies the severity of an event. Lower severity levels encompass higher severity levels. For example, F:System.Diagnostics.Tracing.EventLevel.Warning?qualifyHint=False&autoUpgrade=True includes the F:System.Diagnostics.Tracing.EventLevel.Error?qualifyHint=False&autoUpgrade=True and F:System.Diagnostics.Tracing.EventLevel.Critical?qualifyHint=False&autoUpgrade=True levels, which are higher in severity.  
  
   
  
## Examples  
 The following example shows how to use the EventLevel class to specify event levels. This code example is part of a larger example provided for the T:System.Diagnostics.Tracing.EventSource?qualifyHint=False&autoUpgrade=True class.  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 [!CODE [ETWTrace#11](../CodeSnippet/VS_Snippets_CLR/etwtrace#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Critical">
      <MemberSignature Language="C#" Value="Critical" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel Critical = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This level corresponds to a critical error, which is a serious error that has caused a major failure.</summary>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="Error" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel Error = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This level adds standard errors that signify a problem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the F:System.Diagnostics.Tracing.EventLevel.Error?qualifyHint=False&autoUpgrade=True field to identify an error message. This code example is part of a larger example provided for the T:System.Diagnostics.Tracing.EventSource?qualifyHint=False&autoUpgrade=True class.  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Informational">
      <MemberSignature Language="C#" Value="Informational" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel Informational = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This level adds informational events or messages that are not errors. These events can help trace the progress or state of an application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the F:System.Diagnostics.Tracing.EventLevel.Informational?qualifyHint=False&autoUpgrade=True field to identify an informational message. This code example is part of a larger example provided for the T:System.Diagnostics.Tracing.EventSource?qualifyHint=False&autoUpgrade=True class.  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogAlways">
      <MemberSignature Language="C#" Value="LogAlways" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel LogAlways = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>No level filtering is done on the event.</summary>
      </Docs>
    </Member>
    <Member MemberName="Verbose">
      <MemberSignature Language="C#" Value="Verbose" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel Verbose = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This level adds lengthy events or messages. It causes all events to be logged.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the F:System.Diagnostics.Tracing.EventLevel.Verbose?qualifyHint=False&autoUpgrade=True field to identify a verbose message. This code example is part of a larger example provided for the T:System.Diagnostics.Tracing.EventSource?qualifyHint=False&autoUpgrade=True class.  
  
 [!CODE [ETWTrace#11](../CodeSnippet/VS_Snippets_CLR/etwtrace#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warning">
      <MemberSignature Language="C#" Value="Warning" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.Tracing.EventLevel Warning = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This level adds warning events (for example, events that are published because a disk is nearing full capacity).</summary>
      </Docs>
    </Member>
  </Members>
</Type>