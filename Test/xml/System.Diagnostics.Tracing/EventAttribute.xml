<Type Name="EventAttribute" FullName="System.Diagnostics.Tracing.EventAttribute">
  <TypeSignature Language="C#" Value="public sealed class EventAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies additional event schema information for an event.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you apply this attribute to an ETW event method defined on an <xref:System.Diagnostics.Tracing.EventSource>-derived class, you must call the <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method on the base class, passing the event ID, followed by the same arguments as the defined method is passed. You should follow the pattern shown in the following examples.  
  
   
  
## Examples  
 The following example shows how to use the EventAttribute class to define a variety of events. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 [!CODE [ETWTrace#7](../CodeSnippet/VS_Snippets_CLR/etwtrace#7)]  
  
 [!CODE [ETWTrace#8](../CodeSnippet/VS_Snippets_CLR/etwtrace#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventAttribute (int eventId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 eventId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventId">The event identifier for the event.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.Tracing.EventAttribute"&gt; class with the specified event identifier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the EventAttribute constructor to specify events. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#1](../CodeSnippet/VS_Snippets_CLR/etwtrace#1)]  
  
 [!CODE [ETWTrace#2](../CodeSnippet/VS_Snippets_CLR/etwtrace#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivityOptions">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventActivityOptions ActivityOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventActivityOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the behavior of the start and stop events of an activity. An activity is the region of time in an app between the start and the stop.</summary>
        <value>Returns &lt;see cref="T:System.Diagnostics.Tracing.EventActivityOptions"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Channel">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventChannel Channel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventChannel Channel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventChannel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an additional event log where the event should be written.</summary>
        <value>An additional event log where the event should be written.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public int EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identifier for the event.</summary>
        <value>The event identifier. This value should be between 0 and 65535.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 EventId should be greater than 0 or less than 65535 or errors can occur in a tracing operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keywords">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventKeywords Keywords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventKeywords Keywords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventKeywords</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the keywords for the event.</summary>
        <value>A bitwise combination of the enumeration values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Keywords property to define event keywords. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#3](../CodeSnippet/VS_Snippets_CLR/etwtrace#3)]  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 [!CODE [ETWTrace#7](../CodeSnippet/VS_Snippets_CLR/etwtrace#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventLevel Level { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventLevel Level" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the level for the event.</summary>
        <value>One of the enumeration values that specifies the level for the event.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Level property to specify event levels. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 [!CODE [ETWTrace#11](../CodeSnippet/VS_Snippets_CLR/etwtrace#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the message for the event.</summary>
        <value>The message for the event.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use standard .NET Framework substitution operators (for example, {1}) in the string). They will be replaced with the string representation of the corresponding part of the event payload.  
  
```  
[Event(1, Message = "Application Falure: {0}", Level = EventLevel.Error, Keywords = Keywords.Diagnostic)]  
        public void Failure(string message) { WriteEvent(1, message); }  
  
```  
  
   
  
## Examples  
 The following example shows how to use the Message property to specify event messages. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#5](../CodeSnippet/VS_Snippets_CLR/etwtrace#5)]  
  
 [!CODE [ETWTrace#6](../CodeSnippet/VS_Snippets_CLR/etwtrace#6)]  
  
 [!CODE [ETWTrace#7](../CodeSnippet/VS_Snippets_CLR/etwtrace#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opcode">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventOpcode Opcode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventOpcode Opcode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventOpcode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the operation code for the event.</summary>
        <value>One of the enumeration values that specifies the operation code.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Opcode property to specify operation codes. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#8](../CodeSnippet/VS_Snippets_CLR/etwtrace#8)]  
  
 [!CODE [ETWTrace#9](../CodeSnippet/VS_Snippets_CLR/etwtrace#9)]  
  
 [!CODE [ETWTrace#10](../CodeSnippet/VS_Snippets_CLR/etwtrace#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventTags Tags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventTags Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the &lt;see cref="T:System.Diagnostics.Tracing.EventTags"&gt; value for this &lt;xref:System.Diagnostics.Tracing.EventAttribute&gt; object. An event tag is a user-defined value that is passed through when the event is logged.</summary>
        <value>Returns the &lt;see cref="T:System.Diagnostics.Tracing.EventTags"&gt; value.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Task">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Tracing.EventTask Task { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.Tracing.EventTask Task" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Tracing.EventTask</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the task for the event.</summary>
        <value>The task for the event.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Task property to define event tasks. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  
  
 [!CODE [ETWTrace#4](../CodeSnippet/VS_Snippets_CLR/etwtrace#4)]  
  
 [!CODE [ETWTrace#8](../CodeSnippet/VS_Snippets_CLR/etwtrace#8)]  
  
 [!CODE [ETWTrace#9](../CodeSnippet/VS_Snippets_CLR/etwtrace#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public byte Version { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the version of the event.</summary>
        <value>The version of the event.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>