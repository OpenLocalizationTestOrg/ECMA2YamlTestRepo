<Type Name="CultureTypes" FullName="System.Globalization.CultureTypes">
  <TypeSignature Language="C#" Value="public enum CultureTypes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CultureTypes extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the types of culture lists that can be retrieved using the &lt;xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName&gt; method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 These culture type values are returned by the <xref:System.Globalization.CultureInfo.CultureTypes%2A?displayProperty=fullName> property, and also serve as a filter that limits the cultures returned by the <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName> method. For more information on cultures, see <xref:System.Globalization.CultureInfo>.  
  
 Generally, your application should enumerate all cultures, using the F:System.Globalization.CultureTypes.AllCultures?qualifyHint=False&autoUpgrade=True value. This allows enumeration of custom cultures, as well as the other culture types.  
  
 Note that the F:System.Globalization.CultureTypes.FrameworkCultures?qualifyHint=False&autoUpgrade=True and F:System.Globalization.CultureTypes.WindowsOnlyCultures?qualifyHint=False&autoUpgrade=True members have been deprecated.  
  
   
  
## Examples  
 The following example demonstrates the CultureTypes enumeration and the P:System.Globalization.CultureInfo.CultureTypes?qualifyHint=False&autoUpgrade=True property.  
  
 [!CODE [System.Globalization.CultureTypes#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#1)]  
  
 The following example displays several properties of the neutral cultures.  
  
 [!CODE [System.Globalization.CultureInfo.GetCultures#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllCultures">
      <MemberSignature Language="C#" Value="AllCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes AllCultures = int32(7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All cultures that ship with the .NET Framework, including neutral and specific cultures, cultures installed in the Windows operating system, and custom cultures created by the user.  
  
 F:System.Globalization.CultureTypes.AllCultures?qualifyHint=True&amp;autoUpgrade=True is a composite field that includes the F:System.Globalization.CultureTypes.NeutralCultures?qualifyHint=True&amp;autoUpgrade=True, F:System.Globalization.CultureTypes.SpecificCultures?qualifyHint=True&amp;autoUpgrade=True, and F:System.Globalization.CultureTypes.InstalledWin32Cultures?qualifyHint=True&amp;autoUpgrade=True values.</summary>
      </Docs>
    </Member>
    <Member MemberName="FrameworkCultures">
      <MemberSignature Language="C#" Value="FrameworkCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes FrameworkCultures = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated.  Please use other values in CultureTypes.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is deprecated; using this value with M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&amp;autoUpgrade=True returns neutral and specific cultures shipped with the .NET Framework 2.0.</summary>
      </Docs>
    </Member>
    <Member MemberName="InstalledWin32Cultures">
      <MemberSignature Language="C#" Value="InstalledWin32Cultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes InstalledWin32Cultures = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All cultures that are installed in the Windows operating system. Note that not all cultures supported by the .NET Framework are installed in the operating system.</summary>
      </Docs>
    </Member>
    <Member MemberName="NeutralCultures">
      <MemberSignature Language="C#" Value="NeutralCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes NeutralCultures = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cultures that are associated with a language but are not specific to a country/region. The names of .NET Framework cultures consist of the lowercase two-letter code derived from ISO 639-1. For example: "en" (English) is a neutral culture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom cultures can have any user-specified name, not just a two-letter code.  
  
 The invariant culture is included in the array of cultures returned by the M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&autoUpgrade=True method that specifies this value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacementCultures">
      <MemberSignature Language="C#" Value="ReplacementCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes ReplacementCultures = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom cultures created by the user that replace cultures shipped with the .NET Framework.</summary>
      </Docs>
    </Member>
    <Member MemberName="SpecificCultures">
      <MemberSignature Language="C#" Value="SpecificCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes SpecificCultures = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is "\&lt;languagecode2&gt;-\&lt;country/regioncode2&gt;", where \&lt;languagecode2&gt; is a lowercase two-letter code derived from ISO 639-1 and \&lt;country/regioncode2&gt; is an uppercase two-letter code derived from ISO 3166. For example, "en-US" for English (United States) is a specific culture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom cultures can have any user-specified name, not just a standard-compliant name.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserCustomCulture">
      <MemberSignature Language="C#" Value="UserCustomCulture" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes UserCustomCulture = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom cultures created by the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Windows versions prior to Windows 10, the F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=True&autoUpgrade=True value is assigned to custom cultures created by the developer. In Windows 10, the F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=True&autoUpgrade=True value is also assigned to system cultures that are not backed by a complete set of cultural data and that do not have unique local identifiers. (All cultures of type F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=False&autoUpgrade=True share a P:System.Globalization.CultureInfo.LCID?qualifyHint=True&autoUpgrade=True value of `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, or 4096). As a result, code such as  
  
 [!CODE [System.Globalization.CultureTypes#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#2)]  
  
 or  
  
 [!CODE [System.Globalization.CultureTypes#3](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#3)]  
  
 will return different sets of cultures on different Windows versions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsOnlyCultures">
      <MemberSignature Language="C#" Value="WindowsOnlyCultures" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Globalization.CultureTypes WindowsOnlyCultures = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated.  Please use other values in CultureTypes.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is deprecated. If it is used as an argument to the M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&amp;autoUpgrade=True method, the method returns an empty array.</summary>
      </Docs>
    </Member>
  </Members>
</Type>