<Type Name="SymAddressKind" FullName="System.Diagnostics.SymbolStore.SymAddressKind">
  <TypeSignature Language="C#" Value="public enum SymAddressKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed SymAddressKind extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies address types for local variables, parameters, and fields in the methods &lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable%2A&gt;, &lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter%2A&gt;, and &lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField%2A&gt; of the &lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt; interface.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The , , and  parameters refer to the address parameters in the <xref:System.Diagnostics.SymbolStore.ISymbolWriter> interface methods.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BitField">
      <MemberSignature Language="C#" Value="BitField" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind BitField = int32(9)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bit field. The  parameter is the position where the field starts, and the  parameter is the field length.</summary>
      </Docs>
    </Member>
    <Member MemberName="ILOffset">
      <MemberSignature Language="C#" Value="ILOffset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind ILOffset = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Microsoft intermediate language (MSIL) offset. The  parameter is the MSIL local variable or parameter index.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeOffset">
      <MemberSignature Language="C#" Value="NativeOffset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeOffset = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A native offset. The  parameter is the offset from the start of the parent.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeRegister">
      <MemberSignature Language="C#" Value="NativeRegister" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegister = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A native register address. The  parameter is the register in which the variable is stored.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeRegisterRegister">
      <MemberSignature Language="C#" Value="NativeRegisterRegister" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterRegister = int32(6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A register-relative address. The  parameter is the low-order register, and the  parameter is the high-order register.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeRegisterRelative">
      <MemberSignature Language="C#" Value="NativeRegisterRelative" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterRelative = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A register-relative address. The  parameter is the register, and the  parameter is the offset.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeRegisterStack">
      <MemberSignature Language="C#" Value="NativeRegisterStack" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterStack = int32(7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A register-relative address. The  parameter is the low-order register, the  parameter is the stack register, and the  parameter is the offset from the stack pointer to the high-order part of the value.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeRVA">
      <MemberSignature Language="C#" Value="NativeRVA" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRVA = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A native Relevant Virtual Address (RVA). The  parameter is the RVA in the module.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeSectionOffset">
      <MemberSignature Language="C#" Value="NativeSectionOffset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeSectionOffset = int32(10)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A native section offset. The  parameter is the section, and the  parameter is the offset.</summary>
      </Docs>
    </Member>
    <Member MemberName="NativeStackRegister">
      <MemberSignature Language="C#" Value="NativeStackRegister" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeStackRegister = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SymbolStore.SymAddressKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A register-relative address. The  parameter is the stack register, the  parameter is the offset from the stack pointer to the low-order part of the value, and the  parameter is the high-order register.</summary>
      </Docs>
    </Member>
  </Members>
</Type>