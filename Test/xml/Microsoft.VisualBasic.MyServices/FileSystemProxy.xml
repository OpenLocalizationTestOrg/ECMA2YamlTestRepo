<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides properties and methods for working with drives, files, and directories.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem` object.  
  
|To|See|  
|--------|---------|  
|Read from a text file|[How to: Read from Text Files](../Topic/How%20to:%20Read%20From%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md)|  
|Read from a binary file|[How to: Read From Binary Files](../Topic/How%20to:%20Read%20From%20Binary%20Files%20in%20Visual%20Basic.md)|  
|Read from a text file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](../Topic/How%20to:%20Read%20Text%20from%20Files%20with%20a%20StreamReader%20\(Visual%20Basic\).md)|  
|Write to a text file|[How to: Write Text to Files](../Topic/How%20to:%20Write%20Text%20to%20Files%20in%20Visual%20Basic.md)|  
|Append to a text file|[How to: Append to Text Files](../Topic/How%20to:%20Append%20to%20Text%20Files%20in%20Visual%20Basic.md)|  
|Write to a binary file|[How to: Write to Binary Files](../Topic/How%20to:%20Write%20to%20Binary%20Files%20in%20Visual%20Basic.md)|  
|Write to text files in the **MyDocuments** directory|[How to: Write Text to Files in the My Documents Directory](../Topic/How%20to:%20Write%20Text%20to%20Files%20in%20the%20My%20Documents%20Directory%20in%20Visual%20Basic.md)|  
|Write to a text file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](../Topic/How%20to:%20Write%20Text%20to%20Files%20with%20a%20StreamWriter%20in%20Visual%20Basic.md)|  
|Copy files with a specific pattern|[How to: Copy Files with a Specific Pattern to a Directory](../Topic/How%20to:%20Copy%20Files%20with%20a%20Specific%20Pattern%20to%20a%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to the same directory|[How to: Create a Copy of a File in the Same Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20the%20Same%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to a different directory|[How to: Create a Copy of a File in a Different Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20a%20Different%20Directory%20in%20Visual%20Basic.md)|  
|Create a file|[How to: Create a File](../Topic/How%20to:%20Create%20a%20File%20in%20Visual%20Basic.md)|  
|Delete a file|[How to: Delete a File](../Topic/How%20to:%20Delete%20a%20File%20in%20Visual%20Basic.md)|  
|Find files with a specific pattern|[How to: Find Files with a Specific Pattern](../Topic/How%20to:%20Find%20Files%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
|Move a file|[How to: Move a File](../Topic/How%20to:%20Move%20a%20File%20in%20Visual%20Basic.md)|  
|Rename a file|[How to: Rename a File](../Topic/How%20to:%20Rename%20a%20File%20in%20Visual%20Basic.md)|  
|Copy a directory to another directory|[How to: Copy a Directory to Another Directory](../Topic/How%20to:%20Copy%20a%20Directory%20to%20Another%20Directory%20in%20Visual%20Basic.md)|  
|Create a directory|[How to: Create a Directory](../Topic/How%20to:%20Create%20a%20Directory%20in%20Visual%20Basic.md)|  
|Find subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](../Topic/How%20to:%20Find%20Subdirectories%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
|Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](../Topic/How%20to:%20Get%20the%20Collection%20of%20Files%20in%20a%20Directory%20in%20Visual%20Basic.md)|  
|Read from the **MyDocuments** directory|[How to: Retrieve the Contents of the My Documents Directory](../Topic/How%20to:%20Retrieve%20the%20Contents%20of%20the%20My%20Documents%20Directory%20in%20Visual%20Basic.md)|  
|Parse a file path|[How to: Parse File Paths](../Topic/How%20to:%20Parse%20File%20Paths%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example checks to determine whether the folder `C:\backup\logs` exists and checks its properties.  
  
 [!CODE [VbVbcnMyFileSystem#23](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#23)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory">`String`. First path to be combined.</param>
        <param name="relativePath">`String`. Second path to be combined.</param>
        <summary>Combines two paths and returns a properly formatted path.</summary>
        <returns>The combination of the specified paths.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method trims excess slash-mark characters to create a properly formatted path.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CombinePath` method.  
  
|To|See|  
|--------|---------|  
|Combine a directory path and file name|[How to: Parse File Paths](../Topic/How%20to:%20Parse%20File%20Paths%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example combines a directory path and file name to create a properly formatted path.  
  
 [!CODE [VbRefFile#3](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#3)]  
  
 This example combines two paths to create a properly formatted path.  
  
 [!CODE [VbRefFile#4](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#4)]  
  
 This example returns `C:\Dir1\Dir2\Dir4\Dir5\File.txt`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The directory to be copied.</param>
        <param name="destinationDirectoryName">The location to which the directory should be copied.</param>
        <summary>Copies a directory to another directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.  
  
 When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `Forâ€¦Each` to enumerate through the entries.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.  
  
|To|See|  
|--------|---------|  
|Copy a directory|[How to: Copy a Directory to Another Directory](../Topic/How%20to:%20Copy%20a%20Directory%20to%20Another%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  
  
 [!CODE [VbVbcnMyFileSystem#49](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#49)]  
  
 Replace `C:\TestDirectory1` and `C:\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The directory to be copied.</param>
        <param name="destinationDirectoryName">The location to which the directory should be copied.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <summary>Copies a directory to another directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.  
  
 When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `Forâ€¦Each` to enumerate through the entries.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.  
  
|To|See|  
|--------|---------|  
|Copy a directory|[How to: Copy a Directory to Another Directory](../Topic/How%20to:%20Copy%20a%20Directory%20to%20Another%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  
  
 [!CODE [VbVbcnMyFileSystem#49](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#49)]  
  
 Replace `C:\TestDirectory1` and `C:\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The directory to be copied.</param>
        <param name="destinationDirectoryName">The location to which the directory should be copied.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <summary>Copies a directory to another directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.  
  
 When copying files within a directory, exceptions may be thrown that are caused by a specific file, such as a file existing during a merge while  is set to `False`. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `Forâ€¦Each` to enumerate through the entries.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.  
  
|To|See|  
|--------|---------|  
|Copy a directory|[How to: Copy a Directory to Another Directory](../Topic/How%20to:%20Copy%20a%20Directory%20to%20Another%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  
  
 [!CODE [VbVbcnMyFileSystem#49](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#49)]  
  
 Replace `C:\TestDirectory1` and `C:\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The directory to be copied.</param>
        <param name="destinationDirectoryName">The location to which the directory should be copied.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="onUserCancel">Specifies what should be done if the user clicks **Cancel** during the operation. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Copies a directory to another directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.  
  
 When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `Forâ€¦Each` to enumerate through the entries.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.  
  
|To|See|  
|--------|---------|  
|Copy a directory|[How to: Copy a Directory to Another Directory](../Topic/How%20to:%20Copy%20a%20Directory%20to%20Another%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  
  
 [!CODE [VbVbcnMyFileSystem#49](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#49)]  
  
 Replace `C:\TestDirectory1` and `C:\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The file to be copied.</param>
        <param name="destinationFileName">The location to which the file should be copied.</param>
        <summary>Copies a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.  
  
|To|See|  
|--------|---------|  
|Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20the%20Same%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20a%20Different%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  
  
 [!CODE [VbRefFile#15](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#15)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  
  
 [!CODE [VbRefFile#16](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#16)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The file to be copied.</param>
        <param name="destinationFileName">The location to which the file should be copied.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <summary>Copies a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.  
  
|To|See|  
|--------|---------|  
|Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20the%20Same%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20a%20Different%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  
  
 [!CODE [VbRefFile#15](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#15)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  
  
 [!CODE [VbRefFile#16](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#16)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The file to be copied.</param>
        <param name="destinationFileName">The location to which the file should be copied.</param>
        <param name="overwrite">`True` if existing files should be overwritten; otherwise `False`. Default is `False`.</param>
        <summary>Copies a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.  
  
|To|See|  
|--------|---------|  
|Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20the%20Same%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20a%20Different%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  
  
 [!CODE [VbRefFile#15](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#15)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  
  
 [!CODE [VbRefFile#16](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#16)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The file to be copied.</param>
        <param name="destinationFileName">The location to which the file should be copied.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="onUserCancel">Specifies what should be done if the user clicks **Cancel** during the operation. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Copies a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.  
  
|To|See|  
|--------|---------|  
|Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20the%20Same%20Directory%20in%20Visual%20Basic.md)|  
|Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](../Topic/How%20to:%20Create%20a%20Copy%20of%20a%20File%20in%20a%20Different%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  
  
 [!CODE [VbRefFile#15](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#15)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  
  
 [!CODE [VbRefFile#16](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#16)]  
  
 Replace the file paths with the paths you want to use in your code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Name and location of the directory.</param>
        <summary>Creates a directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the directory already exists, no exception is thrown.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.CreateDirectory` method.  
  
|To|See|  
|--------|---------|  
|Create a directory|[How to: Create a Directory](../Topic/How%20to:%20Create%20a%20Directory%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example creates the directory, `NewDirectory`, in `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbcnMyFileSystem#17](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current directory.</summary>
        <value>The current directory for file I/O operations.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` is a system-wide environment variable.  
  
   
  
## Examples  
 This example returns the current directory and displays it in a message box.  
  
 [!CODE [VbVbcnMyFileSystem#18](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#18)]  
  
 This example sets the current directory to `C:\TestDirectory`.  
  
 [!CODE [VbVbcnMyFileSystem#19](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">Directory to be deleted.</param>
        <param name="onDirectoryNotEmpty">Specifies what should be done when a directory that is to be deleted contains files or directories. Default is `DeleteDirectoryOption.DeleteAllContents`.</param>
        <summary>Deletes a directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The example deletes the directory `OldDirectory` only if it is empty.  
  
 [!CODE [VbVbcnMyFileSystem#56](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#56)]  
  
 This example deletes the directory `OldDirectory` and all of its contents.  
  
 [!CODE [VbVbcnMyFileSystem#57](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#57)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#58](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#58)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  
  
 [!CODE [VbVbcnMyFileSystem#59](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">Directory to be deleted.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="recycle">Specifies whether or not the deleted file should be sent to the **Recycle Bin**. Default is `RecycleOption.DeletePermanently`.</param>
        <summary>Deletes a directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  and  parameters are not supported in applications that are not user interactive, such as Windows Services.  
  
   
  
## Examples  
 The example deletes the directory `OldDirectory` only if it is empty.  
  
 [!CODE [VbVbcnMyFileSystem#56](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#56)]  
  
 This example deletes the directory `OldDirectory` and all of its contents.  
  
 [!CODE [VbVbcnMyFileSystem#57](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#57)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#58](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#58)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  
  
 [!CODE [VbVbcnMyFileSystem#59](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">Directory to be deleted.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="recycle">Specifies whether or not the deleted file should be sent to the **Recycle Bin**. Default is `RecycleOption.DeletePermanently`.</param>
        <param name="onUserCancel">Specifies whether to throw an exception if the user clicks **Cancel**.</param>
        <summary>Deletes a directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The , , and  parameters are not supported in applications that are not user interactive, such as Windows Services.  
  
   
  
## Examples  
 The example deletes the directory `OldDirectory` only if it is empty.  
  
 [!CODE [VbVbcnMyFileSystem#56](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#56)]  
  
 This example deletes the directory `OldDirectory` and all of its contents.  
  
 [!CODE [VbVbcnMyFileSystem#57](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#57)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#58](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#58)]  
  
 This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  
  
 [!CODE [VbVbcnMyFileSystem#59](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file to be deleted.</param>
        <summary>Deletes a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.  
  
|To|See|  
|--------|---------|  
|To delete a file|[How to: Delete a File](../Topic/How%20to:%20Delete%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example deletes the file `Test.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#3)]  
  
 This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  
  
 [!CODE [VbVbcnMyFileSystem#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#4)]  
  
 This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file to be deleted.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="recycle">Whether or not the deleted file should be sent to the **Recycle Bin**. Default is `RecycleOption.DeletePermanently`.</param>
        <summary>Deletes a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  and  parameters are not supported in applications that are not user interactive, such as Windows Services.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.  
  
|To|See|  
|--------|---------|  
|To delete a file|[How to: Delete a File](../Topic/How%20to:%20Delete%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example deletes the file `Test.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#3)]  
  
 This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  
  
 [!CODE [VbVbcnMyFileSystem#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#4)]  
  
 This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file to be deleted.</param>
        <param name="showUI">Whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="recycle">Whether or not the deleted file should be sent to the **Recycle Bin**. Default is `RecycleOption.DeletePermanently`.</param>
        <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is `UICancelOption.ThrowException`.</param>
        <summary>Deletes a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The , , and  parameters are not supported in applications that are not user interactive, such as Windows Services.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.  
  
|To|See|  
|--------|---------|  
|To delete a file|[How to: Delete a File](../Topic/How%20to:%20Delete%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example deletes the file `Test.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#3)]  
  
 This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  
  
 [!CODE [VbVbcnMyFileSystem#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#4)]  
  
 This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  
  
 [!CODE [VbVbcnMyFileSystem#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Path of the directory.</param>
        <summary>Returns `True` if the specified directory exists.</summary>
        <returns>`True` if the directory exists; otherwise `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example determines whether the directory `C:\backup\logs` exists and checks its properties.  
  
 [!CODE [VbRefFile#13](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a read-only collection of all available drive names.</summary>
        <value>A read-only collection of all available drives as &lt;see cref="T:System.IO.DriveInfo"&gt; objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns all logical drives.  
  
   
  
## Examples  
 This example displays the available drive names in a message box.  
  
 [!CODE [VbRefFile#19](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file.</param>
        <summary>Returns `True` if the specified file exists.</summary>
        <returns>Returns `True` if the file exists; otherwise this method returns `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the application does not have sufficient permissions to read the specified file, the `FileExists` method returns `False`, regardless of the existence of the path; the method does not throw an exception.  
  
   
  
## Examples  
 This example checks to see whether or not the file `Check.txt` exists and supplies the information in a message box.  
  
 [!CODE [VbRefFile#20](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">The directory to be searched.</param>
        <param name="containsText">The search text.</param>
        <param name="ignoreCase">`True` if the search should be case-sensitive; otherwise `False`. Default is `True`.</param>
        <param name="searchType">Whether to include subfolders. Default is `SearchOption.SearchTopLevelOnly`.</param>
        <summary>Returns a read-only collection of strings representing the names of files containing the specified text.</summary>
        <returns>Read-only collection of the names of files containing the specified text..</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty collection is returned if no files matching the specified pattern are found.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.FindInFiles` method.  
  
|To|See|  
|--------|---------|  
|Search a directory for files containing a specific string|[Walkthrough: Manipulating Files and Directories in Visual Basic](../Topic/Walkthrough:%20Manipulating%20Files%20and%20Directories%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example searches the directory `C:\TestDir` for any files containing the string `"sample string"` and displays the results in `ListBox1`.  
  
 [!CODE [VbRefFile#12](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#12)]  
  
 In order to work, the project must contain a `ListBox` named `ListBox1`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">The directory to be searched.</param>
        <param name="containsText">The search text.</param>
        <param name="ignoreCase">`True` if the search should be case-sensitive; otherwise `False`. Default is `True`.</param>
        <param name="searchType">Whether to include subfolders. Default is `SearchOption.SearchTopLevelOnly`.</param>
        <param name="fileWildcards">Pattern to be matched.</param>
        <summary>Returns a read-only collection of strings representing the names of files containing the specified text.</summary>
        <returns>Read-only collection of the names of files containing the specified text..</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty collection is returned if no files matching the specified pattern are found.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.FindInFiles` method.  
  
|To|See|  
|--------|---------|  
|Search a directory for files containing a specific string|[Walkthrough: Manipulating Files and Directories in Visual Basic](../Topic/Walkthrough:%20Manipulating%20Files%20and%20Directories%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example searches the directory `C:\TestDir` for any files containing the string `"sample string"` and displays the results in `ListBox1`.  
  
 [!CODE [VbRefFile#12](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#12)]  
  
 In order to work, the project must contain a `ListBox` named `ListBox1`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Name and path of directory.</param>
        <summary>Returns a collection of strings representing the path names of subdirectories within a directory.</summary>
        <returns>Read-only collection of the path names of subdirectories within the specified directory..</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.GetDirectories` method.  
  
|To|See|  
|--------|---------|  
|List subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](../Topic/How%20to:%20Find%20Subdirectories%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#10](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#10)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Name and path of directory.</param>
        <param name="searchType">Whether to include subfolders. Default is `SearchOption.SearchTopLevelOnly`.</param>
        <param name="wildcards">Pattern to match names.</param>
        <summary>Returns a collection of strings representing the path names of subdirectories within a directory.</summary>
        <returns>Read-only collection of the path names of subdirectories within the specified directory.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the  parameter to specify a specific pattern. If you would like to include the contents of subdirectories in the search, set the  parameter to `SearchAllSubDirectories`.  
  
 An empty collection is returned if no directories matching the specified pattern are found.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.GetDirectories` method.  
  
|To|See|  
|--------|---------|  
|List subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](../Topic/How%20to:%20Find%20Subdirectories%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#10](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#10)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">`String`. Path of directory.</param>
        <summary>Returns a &lt;see cref="T:System.IO.DirectoryInfo"&gt; object for the specified path.</summary>
        <returns>&lt;see cref="T:System.IO.DirectoryInfo"&gt; object for the specified path.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the directory does not exist, an exception is not thrown until the first time a property on the <xref:System.IO.DirectoryInfo> object is accessed.  
  
   
  
## Examples  
 This example gets a <xref:System.IO.DirectoryInfo> object for the directory `C:\Documents and Settings` and displays the directory's creation time, last access time, and last write time.  
  
 [!CODE [VbRefFile#7](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">Drive to be examined.</param>
        <summary>Returns a &lt;see cref="T:System.IO.DriveInfo"&gt; object for the specified drive.</summary>
        <returns>&lt;see cref="T:System.IO.DriveInfo"&gt; object for the specified drive.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.IO.DriveInfo> class models a drive and provides methods and properties to query for drive information. Use <xref:System.IO.DriveInfo> to determine what drives are available, and what type of drives they are. You can also query the property to determine the capacity and available free space on the drive.  
  
   
  
## Examples  
 This example obtains a <xref:System.IO.DriveInfo> object for the C drive and uses it to display information about the drive.  
  
 [!CODE [VbRefFile#11](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#11)]  
  
 For information on the different drive types, see <xref:System.IO.DriveType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file.</param>
        <summary>Returns a &lt;see cref="T:System.IO.FileInfo"&gt; object for the specified file.</summary>
        <returns>&lt;see cref="T:System.IO.FileInfo"&gt; object for the specified file</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An exception is not thrown if the file does not exist; rather, it will be thrown the first time the object's properties are accessed.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.GetFileInfo` method.  
  
|To|See|  
|--------|---------|  
|Determine a file's name and path|[How to: Parse File Paths](../Topic/How%20to:%20Parse%20File%20Paths%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example retrieves a <xref:System.IO.FileInfo?displayProperty=fullName> object for the file `MyLogFile.log` and uses it to report the file's full name, last access time, and length.  
  
 [!CODE [VbRefFile#1](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Directory to be searched.</param>
        <summary>Returns a read-only collection of strings representing the names of files within a directory.</summary>
        <returns>Read-only collection of file names from the specified directory.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty collection is returned if no files matching the specified pattern are found.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFiles` method.  
  
|To|See|  
|--------|---------|  
|Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](../Topic/How%20to:%20Get%20the%20Collection%20of%20Files%20in%20a%20Directory%20in%20Visual%20Basic.md)|  
|Find files with a specific pattern in a directory|[How to: Find Files with a Specific Pattern](../Topic/How%20to:%20Find%20Files%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example returns all files in the directory and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#5](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#5)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#6](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#6)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Directory to be searched.</param>
        <param name="searchType">Whether to include subfolders. Default is `SearchOption.SearchTopLevelOnly`.</param>
        <param name="wildcards">Pattern to be matched.</param>
        <summary>Returns a read-only collection of strings representing the names of files within a directory.</summary>
        <returns>Read-only collection of file names from the specified directory.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty collection is returned if no files matching the specified pattern are found.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFiles` method.  
  
|To|See|  
|--------|---------|  
|Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](../Topic/How%20to:%20Get%20the%20Collection%20of%20Files%20in%20a%20Directory%20in%20Visual%20Basic.md)|  
|Find files with a specific pattern in a directory|[How to: Find Files with a Specific Pattern](../Topic/How%20to:%20Find%20Files%20with%20a%20Specific%20Pattern%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example returns all files in the directory and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#5](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#5)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  
  
 [!CODE [VbRefFile#6](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#6)]  
  
 This example requires that you have a `ListBox` named `ListBox1` on your form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Required. Path to be parsed. `String`.</param>
        <summary>Parses the file name out of the path provided.</summary>
        <returns>The file name from the specified path.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a string operation; the `FileSystem` is not examined.  
  
 The `GetName` method ignores a slash mark occurring at the end of the path.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFileName` method.  
  
|To|See|  
|--------|---------|  
|Parse a file path|[How to: Parse File Paths](../Topic/How%20to:%20Parse%20File%20Paths%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 The following example parses a file path and returns the name of the file.  
  
 [!CODE [VbVbcnMyFileSystem#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#21)]  
  
 Replace the path `C:\Testdirectory\Testfile` with the path you wish to parse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Path to be examined.</param>
        <summary>Returns the parent path of the provided path.</summary>
        <returns>The parent path of the provided path.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a string operation; the file system is not examined.  
  
   
  
## Examples  
 This example gets the parent path for `C:\Backups\Tmp\Test`.  
  
 [!CODE [VbRefFile#17](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a uniquely named zero-byte temporary file on disk and returns the full path of that file.</summary>
        <returns>`String` containing the full path of the temporary file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to create a temporary file.  
  
   
  
## Examples  
 This example creates a temp file and returns its path.  
  
 [!CODE [VbVbcnMyFileSystem#12](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Path of the directory to be moved.</param>
        <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
        <summary>Moves a directory from one location to another.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created.  
  
   
  
## Examples  
 This example moves `Directory1` inside `Directory2`.  
  
 [!CODE [VbVbcnMyFileSystem#81](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#81)]  
  
 This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  
  
 [!CODE [VbVbcnMyFileSystem#82](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Path of the directory to be moved.</param>
        <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <summary>Moves a directory from one location to another.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created.  
  
   
  
## Examples  
 This example moves `Directory1` inside `Directory2`.  
  
 [!CODE [VbVbcnMyFileSystem#81](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#81)]  
  
 This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  
  
 [!CODE [VbVbcnMyFileSystem#82](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Path of the directory to be moved.</param>
        <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
        <param name="overwrite">`True` if existing directories should be overwritten; otherwise `False`. Default is `False`.</param>
        <summary>Moves a directory from one location to another.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created.  
  
   
  
## Examples  
 This example moves `Directory1` inside `Directory2`.  
  
 [!CODE [VbVbcnMyFileSystem#81](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#81)]  
  
 This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  
  
 [!CODE [VbVbcnMyFileSystem#82](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Path of the directory to be moved.</param>
        <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is `UICancelOption.ThrowException`.</param>
        <summary>Moves a directory from one location to another.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created.  
  
   
  
## Examples  
 This example moves `Directory1` inside `Directory2`.  
  
 [!CODE [VbVbcnMyFileSystem#81](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#81)]  
  
 This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  
  
 [!CODE [VbVbcnMyFileSystem#82](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path of the file to be moved.</param>
        <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
        <summary>Moves a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the target structure does not exist, it is created.  
  
 The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.  
  
|To|See|  
|--------|---------|  
|Move a file|[How to: Move a File](../Topic/How%20to:%20Move%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  
  
 [!CODE [VbVbcnMyFileSystem#86](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#86)]  
  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#87](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path of the file to be moved.</param>
        <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <summary>Moves a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the target structure does not exist, it is created.  
  
 The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.  
  
|To|See|  
|--------|---------|  
|Move a file|[How to: Move a File](../Topic/How%20to:%20Move%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  
  
 [!CODE [VbVbcnMyFileSystem#86](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#86)]  
  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#87](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path of the file to be moved.</param>
        <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <summary>Moves a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the target structure does not exist, it is created.  
  
 The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.  
  
 The following table lists an examples of a task involving the `My.Computer.FileSystem.MoveFile` method.  
  
|To|See|  
|--------|---------|  
|Move a file|[How to: Move a File](../Topic/How%20to:%20Move%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  
  
 [!CODE [VbVbcnMyFileSystem#86](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#86)]  
  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#87](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path of the file to be moved.</param>
        <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
        <param name="showUI">Specifies whether to visually track the operation's progress. Default is `UIOption.OnlyErrorDialogs`.</param>
        <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is `UICancelOption.ThrowException`.</param>
        <summary>Moves a file to a new location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the target structure does not exist, it is created.  
  
 The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.  
  
|To|See|  
|--------|---------|  
|Move a file|[How to: Move a File](../Topic/How%20to:%20Move%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  
  
 [!CODE [VbVbcnMyFileSystem#86](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#86)]  
  
 This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#87](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">The file to be opened with the `TextFieldParser`.</param>
        <summary>The `OpenTextFieldParser` method allows you to create a &lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; object, which provides a way to easily and efficiently parse structured text files, such as logs. The `TextFieldParser` object can be used to read both delimited and fixed-width files.</summary>
        <returns>&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; to read the specified file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.  
  
|To|See|  
|--------|---------|  
|Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example opens the `TextFieldParser``reader` and uses it to read from `C:\TestFolder1\Test1.txt`.  
  
 [!CODE [VbRefFile#18](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">The file to be opened with the `TextFieldParser`.</param>
        <param name="fieldWidths">Widths of the fields.</param>
        <summary>The `OpenTextFieldParser` method allows you to create a &lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; object, which provides a way to easily and efficiently parse structured text files, such as logs. The `TextFieldParser` object can be used to read both delimited and fixed-width files.</summary>
        <returns>&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; to read the specified file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.  
  
|To|See|  
|--------|---------|  
|Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example opens the `TextFieldParser``reader` and uses it to read from `C:\TestFolder1\Test1.txt`.  
  
 [!CODE [VbRefFile#18](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">The file to be opened with the `TextFieldParser`.</param>
        <param name="delimiters">Delimiters for the fields.</param>
        <summary>The `OpenTextFieldParser` method allows you to create a &lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; object, which provides a way to easily and efficiently parse structured text files, such as logs. The `TextFieldParser` object can be used to read both delimited and fixed-width files.</summary>
        <returns>&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser"&gt; to read the specified file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.  
  
|To|See|  
|--------|---------|  
|Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](../Topic/How%20to:%20Read%20From%20Comma-Delimited%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](../Topic/How%20to:%20Read%20From%20Fixed-width%20Text%20Files%20in%20Visual%20Basic.md)|  
|Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](../Topic/How%20to:%20Read%20From%20Text%20Files%20with%20Multiple%20Formats%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example opens the `TextFieldParser``reader` and uses it to read from `C:\TestFolder1\Test1.txt`.  
  
 [!CODE [VbRefFile#18](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">File to be read.</param>
        <summary>Opens a &lt;see cref="T:System.IO.StreamReader"&gt; object to read from a file.</summary>
        <returns>&lt;see cref="T:System.IO.StreamReader"&gt; object to read from the file</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Only text files can be read with a <xref:System.IO.StreamReader>.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFileReader` method.  
  
|To|See|  
|--------|---------|  
|Open a file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](../Topic/How%20to:%20Read%20Text%20from%20Files%20with%20a%20StreamReader%20\(Visual%20Basic\).md)|  
  
   
  
## Examples  
 This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  
  
 [!CODE [VbRefFile#2](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">File to be read.</param>
        <param name="encoding">The encoding to use for the file contents. Default is ASCII.</param>
        <summary>Opens a &lt;see cref="T:System.IO.StreamReader"&gt; object to read from a file.</summary>
        <returns>&lt;see cref="T:System.IO.StreamReader"&gt; object to read from the file</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Only text files can be read with a <xref:System.IO.StreamReader>.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFileReader` method.  
  
|To|See|  
|--------|---------|  
|Open a file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](../Topic/How%20to:%20Read%20Text%20from%20Files%20with%20a%20StreamReader%20\(Visual%20Basic\).md)|  
  
   
  
## Examples  
 This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  
  
 [!CODE [VbRefFile#2](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">File to be written to.</param>
        <param name="append">`True` to append to the contents of the file; `False` to overwrite the contents of the file. Default is `False`.</param>
        <summary>Opens a &lt;see cref="T:System.IO.StreamWriter"&gt; object to write to the specified file.</summary>
        <returns>&lt;see cref="T:System.IO.StreamWriter"&gt; object to write to the specified file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `OpenTextFileWriter` method opens and initializes a stream for a file and then returns the <xref:System.IO.StreamWriter> object for that stream. You can write to the steam as many times as necessary and then close it when you are finished.  
  
> [!NOTE]
>  You must call the <xref:System.IO.StreamWriter.Close%2A> method on the <xref:System.IO.StreamWriter> object to make sure that all data is correctly written to the underlying stream.  
  
 If you are writing only a few strings to a file, it might be simpler to use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> method.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.OpenTextFileWriter` method.  
  
|To|See|  
|--------|---------|  
|Write text to a file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](../Topic/How%20to:%20Write%20Text%20to%20Files%20with%20a%20StreamWriter%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  
  
 [!CODE [VbRefFile#14](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">File to be written to.</param>
        <param name="append">`True` to append to the contents in the file; `False` to overwrite the contents of the file. Default is `False`.</param>
        <param name="encoding">Encoding to be used in writing to the file. Default is ASCII.</param>
        <summary>Opens a &lt;see cref="T:System.IO.StreamWriter"&gt; to write to the specified file.</summary>
        <returns>&lt;see cref="T:System.IO.StreamWriter"&gt; object to write to the specified file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `OpenTextFileWriter` method opens and initializes a stream for a file and then returns the <xref:System.IO.StreamWriter> object for that stream. You can write to the steam as many times as necessary and then close it when you are finished.  
  
> [!NOTE]
>  You must call the <xref:System.IO.StreamWriter.Close%2A> method on the <xref:System.IO.StreamWriter> object to make sure that all data is correctly written to the underlying stream.  
  
 If you are writing only a few strings to a file, it might be simpler to use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> method.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.OpenTextFileWriter` method.  
  
|To|See|  
|--------|---------|  
|Write text to a file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](../Topic/How%20to:%20Write%20Text%20to%20Files%20with%20a%20StreamWriter%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  
  
 [!CODE [VbRefFile#14](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">File to be read.</param>
        <summary>Returns the contents of a file as a byte array.</summary>
        <returns>`Byte` array containing the contents of the file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `ReadAllBytes` method of the `My.Computer.FileSystem` object allows you to read from a binary file. The contents of the file are returned as a byte array.  
  
 Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllBytes` method.  
  
|To|See|  
|--------|---------|  
|Read from a binary file|[How to: Read From Binary Files](../Topic/How%20to:%20Read%20From%20Binary%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example reads from the file `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!CODE [VbVbcnMyFileSystem#33](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file to read.</param>
        <summary>Returns the contents of a text file as a `String`.</summary>
        <returns>`String` containing the contents of the file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `ReadAllText` method of the `My.Computer.FileSystem` object allows you to read from a text file. The contents of the file are returned as a string.  
  
 The file encoding can be specified if the contents of the file are in an encoding such as ASCII or UTF-8. If you are reading from a file with extended characters, you need to specify the file encoding using another overload of the ReadAllText method.  
  
 Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllText` method.  
  
|To|See|  
|--------|---------|  
|Read from a text file|[How to: Read from Text Files](../Topic/How%20to:%20Read%20From%20Text%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example reads the contents of `Test.txt` into a string and then displays it in a message box.  
  
 [!CODE [VbRefFile#8](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#8)]  
  
 This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  
  
 [!CODE [VbRefFile#9](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Name and path of the file to read.</param>
        <param name="encoding">Character encoding to use in reading the file. Default is UTF-8.</param>
        <summary>Returns the contents of a text file as a `String`.</summary>
        <returns>`String` containing the contents of the file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `ReadAllText` method of the `My.Computer.FileSystem` object allows you to read from a text file. The contents of the file are returned as a string.  
  
 The file encoding can be specified if the contents of the file are in an encoding such as ASCII or UTF-8. If you are reading from a file with extended characters, you need to specify the file encoding.  
  
 Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllText` method.  
  
|To|See|  
|--------|---------|  
|Read from a text file|[How to: Read from Text Files](../Topic/How%20to:%20Read%20From%20Text%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example reads the contents of `Test.txt` into a string and then displays it in a message box.  
  
 [!CODE [VbRefFile#8](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#8)]  
  
 This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  
  
 [!CODE [VbRefFile#9](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Path and name of directory to be renamed.</param>
        <param name="newName">New name for directory.</param>
        <summary>Renames a directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method cannot be used to move a directory; use the `MoveDirectory` method to move and rename the directory.  
  
   
  
## Examples  
 This example renames the `Test` directory to `SecondTest`.  
  
 [!CODE [VbVbcnMyFileSystem#13](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">File to be renamed.</param>
        <param name="newName">New name of file.</param>
        <summary>Renames a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method cannot be used to move a file; use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> method to move and rename the file.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.RenameFile` method.  
  
|To|See|  
|--------|---------|  
|Rename a file|[How to: Rename a File](../Topic/How%20to:%20Rename%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example renames the file `Test.txt` to `SecondTest.txt`.  
  
 [!CODE [VbVbcnMyFileSystem#1](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#1)]  
  
 Change "`C:\Test.txt`" to the path and file name of the file that you want to rename.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that provides properties for accessing commonly referenced directories.</summary>
        <value>This property returns the &lt;see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories"&gt; object for the computer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 This example returns the file path for the user's Desktop directory and displays it.  
  
 [!CODE [VbVbcnMyFileSystem#80](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#80)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Path and name of the file to be written to.</param>
        <param name="data">Data to be written to the file.</param>
        <param name="append">`True` to append to the file contents; `False` to overwrite the file contents. Default is `False`.</param>
        <summary>Writes data to a binary file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the specified path, excluding the file name, is not valid, a <xref:System.IO.DirectoryNotFoundException> exception will be thrown. If the path is valid but the file does not exist, the file is created.  
  
> [!NOTE]
>  The `WriteAllBytes` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllBytes` method is simpler than code that uses a <xref:System.IO.BinaryWriter> object. However, if you are adding data to a file using a loop, a <xref:System.IO.BinaryWriter> object can provide better performance because you only have to open and close the file once.  
  
 The following table lists an example of a task involving the `My.Computer.FileSystem.WriteAllBytes` method.  
  
|To|See|  
|--------|---------|  
|Write to a binary file|[How to: Write to Binary Files](../Topic/How%20to:%20Write%20to%20Binary%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example appends the data array `CustomerData` to the file `CollectedData`.  
  
 [!CODE [VbVbcnMyFileSystem#50](../CodeSnippet/VS_Snippets_VBCSharp/VbVbcnMyFileSystem#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">File to be written to.</param>
        <param name="text">Text to be written to file.</param>
        <param name="append">`True` to append to the contents of the file; `False` to overwrite the contents of the file. Default is `False`.</param>
        <summary>Writes text to a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UTF-8 encoding is used to write to the file. To specify a different encoding, use a different overload of the WriteAllText method.  
  
 If the specified file does not exist, it is created.  
  
 If the specified encoding does not match the existing encoding of the file, the specified coding is ignored.  
  
> [!NOTE]
>  The `WriteAllText` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllText` method is simpler than code that uses a <xref:System.IO.StreamWriter> object. However, if you are adding strings to a file by using a loop, a <xref:System.IO.StreamWriter> object can provide better performance because you only have to open and close the file one time. For more information, see the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> method.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.WriteAllText` method.  
  
|To|See|  
|--------|---------|  
|Write text to a file|[How to: Write Text to Files](../Topic/How%20to:%20Write%20Text%20to%20Files%20in%20Visual%20Basic.md)|  
|Append text to a file|[How to: Append to Text Files](../Topic/How%20to:%20Append%20to%20Text%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example writes the line `"This is new text to be added."` to the file `Test.txt`, overwriting any existing text in the file.  
  
 [!CODE [VbRefFile#21](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#21)]  
  
 This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  
  
 [!CODE [VbRefFile#22](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">File to be written to.</param>
        <param name="text">Text to be written to file.</param>
        <param name="append">`True` to append to the contents of the file; `False` to overwrite the contents of the file. Default is `False`.</param>
        <param name="encoding">What encoding to use when writing to file. Default is UTF-8.</param>
        <summary>Writes text to a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the specified file does not exist, it is created.  
  
 If the specified encoding does not match the existing encoding of the file, the specified coding is ignored.  
  
> [!NOTE]
>  The `WriteAllText` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllText` method is simpler than code that uses a <xref:System.IO.StreamWriter> object. However, if you are adding strings to a file by using a loop, a <xref:System.IO.StreamWriter> object can provide better performance because you only have to open and close the file one time. For more information, see the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> method.  
  
 The following table lists examples of tasks involving the `My.Computer.FileSystem.WriteAllText` method.  
  
|To|See|  
|--------|---------|  
|Write text to a file|[How to: Write Text to Files](../Topic/How%20to:%20Write%20Text%20to%20Files%20in%20Visual%20Basic.md)|  
|Append text to a file|[How to: Append to Text Files](../Topic/How%20to:%20Append%20to%20Text%20Files%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example writes the line `"This is new text to be added."` to the file `Test.txt`, overwriting any existing text in the file.  
  
 [!CODE [VbRefFile#21](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#21)]  
  
 This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  
  
 [!CODE [VbRefFile#22](../CodeSnippet/VS_Snippets_VBCSharp/VbRefFile#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>