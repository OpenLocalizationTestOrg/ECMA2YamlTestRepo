<Type Name="TypeFilterLevel" FullName="System.Runtime.Serialization.Formatters.TypeFilterLevel">
  <TypeSignature Language="C#" Value="public enum TypeFilterLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TypeFilterLevel extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the level of automatic deserialization for .NET Framework remoting.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework remoting provides two levels of automatic deserialization, F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Low?qualifyHint=False&autoUpgrade=True and F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Full?qualifyHint=False&autoUpgrade=True. The F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Low?qualifyHint=False&autoUpgrade=True deserialization level helps protect against deserialization attacks by deserializing only the types associated with the most basic remoting functionality. The F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Full?qualifyHint=False&autoUpgrade=True deserialization level supports automatic deserialization of all types that remoting supports in all situations. For a list of the .NET Framework remoting types that F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Low?qualifyHint=False&autoUpgrade=True and F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Full?qualifyHint=False&autoUpgrade=True support, see [&#91;\<topic://cpconAutomaticDeserializationInNETRemoting>&#93;](http://msdn.microsoft.com/en-us/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
 You can set the members of this enumeration programmatically or by using an application configuration file. For examples, see [&#91;\<topic://cpconAutomaticDeserializationInNETRemoting>&#93;](http://msdn.microsoft.com/en-us/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
> [!CAUTION]
>  Do not assume that controlling deserialization is the only security your application requires. In distributed applications, even a high degree of control over serialization might not prevent malicious clients from intercepting the communication and using it in some way, even if that is merely showing data to others. Therefore, although the F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Low?qualifyHint=False&autoUpgrade=True deserialization level provides some protection against certain types of attack based upon automatic deserialization, you must still evaluate whether to use authentication and encryption to help protect the confidentiality of your data.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Full">
      <MemberSignature Language="C#" Value="Full" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel Full = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The full deserialization level for .NET Framework remoting. It supports all types that remoting supports in all situations.</summary>
      </Docs>
    </Member>
    <Member MemberName="Low">
      <MemberSignature Language="C#" Value="Low" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel Low = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The low deserialization level for .NET Framework remoting. It supports types associated with basic remoting functionality.</summary>
      </Docs>
    </Member>
  </Members>
</Type>