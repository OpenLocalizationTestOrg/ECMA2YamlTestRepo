<Type Name="RegistrationServices" FullName="System.Runtime.InteropServices.RegistrationServices">
  <TypeSignature Language="C#" Value="public class RegistrationServices : System.Runtime.InteropServices.IRegistrationServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RegistrationServices extends System.Object implements class System.Runtime.InteropServices.IRegistrationServices" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.IRegistrationServices</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("475E398F-8AFA-43a7-A3BE-F4EF8D6787C9")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a set of services for registering and unregistering managed assemblies for use from COM.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registration is needed when the objects within an assembly are being used by COM clients. The [Regasm.exe (Assembly Registration Tool)](../Topic/Regasm.exe%20\(Assembly%20Registration%20Tool\).md) and [!INCLUDE[vsprvsext](../../add/includes/vsprvsext-md.md)] use methods exposed by the RegistrationServices class to add or remove COM-enabling registry entries for managed assemblies.  
  
 You can use the following methods to assist you in preparing a registration file:  
  
-   <xref:System.Runtime.InteropServices.RegistrationServices.GetManagedCategoryGuid%2A>  
  
-   <xref:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType%2A>  
  
-   <xref:System.Runtime.InteropServices.RegistrationServices.GetRegistrableTypesInAssembly%2A>  
  
-   <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A>  
  
 Although these methods help in gathering information to be used in a registration file, they do not actually produce a registration file. Instead, you can use the [Regasm.exe (Assembly Registration Tool)](../Topic/Regasm.exe%20\(Assembly%20Registration%20Tool\).md) tool with the `/regfile` option to perform this task. RegistrationServices methods cannot export and register a type library. To export and register a type library, you can use the [Regasm.exe (Assembly Registration Tool)](../Topic/Regasm.exe%20\(Assembly%20Registration%20Tool\).md) tool and the [Tlbexp.exe (Type Library Exporter)](../Topic/Tlbexp.exe%20\(Type%20Library%20Exporter\).md) tool.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrationServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Runtime.InteropServices.RegistrationServices"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCategoryGuid">
      <MemberSignature Language="C#" Value="public virtual Guid GetManagedCategoryGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Guid GetManagedCategoryGuid() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the GUID of the COM category that contains the managed classes.</summary>
        <returns>The GUID of the COM category that contains the managed classes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProgIdForType">
      <MemberSignature Language="C#" Value="public virtual string GetProgIdForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetProgIdForType(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type corresponding to the ProgID that is being requested.</param>
        <summary>Retrieves the COM ProgID for the specified type.</summary>
        <returns>The ProgID for the specified type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegistrableTypesInAssembly">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRegistrableTypesInAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRegistrableTypesInAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly to search for classes.</param>
        <summary>Retrieves a list of classes in an assembly that would be registered by a call to &lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly%2A&gt;.</summary>
        <returns>A &lt;see cref="T:System.Type"&gt; array containing a list of classes in .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public virtual bool RegisterAssembly (System.Reflection.Assembly assembly, System.Runtime.InteropServices.AssemblyRegistrationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterAssembly(class System.Reflection.Assembly assembly, valuetype System.Runtime.InteropServices.AssemblyRegistrationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.AssemblyRegistrationFlags" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly to be registered.</param>
        <param name="flags">An &lt;see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags"&gt; value indicating any special settings used when registering .</param>
        <summary>Registers the classes in a managed assembly to enable creation from COM.</summary>
        <returns>`true` if  contains types that were successfully registered; otherwise `false` if the assembly contains no eligible types.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `RegisterAssembly` adds the appropriate registry entries for the types in the specified assembly. This method also calls any registration functions found in the assembly.  
  
 Use <xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName> to get an assembly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTypeForComClients">
      <MemberSignature Language="C#" Value="public virtual void RegisterTypeForComClients (Type type, ref Guid g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterTypeForComClients(class System.Type type, valuetype System.Guid g) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="g" Type="System.Guid&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;see cref="T:System.Type"&gt; to be registered for use from COM.</param>
        <param name="g">The &lt;see cref="T:System.Guid"&gt; used to register the specified type.</param>
        <summary>Registers the specified type with COM using the specified GUID.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is equivalent to calling `CoRegisterClassObject` in COM. The RegisterTypeForComClients method is not atomic and can cause unpredictable results when used in a multithreaded context.  
  
 In version 2.0 and later, use the <xref:System.Runtime.InteropServices.RegistrationServices.UnregisterTypeForComClients%2A> method to unregister a type in COM.  
  
 Note that using platform invoke to call the unmanaged `CoRegisterClassObject` and  `CoDisconnectObject` methods for registration and unregistration of COM objects is not supported.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTypeForComClients">
      <MemberSignature Language="C#" Value="public virtual int RegisterTypeForComClients (Type type, System.Runtime.InteropServices.RegistrationClassContext classContext, System.Runtime.InteropServices.RegistrationConnectionType flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 RegisterTypeForComClients(class System.Type type, valuetype System.Runtime.InteropServices.RegistrationClassContext classContext, valuetype System.Runtime.InteropServices.RegistrationConnectionType flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="classContext" Type="System.Runtime.InteropServices.RegistrationClassContext" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.RegistrationConnectionType" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;see cref="T:System.Type"&gt; object to register for use from COM.</param>
        <param name="classContext">One of the &lt;see cref="T:System.Runtime.InteropServices.RegistrationClassContext"&gt; values that indicates the context in which the executable code will be run.</param>
        <param name="flags">One of the &lt;see cref="T:System.Runtime.InteropServices.RegistrationConnectionType"&gt; values that specifies how connections are made to the class object.</param>
        <summary>Registers the specified type with COM using the specified execution context and connection type.</summary>
        <returns>An integer that represents a cookie value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is equivalent to calling `CoRegisterClassObject` in COM. The RegisterTypeForComClients method is not atomic and can cause unpredictable results when used in a multithreaded context.  
  
 In the .NET Framework version 2.0 and later, use the <xref:System.Runtime.InteropServices.RegistrationServices.UnregisterTypeForComClients%2A> method to unregister a type in COM.  
  
 Note that using platform invoke to call the unmanaged `CoRegisterClassObject` and  `CoDisconnectObject` methods for registration and unregistration of COM objects is not supported.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeRepresentsComType">
      <MemberSignature Language="C#" Value="public virtual bool TypeRepresentsComType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TypeRepresentsComType(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to check for being a COM type.</param>
        <summary>Indicates whether a type is marked with the &lt;see cref="T:System.Runtime.InteropServices.ComImportAttribute"&gt;, or derives from a type marked with the &lt;see cref="T:System.Runtime.InteropServices.ComImportAttribute"&gt; and shares the same GUID as the parent.</summary>
        <returns>`true` if a type is marked with the &lt;see cref="T:System.Runtime.InteropServices.ComImportAttribute"&gt;, or derives from a type marked with the &lt;see cref="T:System.Runtime.InteropServices.ComImportAttribute"&gt; and shares the same GUID as the parent; otherwise `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeRequiresRegistration">
      <MemberSignature Language="C#" Value="public virtual bool TypeRequiresRegistration (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TypeRequiresRegistration(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to check for COM registration requirements.</param>
        <summary>Determines whether the specified type requires registration.</summary>
        <returns>`true` if the type must be registered for use from COM; otherwise `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public virtual bool UnregisterAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UnregisterAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly to be unregistered.</param>
        <summary>Unregisters the classes in a managed assembly.</summary>
        <returns>`true` if  contains types that were successfully unregistered; otherwise `false` if the assembly contains no eligible types.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `UnregisterAssembly` removes the registry entries for the types in the specified assembly previously added by <xref:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly%2A>. This method also calls any unregistration functions found in the assembly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterTypeForComClients">
      <MemberSignature Language="C#" Value="public virtual void UnregisterTypeForComClients (int cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterTypeForComClients(int32 cookie) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cookie">The cookie value returned by a previous call to the &lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients%2A&gt; method overload.</param>
        <summary>Removes references to a type registered with the &lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients%2A&gt; method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Note that using platform invoke to call the unmanaged `CoRegisterClassObject` and  `CoDisconnectObject` methods to register and unregister COM objects is not supported.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>