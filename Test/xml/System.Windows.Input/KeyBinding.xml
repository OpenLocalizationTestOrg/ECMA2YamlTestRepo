<Type Name="KeyBinding" FullName="System.Windows.Input.KeyBinding">
  <TypeSignature Language="C#" Value="public class KeyBinding : System.Windows.Input.InputBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyBinding extends System.Windows.Input.InputBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputBinding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Binds a &lt;see cref="T:System.Windows.Input.KeyGesture"&gt; to a &lt;xref:System.Windows.Input.RoutedCommand&gt; (or another  &lt;xref:System.Windows.Input.ICommand&gt; implementation).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A KeyBinding associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](../Topic/Commanding%20Overview.md).  
  
 With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a KeyBinding with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a KeyBinding will never attempt to invoke its associated command.  
  
 When defining a KeyBinding in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a KeyBinding in [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the KeyBinding element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  
  
 A KeyBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a KeyBinding is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or KeyBinding elements.  
  
   
  
## Examples  
 The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  
  
 [!code-xml[commandWithHandler#CommandHandlerKeyBinding](../../add/codesnippet/Xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](../../add/codesnippet/CSharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](../../add/codesnippet/VisualBasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Input.KeyBinding"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.KeyGesture gesture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.KeyGesture" />
      </Parameters>
      <Docs>
        <param name="command">The command to associate with .</param>
        <param name="gesture">The key combination to associate with .</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Input.KeyBinding"&gt; class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and &lt;xref:System.Windows.Input.KeyGesture&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="command">The command to invoke.</param>
        <param name="key">The key to be associated with .</param>
        <param name="modifiers">The modifiers to be associated with .</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Input.KeyBinding"&gt; class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and the specified &lt;xref:System.Windows.Input.Key&gt; and &lt;xref:System.Windows.Input.ModifierKeys&gt; which will be converted into a &lt;xref:System.Windows.Input.KeyGesture&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an instance of a &lt;see cref="T:System.Windows.Input.KeyBinding"&gt;.</summary>
        <returns>The new object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public override System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the gesture associated with this &lt;see cref="T:System.Windows.Input.KeyBinding"&gt;.</summary>
        <value>The key sequence. The default value is `null`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  
  
   
  
## Examples  
 The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  
  
 [!code-xml[commandWithHandler#CommandHandlerKeyBinding](../../add/codesnippet/Xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](../../add/codesnippet/CSharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](../../add/codesnippet/VisualBasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Windows.Input.Key&gt; of the &lt;xref:System.Windows.Input.KeyGesture&gt; associated with this &lt;xref:System.Windows.Input.KeyBinding&gt;.</summary>
        <value>The key part of the &lt;see cref="T:System.Windows.Input.KeyGesture"&gt;. The default value is &lt;xref:System.Windows.Input.Key&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  
  
 When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P". The second way is to define the Key attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the Key, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Windows.Input.ModifierKeys&gt; of the &lt;xref:System.Windows.Input.KeyGesture&gt; associated with this &lt;xref:System.Windows.Input.KeyBinding&gt;.</summary>
        <value>The modifier keys of the &lt;see cref="T:System.Windows.Input.KeyGesture"&gt;.  The default value is &lt;xref:System.Windows.Input.ModifierKeys&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  
  
 When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the Modifiers attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, Modifiers, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## XAML Attribute Usage  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
  
```  
  
<a name="xamlValues_Modifiers"></a>   
## XAML Values  
 *oneOrMoreModifierKeys*  
 One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a "+" character.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ModifiersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ModifiersProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>