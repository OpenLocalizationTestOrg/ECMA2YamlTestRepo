<Type Name="IdentityReference" FullName="System.Security.Principal.IdentityReference">
  <TypeSignature Language="C#" Value="public abstract class IdentityReference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IdentityReference extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an identity and is the base class for the &lt;see cref="T:System.Security.Principal.NTAccount"&gt; and &lt;xref:System.Security.Principal.SecurityIdentifier&gt; classes. This class does not provide a public constructor, and therefore cannot be inherited.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">An object to compare with this &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; instance, or a null reference.</param>
        <summary>Returns a value that indicates whether the specified object equals this instance of the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; class.</summary>
        <returns>`true` if  is an object with the same underlying type and value as this &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; instance; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for &lt;see cref="T:System.Security.Principal.IdentityReference"&gt;. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
        <returns>The hash code for this &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidTargetType">
      <MemberSignature Language="C#" Value="public abstract bool IsValidTargetType (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidTargetType(class System.Type targetType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">The type being queried for validity to serve as a conversion from &lt;see cref="T:System.Security.Principal.IdentityReference"&gt;. The following target types are valid:  
  
 &lt;xref:System.Security.Principal.NTAccount&gt;  
  
 &lt;xref:System.Security.Principal.SecurityIdentifier&gt;</param>
        <summary>Returns a value that indicates whether the specified type is a valid translation type for the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; class.</summary>
        <returns>`true` if  is a valid translation type for the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; class; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Security.Principal.IdentityReference left, class System.Security.Principal.IdentityReference right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="right" Type="System.Security.Principal.IdentityReference" />
      </Parameters>
      <Docs>
        <param name="left">The left &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; operand to use for the equality comparison. This parameter can be `null`.</param>
        <param name="right">The right &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; operand to use for the equality comparison. This parameter can be `null`.</param>
        <summary>Compares two &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the &lt;xref:System.Security.Principal.IdentityReference.Value%2A&gt; property or if they are both `null`.</summary>
        <returns>`true` if  and  are equal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Security.Principal.IdentityReference left, class System.Security.Principal.IdentityReference right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="right" Type="System.Security.Principal.IdentityReference" />
      </Parameters>
      <Docs>
        <param name="left">The left &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; operand to use for the inequality comparison. This parameter can be `null`.</param>
        <param name="right">The right &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; operand to use for the inequality comparison. This parameter can be `null`.</param>
        <summary>Compares two &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the &lt;xref:System.Security.Principal.IdentityReference.Value%2A&gt; property or if one of the objects is `null` and the other is not.</summary>
        <returns>`true` if  and  are not equal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public abstract string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the string representation of the identity represented by the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object.</summary>
        <returns>The identity in string format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public abstract System.Security.Principal.IdentityReference Translate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Principal.IdentityReference Translate(class System.Type targetType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IdentityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">The target type for the conversion from &lt;see cref="T:System.Security.Principal.IdentityReference"&gt;.</param>
        <summary>Translates the account name represented by the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object into another &lt;see cref="T:System.Security.Principal.IdentityReference"&gt;-derived type.</summary>
        <returns>The converted identity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the string value of the identity represented by the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object.</summary>
        <value>The string value of the identity represented by the &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>