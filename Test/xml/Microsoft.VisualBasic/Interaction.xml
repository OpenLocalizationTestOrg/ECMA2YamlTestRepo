<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The `Interaction` module contains procedures used to interact with objects, applications, and systems.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This module supports the Visual Basic language keywords and run-time library members that run other programs, call a method or property, sound a beep from the computer, provide a command-line string, manipulate COM objects, and control dialog boxes.  
  
   
  
## Examples  
 The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  
  
```  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
' The preceding path is for Windows XP.  
' The Windows 2000 path is C:\WINNT\system32\calc.exe.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ProcessId">`Integer` specifying the Win32 process ID number assigned to this process. You can use the ID returned by the &lt;xref:Microsoft.VisualBasic.Interaction.Shell%2A&gt;, provided it is not zero.</param>
        <summary>Activates an application that is already running.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use `AppActivate` to bring an application's active window into focus. You might not have a handle or a reference to the active window, or even know which window is active at a given moment. In such a case, you cannot use the <xref:System.Windows.Forms.Control.Focus%2A> method.  
  
 The `AppActivate` function changes the focus to the named application or window but does not affect whether it is maximized or minimized. Focus moves away from the activated application window when the user takes some action to change the focus or close the window. You can use the `Shell` function to start an application and set the window style.  
  
 If you use the  parameter, `AppActivate` uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar. It first looks through the top-level windows and then through the child windows. If it cannot find a match, it throws an <xref:System.ArgumentException>.  
  
 You can use `AppActivate` only with processes that own windows. Most console applications do not own windows, which means that they do not appear in the list of processes that `AppActivate` searches. When running from a console application, the system creates a separate process to run the application and returns the output to the console process. Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.  
  
 At run time, the `AppActivate` function activates any running application with a title that matches  or with a process ID that matches . If there is no exact match, it activates any application whose title string ends with . If there is more than one application named , the `AppActivate` function arbitrarily chooses one to activate.  
  
> [!NOTE]
>  The `AppActivate` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow> level, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  
  
 [!CODE [VbVbalrCatRef#11](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Title">`String` expression specifying the title in the title bar of the application you want to activate. You can use the title assigned to the application when it was launched.</param>
        <summary>Activates an application that is already running.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use `AppActivate` to bring an application's active window into focus. You might not have a handle or a reference to the active window, or even know which window is active at a given moment. In such a case, you cannot use the <xref:System.Windows.Forms.Control.Focus%2A> method.  
  
 The `AppActivate` function changes the focus to the named application or window but does not affect whether it is maximized or minimized. Focus moves away from the activated application window when the user takes some action to change the focus or close the window. You can use the `Shell` function to start an application and set the window style.  
  
 If you use the  parameter, `AppActivate` uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar. It first looks through the top-level windows and then through the child windows. If it cannot find a match, it throws an <xref:System.ArgumentException>.  
  
 You can use `AppActivate` only with processes that own windows. Most console applications do not own windows, which means that they do not appear in the list of processes that `AppActivate` searches. When running from a console application, the system creates a separate process to run the application and returns the output to the console process. Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.  
  
 At run time, the `AppActivate` function activates any running application with a title that matches  or with a process ID that matches . If there is no exact match, it activates any application whose title string ends with . If there is more than one application named , the `AppActivate` function arbitrarily chooses one to activate.  
  
> [!NOTE]
>  The `AppActivate` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow> level, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  
  
 [!CODE [VbVbalrCatRef#11](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sounds a tone through the computer's speaker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The pitch and duration of the beep depend on your hardware and system software and therefore vary among computers.  
  
> [!NOTE]
>  The `Beep` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow> level, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.UIPermission>.  
  
   
  
## Examples  
 This example uses the `Beep` function to sound a tone through the computer's speaker.  
  
 [!CODE [VbVbalrCatRef#59](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">Required. `Object`. A pointer to the object exposing the property or method.</param>
        <param name="ProcName">Required. `String`. A string expression containing the name of the property or method on the object.</param>
        <param name="UseCallType">Required. An enumeration member of type &lt;see cref="T:Microsoft.VisualBasic.CallType"&gt; representing the type of procedure being called. The value of `CallType` can be `Method`, `Get`, or `Set`.</param>
        <param name="Args">Optional. `ParamArray`. A parameter array containing the arguments to be passed to the property or method being called.</param>
        <summary>Executes a method on an object, or sets or returns a property on an object.</summary>
        <returns>Executes a method on an object, or sets or returns a property on an object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `CallByName` function is used at runtime to get a property, set a property, or invoke a method.  
  
   
  
## Examples  
 In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  
  
 [!CODE [VbVbalrFunctions#99](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#99)]  
  
 [!CODE [VbVbalrFunctions#20](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#20)]  
  
 The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  
  
 [!CODE [VbVbalrFunctions#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" />
        <Parameter Name="Choice" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">Required. `Double`. Numeric expression that results in a value between 1 and the number of elements passed in the  argument.</param>
        <param name="Choice">Required. `Object` parameter array. You can supply either a single variable or an expression that evaluates to the `Object` data type, to a list of `Object` variables or expressions separated by commas, or to a single-dimensional array of `Object` elements.</param>
        <summary>Selects and returns a value from a list of arguments.</summary>
        <returns>Selects and returns a value from a list of arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Choose` function returns a member of the list passed in , based on the value of . The first member of the list is selected when  is 1. The last member of the list is selected when  is `UBound`(). If  is outside these limits, `Choose` returns `Nothing`.  
  
 If  is not a whole number, it is rounded to the nearest whole number before being evaluated.  
  
 You can use `Choose` to look up a value in a list of possibilities.  
  
> [!NOTE]
>  The expressions in the argument list can include function calls. As part of preparing the argument list for the call to `Choose`, the Visual Basic compiler calls every function in every expression. This means that you cannot rely on a particular function not being called if a different expression is selected by .  
  
   
  
## Examples  
 This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  
  
 [!CODE [VbVbalrFunctions#22](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic. The `My` feature provides greater productivity and performance than the `Command` function. For more information, see &lt;xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A&gt;.</summary>
        <returns>Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.  
  
 The `My` feature provides greater productivity and performance than the `Command` function. For more information, see &lt;xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After the arguments are returned, you can search for common delimiters, such as spaces, backward or forward slashes, hyphens, or quotation marks, to split or search the string for individual parameters.  
  
 For applications developed with Visual Basic and compiled to an .exe file, the `Command` function returns any arguments that appear after the name of the application on the command line, in this form: `MyApp(cmdlineargs)`.  
  
   
  
## Examples  
 This example uses the `Command` function to return the command-line arguments in an object that contains an array.  
  
 [!CODE [VbVbalrCatRef#58](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#58)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">Required. `String`. The program ID of the object to create.</param>
        <param name="ServerName">Optional. `String`. The name of the network server where the object will be created. If  is an empty string (""), the local computer is used.</param>
        <summary>Creates and returns a reference to a COM object. `CreateObject` cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</summary>
        <returns>Creates and returns a reference to a COM object. `CreateObject` cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  
  
```vb#  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  
  
 You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  
  
## Interacting with Unmanaged Code  
 Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](../Topic/COM%20Interoperability%20in%20.NET%20Framework%20Applications%20\(Visual%20Basic\).md).  
  
 You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  
  
## Creating an Object on a Remote Computer  
 You can create an object on a remote networked computer by passing the name of the computer to the  argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named "\\\MyServer\Public,"  is "MyServer."  
  
> [!NOTE]
>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  
  
 The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  
  
```vb#  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  
  
> [!NOTE]
>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  
  
## Creating Framework Objects  
 You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  
  
> [!IMPORTANT]
>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  
  
 [!CODE [VbVbalrExcelObject#1](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrExcelObject#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Required. `String` expression containing the name of the application or project to which the section or key setting applies.</param>
        <param name="Section">Required. `String` expression containing the name of the section from which the key setting is being deleted. If only  and  are provided, the specified section is deleted along with all related key settings.</param>
        <param name="Key">Optional. `String` expression containing the name of the key setting being deleted.</param>
        <summary>Deletes a section or key setting from an application's entry in the Windows registry. The `My` feature gives you greater productivity and performance in registry operations than the `DeleteSetting` function. For more information, see &lt;xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry%2A&gt; .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  
  
 `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  
  
 Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.  
  
   
  
## Examples  
 The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no  argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  
  
 [!CODE [VbVbalrCatRef#45](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</param>
        <summary>Returns the string associated with an operating-system environment variable.</summary>
        <returns>Returns the string associated with an operating-system environment variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  contains a string, the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable. If the string in  cannot be found in the environment-string table, a zero-length string ("") is returned.  
  
 If  contains an integer, the string occupying that numeric position in the environment-string table is returned. In this case, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns all of the text, including the name of the environment variable. If there is no environment string in the specified position, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns a zero-length string.  
  
> [!IMPORTANT]
>  The <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function requires environment permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  
  
 [!CODE [VbVbalrCatRef#28](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</param>
        <summary>Returns the string associated with an operating-system environment variable.</summary>
        <returns>Returns the string associated with an operating-system environment variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  contains a string, the Environ function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable. If the string in  cannot be found in the environment-string table, a zero-length string ("") is returned.  
  
 If  contains an integer, the string occupying that numeric position in the environment-string table is returned. In this case, Environ returns all of the text, including the name of the environment variable. If there is no environment string in the specified position, Environ returns a zero-length string.  
  
> [!IMPORTANT]
>  The Environ function requires environment permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  
  
 [!CODE [VbVbalrCatRef#28](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Required. `String` expression containing the name of the application or project whose key settings are requested.</param>
        <param name="Section">Required. `String` expression containing the name of the section whose key settings are requested. `GetAllSettings` returns an object that contains a two-dimensional array of strings. The strings contain all the key settings in the specified section, plus their corresponding values.</param>
        <summary>Returns a list of key settings and their respective values (originally created with `SaveSetting`) from an application's entry in the Windows registry. Using the `My` feature gives you greater productivity and performance in registry operations than `GetAllSettings`. For more information, see &lt;xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry%2A&gt;.</summary>
        <returns>Returns a list of key settings and their respective values (originally created with `SaveSetting`) from an application's entry in the Windows registry.  
  
 Using the `My` feature gives you greater productivity and performance in registry operations than `GetAllSettings`. For more information, see &lt;xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry%2A&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings` returns an uninitialized `Object` if either  or  does not exist.  
  
 Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  
  
 Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.  
  
   
  
## Examples  
 This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as , then uses the `GetAllSettings` function to display the settings. Note that application names and  names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  
  
 [!CODE [VbVbalrCatRef#68](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#68)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Class" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Optional. `String`. The full path and name of the file containing the object to retrieve. If  is omitted,  is required.</param>
        <param name="Class">Required if  is not supplied. `String`. A string representing the class of the object. The  argument has the following syntax and parts:  
  
 `.`  
  
 [1&amp;#124;1] Parameter  
  
 [1&amp;#124;2] Description  
  
 [2&amp;#124;1]  
  
 [2&amp;#124;2] Required. `String`. The name of the application providing the object.  
  
 [3&amp;#124;1]  
  
 [3&amp;#124;2] Required. `String`. The type or class of object to create.</param>
        <summary>Returns a reference to an object provided by a COM component.</summary>
        <returns>Returns a reference to an object provided by a COM component.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  
  
```vb#  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 When this code runs, the application associated with the specified  is started and the object in the specified file is activated.  
  
## Default Cases  
 If  is a zero-length string (`""`), `GetObject` returns a new object instance of the specified class type. If the  argument is omitted, `GetObject` returns a currently active object of the class type specified in . If no object of the specified type exists, an error occurs.  
  
## Accessing a Subobject  
 Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  
  
 For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  
  
```vb#  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## Specifying a Class  
 If you do not specify the object's , Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional  argument. The following example illustrates this.  
  
```vb#  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  
  
## Using the Object  
 Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  
  
```vb#  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  
>   
>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`""`) syntax, and it causes an error if the  argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  
  
> [!IMPORTANT]
>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  
  
 This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  
  
 [!CODE [VbVbalrExcelObject#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrExcelObject#2)]  
  
 [!CODE [VbVbalrExcelObject#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrExcelObject#4)]  
  
 [!CODE [VbVbalrExcelObject#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrExcelObject#5)]  
  
 When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  
  
> [!IMPORTANT]
>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Default" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Required. `String` expression containing the name of the application or project whose key setting is requested.</param>
        <param name="Section">Required. `String` expression containing the name of the section in which the key setting is found.</param>
        <param name="Key">Required. `String` expression containing the name of the key setting to return.</param>
        <param name="Default">Optional. Expression containing the value to return if no value is set in the  setting. If omitted,  is assumed to be a zero-length string ("").</param>
        <summary>Returns a key setting value from an application's entry in the Windows registry. The `My` feature gives you greater productivity and performance in registry operations than `GetAllSettings`. For more information, see &lt;xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry%2A&gt;.</summary>
        <returns>Returns a key setting value from an application's entry in the Windows registry.  
  
 The `My` feature gives you greater productivity and performance in registry operations than `GetAllSettings`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of .  
  
 Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  
  
 Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.  
  
 `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> .  
  
   
  
## Examples  
 This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as , and then uses the `GetSetting` function to display one of the settings. Because the  argument is specified, some value is guaranteed to be returned. Notice that  names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  
  
 [!CODE [VbVbalrCatRef#61](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#61)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. `Boolean`. The expression you want to evaluate.</param>
        <param name="TruePart">Required. `Object`. Returned if  evaluates to `True`.</param>
        <param name="FalsePart">Required. `Object`. Returned if  evaluates to `False`.</param>
        <summary>Returns one of two objects, depending on the evaluation of an expression.</summary>
        <returns>Returns one of two objects, depending on the evaluation of an expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `IIf` function provides a counterpart for the ternary [Conditional Operator: ? :](../Topic/Conditional%20Operator:%20?%20:.md) in Visual C++.  
  
   
  
## Examples  
 This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word "Large" if the amount is greater than 1000; otherwise, it returns the word "Small".  
  
 [!CODE [VbVbalrFunctions#33](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#33)]  
  
 Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" />
        <Parameter Name="Title" Type="System.String" />
        <Parameter Name="DefaultResponse" Type="System.String" />
        <Parameter Name="XPos" Type="System.Int32" />
        <Parameter Name="YPos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Prompt">Required `String` expression displayed as the message in the dialog box. The maximum length of  is approximately 1024 characters, depending on the width of the characters used. If  consists of more than one line, you can separate the lines using a carriage return character (`Chr(`13`)`), a line feed character (`Chr(`10`)`), or a carriage return/line feed combination (`Chr(`13`)` &amp; `Chr(`10`)`) between each line.</param>
        <param name="Title">Optional. `String` expression displayed in the title bar of the dialog box. If you omit , the application name is placed in the title bar.</param>
        <param name="DefaultResponse">Optional. `String` expression displayed in the text box as the default response if no other input is provided. If you omit , the displayed text box is empty.</param>
        <param name="XPos">Optional. Numeric expression that specifies, in twips, the distance of the left edge of the dialog box from the left edge of the screen. If you omit , the dialog box is centered horizontally.</param>
        <param name="YPos">Optional. Numeric expression that specifies, in twips, the distance of the upper edge of the dialog box from the top of the screen. If you omit , the dialog box is positioned vertically approximately one-third of the way down the screen.</param>
        <summary>Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</summary>
        <returns>Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the user clicks **Cancel**, a zero-length string is returned.  
  
 To specify more than the first argument, you must use the `InputBox` function in an expression. If you omit any positional arguments, you must retain the corresponding comma delimiter.  
  
> [!NOTE]
>  The `InputBox` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow> level, which may affect its execution in partial-trust situations. For more information, see  and <xref:System.Security.Permissions.UIPermission> .  
  
   
  
## Examples  
 This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  
  
 [!CODE [VbVbalrCatRef#67](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#67)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" />
        <Parameter Name="Title" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Prompt">Required. `String` expression displayed as the message in the dialog box. The maximum length of  is approximately 1024 characters, depending on the width of the characters used. If  consists of more than one line, you can separate the lines using a carriage return character (`Chr(`13`)`), a line feed character (`Chr(`10`)`), or a carriage return/linefeed character combination (`Chr(`13`)` &amp; `Chr(`10`)`) between each line.</param>
        <param name="Buttons">Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit , the default value is zero.</param>
        <param name="Title">Optional. `String` expression displayed in the title bar of the dialog box. If you omit , the application name is placed in the title bar.</param>
        <summary>Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</summary>
        <returns>|||  
|-|-|  
|Constant|Value|  
|`OK`|1|  
|`Cancel`|2|  
|`Abort`|3|  
|`Retry`|4|  
|`Ignore`|5|  
|`Yes`|6|  
|`No`|7|</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you omit any positional arguments, you must retain the corresponding comma delimiter.  
  
 If the dialog box displays a **Cancel** button, pressing the ESC key has the same effect as clicking **Cancel**  
  
 If the dialog box contains a **Help** button, context-sensitive Help is provided for the dialog box. However, no value is returned until one of the other buttons is chosen. In Windows Form applications, choosing the **Help** button executes the <xref:System.Windows.Forms.Control.HelpRequested> event for the form.  
  
> [!NOTE]
>  The `MsgBox` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow> level, which may affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.UIPermission>.  
  
 The `MsgBoxStyle` enumeration values are listed in the following table.  
  
||||  
|-|-|-|  
|Member|Value|Description|  
|`OKOnly`|0|Displays OK button only.|  
|`OKCancel`|1|Displays OK and Cancel buttons.|  
|`AbortRetryIgnore`|2|Displays Abort, Retry, and Ignore buttons.|  
|`YesNoCancel`|3|Displays Yes, No, and Cancel buttons.|  
|`YesNo`|4|Displays Yes and No buttons.|  
|`RetryCancel`|5|Displays Retry and Cancel buttons.|  
|`Critical`|16|Displays Critical Message icon.|  
|`Question`|32|Displays Warning Query icon.|  
|`Exclamation`|48|Displays Warning Message icon.|  
|`Information`|64|Displays Information Message icon.|  
|`DefaultButton1`|0|First button is default.|  
|`DefaultButton2`|256|Second button is default.|  
|`DefaultButton3`|512|Third button is default.|  
|`ApplicationModal`|0|Application is modal. The user must respond to the message box before continuing work in the current application.|  
|`SystemModal`|4096|System is modal. All applications are suspended until the user responds to the message box.|  
|`MsgBoxSetForeground`|65536|Specifies the message box window as the foreground window.|  
|`MsgBoxRight`|524288|Text is right-aligned.|  
|`MsgBoxRtlReading`|1048576|Specifies text should appear as right-to-left reading on Hebrew and Arabic systems.|  
  
 The first group of values (0–5) describes the number and type of buttons displayed in the dialog box. The second group (16, 32, 48, 64) describes the icon style. The third group (0, 256, 512) determines which button is the default. The fourth group (0, 4096) determines the modality of the message box, and the fifth group specifies whether or not the message box window is the foreground window, along with the alignment and direction of the text. When adding numbers to create a final value for the  argument, use only one number from each group.  
  
   
  
## Examples  
 This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  
  
 [!CODE [VbVbalrCatRef#20](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
        <Parameter Name="Start" Type="System.Int64" />
        <Parameter Name="Stop" Type="System.Int64" />
        <Parameter Name="Interval" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Required. `Long`. Whole number that you want to locate within one of the calculated ranges.</param>
        <param name="Start">Required. `Long`. Whole number that indicates the start of the set of calculated ranges.  cannot be less than 0.</param>
        <param name="Stop">Required. `Long`. Whole number that indicates the end of the set of calculated ranges.  cannot be less than or equal to .</param>
        <param name="Interval">Required. `Long`. Whole number that indicates the size of each range calculated between  and .  cannot be less than 1.</param>
        <summary>Returns a string representing the calculated range that contains a number.</summary>
        <returns>Returns a string representing the calculated range that contains a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Partition` function calculates a set of numeric ranges, each containing the number of values specified by . The first range begins at , and the last range ends at . The `Partition` function then identifies which range contains  and returns a string describing that range. The range is represented in the string as "*lowervalue*:*uppervalue*", where the low end of the range (*lowervalue*) is separated from the high end (*uppervalue*) by a colon (:).  
  
 If necessary, the `Partition` function inserts leading spaces before *lowervalue* and *uppervalue* so that they both have the same number of characters as the string representation of the value ( + 1). This ensures that if you use the output of the `Partition` function with several values of , the resulting text will be handled properly during any subsequent sort operation.  
  
 The following table shows some sample strings for ranges calculated using three sets of , , and . The "First range" and "Last range" columns show the lowest and highest ranges possible given the values of  and . The "Before first range" and "After last range" columns show the strings returned for values of  less than  and greater than , respectively.  
  
||||||||  
|-|-|-|-|-|-|-|  
||||Before first range|First range|Last range|After last range|  
|0|99|5|"   : -1"|"  0:  4"|" 95: 99"|"100:   "|  
|20|199|10|"   : 19"|" 20: 29"|"190:199"|"200:   "|  
|100|1010|20|"    : 99"|" 100: 119"|"1000:1010"|"1011:    "|  
  
 In the preceding table, the third line shows the result when  and  define a set of numbers that cannot be evenly divided by . The last range ends at , making it only 11 numbers long, even though  is 20.  
  
 If  is 1, the range is ":", regardless of the  and  arguments. For example, if  is 267,  is 1000, and  is 1, `Partition` returns " 267: 267".  
  
 `Partition` can be useful when constructing database queries. You can create a SELECT query that shows how many orders occur within various value ranges, for example with invoice values from 1 to 1000, 1001 to 2000, and so on.  
  
   
  
## Examples  
 The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns "1980:1989".  
  
 [!CODE [VbVbalrFunctions#45](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Setting" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">Required. `String` expression containing the name of the application or project to which the setting applies.</param>
        <param name="Section">Required. `String` expression containing the name of the section in which the key setting is being saved.</param>
        <param name="Key">Required. `String` expression containing the name of the key setting being saved.</param>
        <param name="Setting">Required. Expression containing the value to which  is being set.</param>
        <summary>Saves or creates an application entry in the Windows registry. The `My` feature gives you greater productivity and performance in registry operations than `SaveSetting`. For more information, see &lt;xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry%2A&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`.  
  
 If the key setting cannot be saved for any reason, an error occurs.  
  
 `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  
  
 Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.  
  
 `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> .  
  
   
  
## Examples  
 The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  
  
 [!CODE [VbVbalrCatRef#56](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#56)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" />
        <Parameter Name="Wait" Type="System.Boolean" />
        <Parameter Name="Timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="PathName">Required. `String`. Name of the program to execute, together with any required arguments and command-line switches.  can also include the drive and the directory path or folder.  
  
 If you do not know the path to the program, you can use the &lt;xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles%2A&gt; to locate it. For example, you can call `My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\.</param>
        <param name="Style">Optional. `AppWinStyle`. A value chosen from the &lt;see cref="T:Microsoft.VisualBasic.AppWinStyle"&gt; specifying the style of the window in which the program is to run. If  is omitted, `Shell` uses `AppWinStyle.MinimizedFocus`, which starts the program minimized and with focus.</param>
        <param name="Wait">Optional. `Boolean`. A value indicating whether the `Shell` function should wait for completion of the program. If  is omitted, `Shell` uses `False`.</param>
        <param name="Timeout">Optional. `Integer`. The number of milliseconds to wait for completion if  is `True`. If  is omitted, `Shell` uses -1, which means there is no timeout and `Shell` does not return until the program finishes. Therefore, if you omit  or set it to -1, it is possible that `Shell` might never return control to your program.</param>
        <summary>Runs an executable program and returns an integer containing the program's process ID if it is still running.</summary>
        <returns>Runs an executable program and returns an integer containing the program's process ID if it is still running.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of the `Shell` function depends on whether the program named in  is still executing when `Shell` returns. If you set  to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit  or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  
  
## Failure to Start  
 If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  
  
## Waiting for Completion  
 By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set  to `True`.  
  
## Determining the Exit Code  
 A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  
  
 To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  
  
```vb#  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## Protecting the File Specification  
 You should always enclose the entire path and file specification in quotation marks, as the following example shows.  
  
```vb#  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 Each pair of adjacent double quotation marks (`" "`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  
  
```  
"C:\Program Files\display.exe" -a -q  
```  
  
 If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\ directory, instead of `display.exe` in the C:\Program Files directory.  
  
> [!IMPORTANT]
>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  
  
> [!IMPORTANT]
>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  
  
 [!CODE [VbVbalrFunctions#47](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">Required. `Object` parameter array. Must have an even number of elements. You can supply a list of `Object` variables or expressions separated by commas, or a single-dimensional array of `Object` elements.</param>
        <summary>Evaluates a list of expressions and returns an `Object` value corresponding to the first expression in the list that is `True`.</summary>
        <returns>Evaluates a list of expressions and returns an `Object` value corresponding to the first expression in the list that is `True`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The argument supplied to  consists of paired expressions and values. The `Switch` function evaluates the odd-numbered expressions from lowest to highest index in , and returns the even-numbered value associated with the first expression that evaluates to `True`. For example, if  is `True`, `Switch` returns , and if  is `False` but  is `True`, `Switch` returns , and so on.  
  
 If you do not supply the  argument, `Switch` returns `Nothing`.  
  
> [!NOTE]
>  The expressions in the argument list can include function calls. As part of preparing the argument list for the call to `Switch`, the Visual Basic compiler calls every function in every expression. This means that you cannot rely on a particular function not being called if an expression earlier in the argument list is `True`.  
  
   
  
## Examples  
 The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  
  
 [!CODE [VbVbalrFunctions#48](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#48)]  
  
 Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>