<Type Name="DataListDesigner" FullName="System.Web.UI.Design.WebControls.DataListDesigner">
  <TypeSignature Language="C#" Value="public class DataListDesigner : System.Web.UI.Design.WebControls.BaseDataListDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataListDesigner extends System.Web.UI.Design.WebControls.BaseDataListDesigner" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Design.WebControls.BaseDataListDesigner</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.Design.SupportsPreviewControl(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Extends design-time behavior for the &lt;xref:System.Web.UI.WebControls.DataList&gt; Web server control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to extend the DataListDesigner class. The code overrides the <xref:System.Web.UI.Design.ControlDesigner.GetDesignTimeHtml%2A> method to display a five-point border that is purple if the <xref:System.Web.UI.WebControls.DataList> control is enabled.  
  
 [!CODE [DataGriddesigner_Sample2#10](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#10)]  
[!CODE [DataGriddesigner_Sample2#1](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#1)]  
  
 The following code example shows how to use the <xref:System.ComponentModel.DesignerAttribute> to associate the designer with the <xref:System.Web.UI.WebControls.DataList> control.  
  
 [!CODE [DataGridDesigner_Sample2#6](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataListDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Web.UI.Design.WebControls.DataListDesigner"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowResize">
      <MemberSignature Language="C#" Value="public override bool AllowResize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowResize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the &lt;xref:System.Web.UI.WebControls.DataList&gt; control can be resized.</summary>
        <value>`true` if the data list has templates; otherwise, `false`.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFormats">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Design.DesignerAutoFormatCollection AutoFormats { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Design.DesignerAutoFormatCollection AutoFormats" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.DesignerAutoFormatCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Web.UI.Design.DesignerAutoFormatCollection"&gt; object associated with this designer.</summary>
        <value>The &lt;see cref="T:System.Web.UI.Design.DesignerAutoFormatCollection"&gt; associated with this designer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTemplateEditingFrame">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.Design.ITemplateEditingFrame CreateTemplateEditingFrame (System.Web.UI.Design.TemplateEditingVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.Design.ITemplateEditingFrame CreateTemplateEditingFrame(class System.Web.UI.Design.TemplateEditingVerb verb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ITemplateEditingFrame</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.Web.UI.Design.TemplateEditingVerb" />
      </Parameters>
      <Docs>
        <param name="verb">The &lt;see cref="T:System.Web.UI.Design.TemplateEditingVerb"&gt; for which to create the template editing frame.</param>
        <summary>Creates a template editing frame using the specified verb.</summary>
        <returns>An &lt;see cref="T:System.Web.UI.Design.ITemplateEditingFrame"&gt; object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rather than using editing frames, use template groups and designer editing regions. For more information, see <xref:System.Web.UI.Design.ControlDesigner.TemplateGroups%2A> and <xref:System.Web.UI.Design.DesignerRegion>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">`true` to release both the managed and unmanaged resources; `false` to release only the unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the &lt;see cref="T:System.Web.UI.Design.WebControls.DataListDesigner"&gt; object and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When  is `true`, the Dispose method releases all resources held by the managed objects that this <xref:System.Web.UI.Design.WebControls.DataListDesigner> object references.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCachedTemplateEditingVerbs">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.Design.TemplateEditingVerb[] GetCachedTemplateEditingVerbs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.Design.TemplateEditingVerb[] GetCachedTemplateEditingVerbs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.TemplateEditingVerb[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the cached template editing verbs available to the designer.</summary>
        <returns>An array of &lt;see cref="T:System.Web.UI.Design.TemplateEditingVerb"&gt; objects consisting of the cached template editing verbs that are available to the designer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rather than using editing frames, use template groups and designer editing regions. For more information, see <xref:System.Web.UI.Design.ControlDesigner.TemplateGroups%2A> and <xref:System.Web.UI.Design.DesignerRegion>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDesignTimeHtml">
      <MemberSignature Language="C#" Value="public override string GetDesignTimeHtml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetDesignTimeHtml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the HTML used to represent the &lt;xref:System.Web.UI.WebControls.DataList&gt; control at design time.</summary>
        <returns>The HTML that is used to represent the &lt;xref:System.Web.UI.WebControls.DataList&gt; control at design time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to override the GetDesignTimeHtml method. It alters the appearance of the control on the design surface if the control's <xref:System.Web.UI.WebControls.WebControl.Enabled%2A?displayProperty=fullName> property is `true`.  
  
 The code uses `Try...Catch...Finally` syntax to do the following:  
  
-   The `Try` section changes the values of the properties of the control.  
  
-   The `Catch` section catches any exceptions and sends them to the <xref:System.Web.UI.Design.WebControls.DataListDesigner.GetErrorDesignTimeHtml%2A> method.  
  
-   The `Finally` section sets the properties to their original values.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.Design.WebControls.DataListDesigner> class.  
  
 [!CODE [DataGridDesigner_Sample2#2](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmptyDesignTimeHtml">
      <MemberSignature Language="C#" Value="protected override string GetEmptyDesignTimeHtml ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetEmptyDesignTimeHtml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the HTML used to represent an empty template-based control at design time.</summary>
        <returns>The HTML used to represent an empty template-based control at design time.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrorDesignTimeHtml">
      <MemberSignature Language="C#" Value="protected override string GetErrorDesignTimeHtml (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetErrorDesignTimeHtml(class System.Exception e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">The exception that occurred.</param>
        <summary>Gets the HTML to display at design time for the specified exception when an error has been encountered while rendering the control.</summary>
        <returns>The HTML displayed at design time for the specified exception.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to override the GetErrorDesignTimeHtml method to modify the appearance of the <xref:System.Web.UI.WebControls.DataList> control on the design surface when an exception occurs.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.Design.WebControls.DataListDesigner> class.  
  
 [!CODE [DataGriddesigner_Sample2#4](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemplateContainerDataItemProperty">
      <MemberSignature Language="C#" Value="public override string GetTemplateContainerDataItemProperty (string templateName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetTemplateContainerDataItemProperty(string templateName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="templateName">The name of the template.</param>
        <summary>Gets the &lt;xref:System.Web.UI.WebControls.DataListItem.System%23Web%23UI%23IDataItemContainer%23DataItem%2A&gt; property of the template container.</summary>
        <returns>The &lt;xref:System.Web.UI.WebControls.DataListItem.System%23Web%23UI%23IDataItemContainer%23DataItem%2A&gt; property of the container of the template.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetTemplateContainerDataItemProperty method is obsolete. To access the template metadata, see <xref:System.Web.UI.Design.TemplateDefinition>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTemplateContent">
      <MemberSignature Language="C#" Value="public override string GetTemplateContent (System.Web.UI.Design.ITemplateEditingFrame editingFrame, string templateName, out bool allowEditing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetTemplateContent(class System.Web.UI.Design.ITemplateEditingFrame editingFrame, string templateName, bool allowEditing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingFrame" Type="System.Web.UI.Design.ITemplateEditingFrame" />
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="allowEditing" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="editingFrame">The &lt;see cref="T:System.Web.UI.Design.ITemplateEditingFrame"&gt; instance from which to get the content.</param>
        <param name="templateName">The name of the template.</param>
        <param name="allowEditing">`true` if the template's content can be edited; `false` if the content is read-only.</param>
        <summary>Gets the content of the template.</summary>
        <returns>The content of the template.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rather than using editing frames, use template groups and designer editing regions. For more information, see <xref:System.Web.UI.Design.ControlDesigner.TemplateGroups%2A> and <xref:System.Web.UI.Design.DesignerRegion>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(class System.ComponentModel.IComponent component) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">The control element being designed.</param>
        <summary>Initializes the designer with the specified component.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to override the Initialize method to ensure that the designer is initialized only with instances of the `SimpleDataList` class.  
  
 This code example is part of a larger example provided for the <xref:System.Web.UI.Design.WebControls.DataListDesigner> class.  
  
 [!CODE [DataGriddesigner_Sample2#5](../CodeSnippet/VS_Snippets_WebNet/DataGridDesigner_Sample2#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSchemaRefreshed">
      <MemberSignature Language="C#" Value="protected override void OnSchemaRefreshed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSchemaRefreshed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the data source to which the underlying control is bound loads a new schema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the OnSchemaRefreshed method to perform additional actions that might be required when new schema becomes available.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTemplateEditingVerbsChanged">
      <MemberSignature Language="C#" Value="protected override void OnTemplateEditingVerbsChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTemplateEditingVerbsChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the template editing verbs change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rather than using editing verbs, use template groups and designer editing regions. For more information, see <xref:System.Web.UI.Design.ControlDesigner.TemplateGroups%2A> and <xref:System.Web.UI.Design.DesignerRegion>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTemplateContent">
      <MemberSignature Language="C#" Value="public override void SetTemplateContent (System.Web.UI.Design.ITemplateEditingFrame editingFrame, string templateName, string templateContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetTemplateContent(class System.Web.UI.Design.ITemplateEditingFrame editingFrame, string templateName, string templateContent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editingFrame" Type="System.Web.UI.Design.ITemplateEditingFrame" />
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="templateContent" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="editingFrame">The &lt;see cref="T:System.Web.UI.Design.ITemplateEditingFrame"&gt; instance for which to set the content.</param>
        <param name="templateName">The name of the template.</param>
        <param name="templateContent">The new content for the template.</param>
        <summary>Sets the content for the specified template and frame.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rather than using editing verbs, use template groups and designer editing regions. For more information, see <xref:System.Web.UI.Design.ControlDesigner.TemplateGroups%2A> and <xref:System.Web.UI.Design.DesignerRegion>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatesExist">
      <MemberSignature Language="C#" Value="protected bool TemplatesExist { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TemplatesExist" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether there are templates defined for the associated control.</summary>
        <value>`true` if the associated control has templates defined; otherwise `false`.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>