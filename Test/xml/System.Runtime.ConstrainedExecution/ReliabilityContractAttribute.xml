<Type Name="ReliabilityContractAttribute" FullName="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
  <TypeSignature Language="C#" Value="public sealed class ReliabilityContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReliabilityContractAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Interface, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a contract for reliability between the author of some code, and the developers who have a dependency on that code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ReliabilityContractAttribute attribute provides a mechanism for you to document your code, and to indicate what type of reliability guarantees you can make in the face of exceptional conditions that could potentially lead to an inconsistent state. In this context, exceptional conditions are defined as asynchronous exceptions that can be generated at run time by the common language runtime, such as aborted threads, out-of-memory situations, and stack overflows. You can apply the ReliabilityContractAttribute attribute to assemblies, types, and methods.  
  
 Use this attribute with the <xref:System.Runtime.ConstrainedExecution.Consistency> enumeration to define a reliability contract by documenting the level of reliability in a particular piece of code.  
  
   
  
## Examples  
 The following code example demonstrates the use of the ReliabilityContractAttribute attribute to document the level of reliability of an assembly.  
  
 [!CODE [FxCop.Reliability.ReliabilityContract#1](../CodeSnippet/VS_Snippets_CodeAnalysis/FxCop.Reliability.ReliabilityContract#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReliabilityContractAttribute (System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, valuetype System.Runtime.ConstrainedExecution.Cer cer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="consistencyGuarantee" Type="System.Runtime.ConstrainedExecution.Consistency" />
        <Parameter Name="cer" Type="System.Runtime.ConstrainedExecution.Cer" />
      </Parameters>
      <Docs>
        <param name="consistencyGuarantee">One of the &lt;see cref="T:System.Runtime.ConstrainedExecution.Consistency"&gt; values.</param>
        <param name="cer">One of the &lt;see cref="T:System.Runtime.ConstrainedExecution.Cer"&gt; values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"&gt; class with the specified &lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt; guarantee and &lt;xref:System.Runtime.ConstrainedExecution.Cer&gt; value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of the ReliabilityContractAttribute constructor to create a constrained execution region and a `finally` block that is guaranteed to execute.  
  
 [!CODE [System.Runtime.ConstrainedExecution#1](../CodeSnippet/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cer">
      <MemberSignature Language="C#" Value="public System.Runtime.ConstrainedExecution.Cer Cer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.ConstrainedExecution.Cer Cer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value that determines the behavior of a method, type, or assembly when called under a Constrained Execution Region (CER).</summary>
        <value>One of the &lt;see cref="T:System.Runtime.ConstrainedExecution.Cer"&gt; values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsistencyGuarantee">
      <MemberSignature Language="C#" Value="public System.Runtime.ConstrainedExecution.Consistency ConsistencyGuarantee { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.ConstrainedExecution.Consistency ConsistencyGuarantee" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Consistency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the &lt;see cref="T:System.Runtime.ConstrainedExecution.Consistency"&gt; reliability contract.</summary>
        <value>One of the &lt;see cref="T:System.Runtime.ConstrainedExecution.Consistency"&gt; values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>