<Type Name="UsingTaskCollection" FullName="Microsoft.Build.BuildEngine.UsingTaskCollection">
  <TypeSignature Language="C#" Value="public class UsingTaskCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UsingTaskCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Engine</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a collection of all [UsingTask](../Topic/UsingTask%20Element%20\(MSBuild\).md) elements in a project.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Microsoft.Build.BuildEngine.UsingTask[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class Microsoft.Build.BuildEngine.UsingTask[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="Microsoft.Build.BuildEngine.UsingTask[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; of &lt;xref:Microsoft.Build.BuildEngine.UsingTask&gt; objects that is the destination of the elements copied from &lt;xref:Microsoft.Build.BuildEngine.UsingTaskCollection&gt;. The &lt;xref:System.Array&gt; must have zero-based indexing.</param>
        <param name="index">The zero-based index in  at which copying begins.</param>
        <summary>Copies the entire &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt; to a compatible one-dimensional &lt;xref:System.Array&gt; of &lt;xref:Microsoft.Build.BuildEngine.UsingTask&gt; objects, starting at the specified index of the target array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from &lt;xref:Microsoft.Build.BuildEngine.UsingTaskCollection&gt;. The &lt;xref:System.Array&gt; must have zero-based indexing.</param>
        <param name="index">The zero-based index in  at which copying begins.</param>
        <summary>Copies the entire &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt; to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating the number of &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTask"&gt; objects in the &lt;xref:Microsoft.Build.BuildEngine.UsingTaskCollection&gt;.</summary>
        <value>An integer value representing the number of &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTask"&gt; objects in the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each <xref:Microsoft.Build.BuildEngine.UsingTask> object in the collection represents a  element in the project.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator that iterates through the &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt;.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; for the entire &lt;xref:Microsoft.Build.BuildEngine.UsingTaskCollection&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method allows the caller to use the `foreach` statement of the C# language (`for each` in [!INCLUDE[vbprvb](../add/includes/vbprvb-md.md)]) to iterate through the individual <xref:Microsoft.Build.BuildEngine.UsingTask> objects in the <xref:Microsoft.Build.BuildEngine.UsingTaskCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt; is synchronized (thread safe).</summary>
        <value>`true` if access to the &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt; is synchronized (thread safe); otherwise, `false`. The default is `false`.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt;.</summary>
        <value>An object that can be used to synchronize access to the &lt;see cref="T:Microsoft.Build.BuildEngine.UsingTaskCollection"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>