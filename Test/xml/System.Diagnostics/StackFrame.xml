<Type Name="StackFrame" FullName="System.Diagnostics.StackFrame">
  <TypeSignature Language="C#" Value="public class StackFrame" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StackFrame extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides information about a StackFrame, which represents a function call on the call stack for the current thread.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A StackFrame is created and pushed on the call stack for every function call made during the execution of a thread. The stack frame always includes <xref:System.Reflection.MethodBase> information, and optionally includes file name, line number, and column number information.  
  
 StackFrame information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing StackFrame objects.  
  
   
  
## Examples  
 The following example demonstrates the use of the StackFrame class to provide the stack frame information for a stack trace.  
  
 [!CODE [StackFrameSample2#1](../CodeSnippet/VS_Snippets_CLR/stackframesample2#1)]  
  
 The following example demonstrates the use of  the members of the StackFrame class.  
  
 [!CODE [StackFrameSample1#1](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame (bool fNeedFileInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool fNeedFileInfo) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fNeedFileInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fNeedFileInfo">`true` to capture the file name, line number, and column number of the stack frame; otherwise, `false`.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class, optionally capturing source information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#2](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame (int skipFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 skipFrames) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="skipFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="skipFrames">The number of frames up the stack to skip.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class that corresponds to a frame above the current stack frame.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#3](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame (int skipFrames, bool fNeedFileInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 skipFrames, bool fNeedFileInfo) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="skipFrames" Type="System.Int32" />
        <Parameter Name="fNeedFileInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="skipFrames">The number of frames up the stack to skip.</param>
        <param name="fNeedFileInfo">`true` to capture the file name, line number, and column number of the stack frame; otherwise, `false`.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#4](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame (string fileName, int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, int32 lineNumber) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">The file name.</param>
        <param name="lineNumber">The line number in the specified file.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class that contains only the given file name and line number.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor when you do not want to use the debugger's line mapping logic.  
  
   
  
## Examples  
 The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#5](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StackFrame (string fileName, int lineNumber, int colNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, int32 lineNumber, int32 colNumber) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="colNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">The file name.</param>
        <param name="lineNumber">The line number in the specified file.</param>
        <param name="colNumber">The column number in the specified file.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.StackFrame"&gt; class that contains only the given file name, line number, and column number.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor when you do not want to use the debugger's line mapping logic.  
  
   
  
## Examples  
 The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#6](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileColumnNumber">
      <MemberSignature Language="C#" Value="public virtual int GetFileColumnNumber ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetFileColumnNumber() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
        <returns>The file column number, or 0 (zero) if the file column number cannot be determined.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the GetFileColumnNumber method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#7](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileLineNumber">
      <MemberSignature Language="C#" Value="public virtual int GetFileLineNumber ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetFileLineNumber() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
        <returns>The file line number, or 0 (zero) if the file line number cannot be determined.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the GetFileLineNumber method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#7](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public virtual string GetFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileName() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
        <returns>The file name, or `null` if the file name cannot be determined.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the GetFileName method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#7](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILOffset">
      <MemberSignature Language="C#" Value="public virtual int GetILOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetILOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref="T:System.Diagnostics.DebuggableAttribute"&gt;.</summary>
        <returns>The offset from the start of the MSIL code for the method that is executing.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the GetILOffset method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#7](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase GetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodBase GetMethod() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the method in which the frame is executing.</summary>
        <returns>The method in which the frame is executing.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The method that is currently executing may be inherited from a base class, although it is called in a derived class. In this case, the <xref:System.Reflection.MemberInfo.ReflectedType%2A> property of the <xref:System.Reflection.MethodBase> object that is returned by GetMethod identifies the base class, not the derived class.  
  
   
  
## Examples  
 The following example demonstrates the use of the GetMethod method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackTraceSample3#6](../CodeSnippet/VS_Snippets_CLR/StackTraceSample3#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeOffset">
      <MemberSignature Language="C#" Value="public virtual int GetNativeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref="T:System.Diagnostics.DebuggableAttribute"&gt; class.</summary>
        <returns>The offset from the start of the JIT-compiled code for the method that is being executed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the GetNativeOffset method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#7](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OFFSET_UNKNOWN">
      <MemberSignature Language="C#" Value="public const int OFFSET_UNKNOWN = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 OFFSET_UNKNOWN = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Defines the value that is returned from the &lt;xref:System.Diagnostics.StackFrame.GetNativeOffset%2A&gt; or &lt;xref:System.Diagnostics.StackFrame.GetILOffset%2A&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds a readable representation of the stack trace.</summary>
        <returns>A readable representation of the stack trace.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Diagnostics.StackFrame> class.  
  
 [!CODE [StackFrameSample1#3](../CodeSnippet/VS_Snippets_CLR/StackFrameSample1#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>