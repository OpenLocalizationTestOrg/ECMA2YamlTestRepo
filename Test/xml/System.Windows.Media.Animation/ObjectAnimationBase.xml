<Type Name="ObjectAnimationBase" FullName="System.Windows.Media.Animation.ObjectAnimationBase">
  <TypeSignature Language="C#" Value="public abstract class ObjectAnimationBase : System.Windows.Media.Animation.AnimationTimeline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ObjectAnimationBase extends System.Windows.Media.Animation.AnimationTimeline" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.AnimationTimeline</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstract class that, when implemented, animates a &lt;see cref="T:System.Object"&gt; value.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the derived <xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames> class in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)].  
  
 [!CODE [keyframes_ovw_snip#ObjectAnimationUsingKeyFramesWholePage](../CodeSnippet/VS_Snippets_Wpf/keyframes_ovw_snip#objectanimationusingkeyframeswholepage)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectAnimationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Media.Animation.ObjectAnimationBase"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ObjectAnimationBase Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.ObjectAnimationBase Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ObjectAnimationBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a modifiable clone of this &lt;see cref="T:System.Windows.Media.Animation.ObjectAnimationBase"&gt;, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
        <returns>A modifiable clone of the current object. The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property will be `false` even if the source's &lt;xref:System.Windows.Freezable.IsFrozen%2A&gt; property was `true.`</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.  
  
 For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValue">
      <MemberSignature Language="C#" Value="public override sealed object GetCurrentValue (object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, class System.Windows.Media.Animation.AnimationClock animationClock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultOriginValue" Type="System.Object" />
        <Parameter Name="defaultDestinationValue" Type="System.Object" />
        <Parameter Name="animationClock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value.</param>
        <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
        <param name="animationClock">The &lt;see cref="T:System.Windows.Media.Animation.AnimationClock"&gt; which can generate the &lt;xref:System.Windows.Media.Animation.Clock.CurrentTime%2A&gt; or &lt;xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A&gt; value to be used by the animation to generate its output value.</param>
        <summary>Gets the current value of the animation.</summary>
        <returns>The value this animation believes should be the current value for the property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the  parameter depends on the animation’s position in the composition chain:  
  
-   If the animation is in the first position in a composition chain and it replaces another animation,  is the output of that animation at the time it was replaced.  
  
-   If the animation is in the first position in a composition chain and no animation exists to replace,  is the base value of the animated property.  
  
-   If this animation is not in the first position of a composition chain, then  is the value that is returned by the previous animation in the composition chain that has an <xref:System.Windows.Media.Animation.AnimationClock> that is not <xref:System.Windows.Media.Animation.Clock.Stopped%2A>.  
  
 The value of the  parameter depends on whether there is a previous property <xref:System.Windows.Trigger> composition layer.  
  
-   If there is a previous property <xref:System.Windows.Trigger> composition layer,  is the output from that layer.  
  
-   If there is no previous composition layer,  is the base value of the property that you are animating.  
  
 For more information about animation composition, see the [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md). For more information about creating custom animation types, see the [Custom Animations Overview](../Topic/Custom%20Animations%20Overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueCore">
      <MemberSignature Language="C#" Value="protected abstract object GetCurrentValueCore (object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetCurrentValueCore(object defaultOriginValue, object defaultDestinationValue, class System.Windows.Media.Animation.AnimationClock animationClock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultOriginValue" Type="System.Object" />
        <Parameter Name="defaultDestinationValue" Type="System.Object" />
        <Parameter Name="animationClock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
        <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
        <param name="animationClock">An &lt;see cref="T:System.Windows.Media.Animation.AnimationClock"&gt; that generates the &lt;xref:System.Windows.Media.Animation.Clock.CurrentTime%2A&gt; or &lt;xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A&gt; used by the host animation.</param>
        <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation.</summary>
        <returns>The value this animation believes should be the current value for the property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the  parameter depends on the animation’s position in the composition chain:  
  
-   If the animation is in the first position in a composition chain and it replaces another animation,  is the output of that animation at the time it was replaced.  
  
-   If the animation is in the first position in a composition chain and no animation exists to replace,  is the base value of the animated property.  
  
-   If this animation is not in the first position of a composition chain, then  is the value that is returned by the previous animation in the composition chain that has an <xref:System.Windows.Media.Animation.AnimationClock> that is not <xref:System.Windows.Media.Animation.Clock.Stopped%2A>.  
  
 The value of the  parameter depends on whether there is a previous property <xref:System.Windows.Trigger> composition layer.  
  
-   If there is a previous property <xref:System.Windows.Trigger> composition layer,  is the output from that layer.  
  
-   If there is no previous composition layer,  is the base value of the property that you are animating.  
  
 For more information about animation composition, see the [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md). For more information about creating custom animation types, see the [Custom Animations Overview](../Topic/Custom%20Animations%20Overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetPropertyType">
      <MemberSignature Language="C#" Value="public override sealed Type TargetPropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetPropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of value this animation generates.</summary>
        <value>The type of value produced by this animation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>