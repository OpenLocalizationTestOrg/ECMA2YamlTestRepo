<Type Name="FileIOPermissionAccess" FullName="System.Security.Permissions.FileIOPermissionAccess">
  <TypeSignature Language="C#" Value="public enum FileIOPermissionAccess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed FileIOPermissionAccess extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the type of file access requested.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This enumeration is used with the <xref:System.Security.Permissions.FileIOPermission> class.  
  
> [!NOTE]
>  Although F:System.Security.Permissions.FileIOPermissionAccess.NoAccess?qualifyHint=False&autoUpgrade=True and F:System.Security.Permissions.FileIOPermissionAccess.AllAccess?qualifyHint=False&autoUpgrade=True are members of FileIOPermissionAccess, they are not valid for use as the parameter for M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)?qualifyHint=False&autoUpgrade=True because they describe no file access types or all file access types, respectively, and M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)?qualifyHint=False&autoUpgrade=True expects a single file access type.  
  
> [!NOTE]
>  Giving F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=False&autoUpgrade=True access to an assembly is similar to granting it Full Trust. If an application should not write to the file system it should not have F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=False&autoUpgrade=True access.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllAccess">
      <MemberSignature Language="C#" Value="AllAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess AllAccess = int32(15)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>F:System.Security.Permissions.FileIOPermissionAccess.Append?qualifyHint=False&amp;autoUpgrade=True, F:System.Security.Permissions.FileIOPermissionAccess.Read?qualifyHint=False&amp;autoUpgrade=True, F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=False&amp;autoUpgrade=True, and F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?qualifyHint=False&amp;autoUpgrade=True access to a file or directory. F:System.Security.Permissions.FileIOPermissionAccess.AllAccess?qualifyHint=False&amp;autoUpgrade=True represents multiple FileIOPermissionAccess values and causes an T:System.ArgumentException?qualifyHint=False&amp;autoUpgrade=True when used as the  parameter for the M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)?qualifyHint=False&amp;autoUpgrade=True method, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="Append" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Append = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Access to append material to a file or directory. F:System.Security.Permissions.FileIOPermissionAccess.Append?qualifyHint=False&amp;autoUpgrade=True access includes the ability to create a new file or directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To create files, code must also be granted both F:System.Security.Permissions.FileIOPermissionAccess.Append?qualifyHint=False&autoUpgrade=True and either F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=False&autoUpgrade=True or F:System.Security.Permissions.FileIOPermissionAccess.Read?qualifyHint=False&autoUpgrade=True access. For more detail see T:System.IO.FileMode?qualifyHint=False&autoUpgrade=True.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoAccess">
      <MemberSignature Language="C#" Value="NoAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess NoAccess = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>No access to a file or directory. F:System.Security.Permissions.FileIOPermissionAccess.NoAccess?qualifyHint=False&amp;autoUpgrade=True represents no valid FileIOPermissionAccess values and causes an T:System.ArgumentException?qualifyHint=False&amp;autoUpgrade=True when used as the parameter for M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)?qualifyHint=False&amp;autoUpgrade=True, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="PathDiscovery">
      <MemberSignature Language="C#" Value="PathDiscovery" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess PathDiscovery = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  For performance reasons, `PathDiscovery` should only be granted to directories, not to files. For example, `PathDiscovery` permission should be granted to paths such as C:\test and C:\test\\, not C:\test\example.txt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="Read" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Read = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Access to read from a file or directory.</summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="Write" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Write = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Access to write to or delete a file or directory. F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=False&amp;autoUpgrade=True access includes deleting and overwriting files or directories.</summary>
      </Docs>
    </Member>
  </Members>
</Type>