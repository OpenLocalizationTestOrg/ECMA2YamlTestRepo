<Type Name="UIPermission" FullName="System.Security.Permissions.UIPermission">
  <TypeSignature Language="C#" Value="public sealed class UIPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UIPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controls the permissions related to user interfaces and the Clipboard. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Drawing and user input events in windows are user interfaces.  
  
 The permission to use windows can be one of the following: unrestricted, limited to <xref:System.Security.Permissions.UIPermissionWindow>, only <xref:System.Security.Permissions.UIPermissionWindow>, or no window drawing or user input event access allowed. <xref:System.Security.Permissions.UIPermissionWindow> and <xref:System.Security.Permissions.UIPermissionWindow> are restricted in title and size to prevent possible spoofing by potentially harmful code.  
  
 The permission to use the Clipboard can be one of the following: unrestricted, write-only, or no Clipboard access allowed. The paste limitation prevents potentially harmful applications from taking data from the Clipboard without the user's consent, while still allowing the cut, copy, and paste operations when initiated by the user through keyboard commands.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">One of the enumeration values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.UIPermission"&gt; class with either fully restricted or unrestricted access, as specified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates either the fully restricted (`None`) or the `Unrestricted` form of the permission.  
  
   
  
## Examples  
 The following code example shows the use of the UIPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
 [!CODE [System.Security.Permissions.UIPermission#7](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPermission (System.Security.Permissions.UIPermissionClipboard clipboardFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.UIPermissionClipboard clipboardFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clipboardFlag" Type="System.Security.Permissions.UIPermissionClipboard" />
      </Parameters>
      <Docs>
        <param name="clipboardFlag">One of the enumeration values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.UIPermission"&gt; class with the permissions for the Clipboard, and no access to windows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To set both the Clipboard and window permissions, use the constructor that takes parameters for both.  
  
   
  
## Examples  
 The following code example shows the use of the UIPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
 [!CODE [System.Security.Permissions.UIPermission#9](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPermission (System.Security.Permissions.UIPermissionWindow windowFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.UIPermissionWindow windowFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="windowFlag" Type="System.Security.Permissions.UIPermissionWindow" />
      </Parameters>
      <Docs>
        <param name="windowFlag">One of the enumeration values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.UIPermission"&gt; class with the permissions for windows, and no access to the Clipboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To set both the Clipboard and window permissions, use the constructor that takes parameters for both.  
  
   
  
## Examples  
 The following code example shows the use of the UIPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
 [!CODE [System.Security.Permissions.UIPermission#8](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPermission (System.Security.Permissions.UIPermissionWindow windowFlag, System.Security.Permissions.UIPermissionClipboard clipboardFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.UIPermissionWindow windowFlag, valuetype System.Security.Permissions.UIPermissionClipboard clipboardFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="windowFlag" Type="System.Security.Permissions.UIPermissionWindow" />
        <Parameter Name="clipboardFlag" Type="System.Security.Permissions.UIPermissionClipboard" />
      </Parameters>
      <Docs>
        <param name="windowFlag">One of the enumeration values.</param>
        <param name="clipboardFlag">One of the enumeration values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.UIPermission"&gt; class with the specified permissions for windows and the Clipboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the UIPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
 [!CODE [System.Security.Permissions.UIPermission#10](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clipboard">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.UIPermissionClipboard Clipboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.UIPermissionClipboard Clipboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionClipboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Clipboard access represented by the permission.</summary>
        <value>One of the &lt;see cref="T:System.Security.Permissions.UIPermissionClipboard"&gt; values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns an identical copy of the current permission.</summary>
        <returns>A copy of the current permission.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A copy of the permission represents the same access to resources as the original permission.  
  
   
  
## Examples  
 The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#5](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement esd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement esd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="esd" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="esd">The XML encoding used to reconstruct the permission.</param>
        <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#6](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
        <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
        <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The intersection of two permissions is a permission that describes the set of operations they both describe in common. Specifically, it represents the least permissive values of <xref:System.Security.Permissions.UIPermissionWindow> and <xref:System.Security.Permissions.UIPermissionClipboard> from those in the current permission and the specified permission.  
  
   
  
## Examples  
 The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#4](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
        <summary>Determines whether the current permission is a subset of the specified permission.</summary>
        <returns>`true` if the current permission is a subset of the specified permission; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission. That is, the specified permission contains at least the permissions contained in the subset. For IsSubsetOf to return `true`, both the <xref:System.Security.Permissions.UIPermissionWindow> and <xref:System.Security.Permissions.UIPermissionClipboard> values of the current permission must be equal to or less permissive than the values of the specified permission.  
  
   
  
## Examples  
 The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#2](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
        <returns>`true` if the current permission is unrestricted; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An unrestricted permission represents access to any and all resources protected by the permission.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an XML encoding of the permission and its current state.</summary>
        <returns>An XML encoding of the permission, including any state information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#6](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to combine with the current permission. It must be the same type as the current permission.</param>
        <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
        <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The result of a call to Union is a permission that represents all the operations represented by the current permission as well as all the operations represented by the specified permission. Specifically, it represents the most permissive values of <xref:System.Security.Permissions.UIPermissionWindow> and <xref:System.Security.Permissions.UIPermissionClipboard> from those in the current permission and the specified permission.  
  
   
  
## Examples  
 The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
> [!NOTE]
>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  
  
 [!CODE [System.Security.Permissions.UIPermission#3](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.UIPermissionWindow Window { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.UIPermissionWindow Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the window access represented by the permission.</summary>
        <value>One of the &lt;see cref="T:System.Security.Permissions.UIPermissionWindow"&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the Window property. This example is part of a larger example provided for the <xref:System.Security.Permissions.UIPermission> class.  
  
 [!CODE [System.Security.Permissions.UIPermission#2](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.UIPermission#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>