<Type Name="UIPermissionWindow" FullName="System.Security.Permissions.UIPermissionWindow">
  <TypeSignature Language="C#" Value="public enum UIPermissionWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed UIPermissionWindow extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the type of windows that code is allowed to use.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This enumeration is used by <xref:System.Security.Permissions.UIPermission>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllWindows">
      <MemberSignature Language="C#" Value="AllWindows" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.UIPermissionWindow AllWindows = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Users can use all windows and user input events without restriction.</summary>
      </Docs>
    </Member>
    <Member MemberName="NoWindows">
      <MemberSignature Language="C#" Value="NoWindows" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.UIPermissionWindow NoWindows = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Users cannot use any windows or user interface events. No user interface can be used.</summary>
      </Docs>
    </Member>
    <Member MemberName="SafeSubWindows">
      <MemberSignature Language="C#" Value="SafeSubWindows" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.UIPermissionWindow SafeSubWindows = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Users can only use F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows?qualifyHint=False&amp;autoUpgrade=True for drawing, and can only use user input events for user interface within that subwindow. Examples of F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows?qualifyHint=False&amp;autoUpgrade=True are a T:System.Windows.Forms.MessageBox?qualifyHint=False&amp;autoUpgrade=True, common dialog controls, and a control displayed within a browser.</summary>
      </Docs>
    </Member>
    <Member MemberName="SafeTopLevelWindows">
      <MemberSignature Language="C#" Value="SafeTopLevelWindows" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.UIPermissionWindow SafeTopLevelWindows = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.UIPermissionWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Users can only use F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows?qualifyHint=False&amp;autoUpgrade=True and F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows?qualifyHint=False&amp;autoUpgrade=True for drawing, and can only use user input events for the user interface within those top-level windows and subwindows.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When it runs under F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows?qualifyHint=False&autoUpgrade=True permission, your application:  
  
-   Will show the DNS name or IP address of the Web site from which the application was loaded in its title bar.  
  
-   Will display Balloon tool-tip when it first displays, informing the user that it is running under a restricted trust level.  
  
-   Must display its title bar at all times.  
  
-   Must display window controls on its forms.  
  
-   Cannot minimize its main window on startup.  
  
-   Cannot move its windows off-screen.  
  
-   Cannot use the P:System.Windows.Forms.Form.Opacity?qualifyHint=False&autoUpgrade=True property on T:System.Windows.Forms.Form?qualifyHint=False&autoUpgrade=True to make its windows less than 50% transparent.  
  
-   Must use only rectangular windows, and must include the window frame. Windows Forms will not honor setting P:System.Windows.Forms.Form.FormBorderStyle?qualifyHint=False&autoUpgrade=True to `None`.  
  
-   Cannot make windows invisible. Any attempt by the application to set the P:System.Windows.Forms.Control.Visible?qualifyHint=False&autoUpgrade=True property on its T:System.Windows.Forms.Form?qualifyHint=False&autoUpgrade=True objects to `False` will be ignored.  
  
-   Must have an entry in the Task Bar.  
  
-   Will have its controls prohibited from accessing the P:System.Windows.Forms.Control.Parent?qualifyHint=False&autoUpgrade=True property. By implication, controls will also be barred from accessing siblings - i.e., other controls at the same level of nesting.  
  
-   Cannot control focus using the M:System.Windows.Forms.Control.Focus?qualifyHint=False&autoUpgrade=True method.  
  
-   Will have restricted keyboard input access, so that a form or control can only access keyboard events for itself and its children.  
  
-   Will have restricted mouse coordinate access, so that a form or control can only read mouse coordinates if the mouse is over its visible area.  
  
-   Cannot set the P:System.Windows.Forms.Form.TopMost?qualifyHint=False&autoUpgrade=True property.  
  
-   Cannot control the z-order of controls on the form using the M:System.Windows.Forms.Control.BringToFront?qualifyHint=False&autoUpgrade=True and M:System.Windows.Forms.Control.SendToBack?qualifyHint=False&autoUpgrade=True methods.  
  
 These restrictions help prevent potentially harmful code from spoofing attacks, such as imitating trusted system dialogs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>