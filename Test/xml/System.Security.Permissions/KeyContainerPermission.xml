<Type Name="KeyContainerPermission" FullName="System.Security.Permissions.KeyContainerPermission">
  <TypeSignature Language="C#" Value="public sealed class KeyContainerPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit KeyContainerPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controls the ability to access key containers. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This permission is used to provide limited access to key containers.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.KeyContainerPermissionFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="flags" Type="System.Security.Permissions.KeyContainerPermissionFlags" />
      </Parameters>
      <Docs>
        <param name="flags">A bitwise combination of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"&gt; values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermission"&gt; class with the specified access.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the KeyContainerPermission constructor.  
  
 [!CODE [System.Security.Permissions.KeyContainerPermission#20](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.KeyContainerPermission#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">One of the &lt;see cref="T:System.Security.Permissions.PermissionState"&gt; values.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermission"&gt; class with either restricted or unrestricted permission.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Creates either `None` (fully restricted) or `Unrestricted` access to key containers.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags, System.Security.Permissions.KeyContainerPermissionAccessEntry[] accessList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.KeyContainerPermissionFlags flags, class System.Security.Permissions.KeyContainerPermissionAccessEntry[] accessList) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="flags" Type="System.Security.Permissions.KeyContainerPermissionFlags" />
        <Parameter Name="accessList" Type="System.Security.Permissions.KeyContainerPermissionAccessEntry[]" />
      </Parameters>
      <Docs>
        <param name="flags">A bitwise combination of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"&gt; values.</param>
        <param name="accessList">An array of &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"&gt; objects identifying specific key container access rights.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermission"&gt; class with the specified global access and specific key container access rights.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of the KeyContainerPermission constructor.  
  
 [!CODE [System.Security.Permissions.KeyContainerPermission#13](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.KeyContainerPermission#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessEntries">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.KeyContainerPermissionAccessEntryCollection AccessEntries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Permissions.KeyContainerPermissionAccessEntryCollection AccessEntries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.KeyContainerPermissionAccessEntryCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"&gt; objects associated with the current permission.</summary>
        <value>A &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"&gt; containing the &lt;xref:System.Security.Permissions.KeyContainerPermissionAccessEntry&gt; objects for this &lt;xref:System.Security.Permissions.KeyContainerPermission&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> object in the collection specifies the access rights for a specific key container.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns an identical copy of the current permission.</summary>
        <returns>A copy of the current permission.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A copy of the permission represents the same access to resources as the original permission.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.KeyContainerPermissionFlags Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.KeyContainerPermissionFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the key container permission flags that apply to all key containers associated with the permission.</summary>
        <value>A bitwise combination of the &lt;see cref="T:System.Security.Permissions.KeyContainerPermissionFlags"&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Flags property is set by the constructor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement securityElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement securityElement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityElement" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="securityElement">A &lt;see cref="T:System.Security.SecurityElement"&gt; that contains the XML encoding used to reconstruct the permission.</param>
        <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class. Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
        <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
        <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both individual permissions will pass the intersection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
        <summary>Determines whether the current permission is a subset of the specified permission.</summary>
        <returns>`true` if the current permission is a subset of the specified permission; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission. For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether the current permission is unrestricted.</summary>
        <returns>`true` if the current permission is unrestricted; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An unrestricted permission represents access to all resources protected by the permission.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an XML encoding of the permission and its current state.</summary>
        <returns>A &lt;see cref="T:System.Security.SecurityElement"&gt; that contains an XML encoding of the permission, including state information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
        <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
        <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>