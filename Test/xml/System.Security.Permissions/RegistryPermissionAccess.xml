<Type Name="RegistryPermissionAccess" FullName="System.Security.Permissions.RegistryPermissionAccess">
  <TypeSignature Language="C#" Value="public enum RegistryPermissionAccess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed RegistryPermissionAccess extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the permitted access to registry keys and values.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 RegistryPermissionAccess values are independent; rights to one type of access do not imply rights to another. For instance, `Write` permission does not imply permission to `Read` or `Create`.  
  
> [!NOTE]
>  Although F:System.Security.Permissions.RegistryPermissionAccess.NoAccess?qualifyHint=False&autoUpgrade=True and F:System.Security.Permissions.RegistryPermissionAccess.AllAccess?qualifyHint=False&autoUpgrade=True appear in RegistryPermissionAccess, they are not valid for use as the parameter for M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)?qualifyHint=False&autoUpgrade=True because they describe no registry variable access types or all registry variable access types, respectively, and M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)?qualifyHint=False&autoUpgrade=True expects a single registry variable access type.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllAccess">
      <MemberSignature Language="C#" Value="AllAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.RegistryPermissionAccess AllAccess = int32(7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.RegistryPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>F:System.Security.Permissions.RegistryPermissionAccess.Create?qualifyHint=False&amp;autoUpgrade=True, F:System.Security.Permissions.RegistryPermissionAccess.Read?qualifyHint=False&amp;autoUpgrade=True, and F:System.Security.Permissions.RegistryPermissionAccess.Write?qualifyHint=False&amp;autoUpgrade=True access to registry variables. F:System.Security.Permissions.RegistryPermissionAccess.AllAccess?qualifyHint=False&amp;autoUpgrade=True represents multiple RegistryPermissionAccess values and causes an T:System.ArgumentException?qualifyHint=False&amp;autoUpgrade=True when used as the  parameter for the M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)?qualifyHint=False&amp;autoUpgrade=True method, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="Create" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.RegistryPermissionAccess Create = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.RegistryPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Create access to registry variables.</summary>
      </Docs>
    </Member>
    <Member MemberName="NoAccess">
      <MemberSignature Language="C#" Value="NoAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.RegistryPermissionAccess NoAccess = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.RegistryPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>No access to registry variables. F:System.Security.Permissions.RegistryPermissionAccess.NoAccess?qualifyHint=False&amp;autoUpgrade=True represents no valid RegistryPermissionAccess values and causes an T:System.ArgumentException?qualifyHint=False&amp;autoUpgrade=True when used as the parameter for M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)?qualifyHint=False&amp;autoUpgrade=True, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="Read" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.RegistryPermissionAccess Read = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.RegistryPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Read access to registry variables.</summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="Write" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.RegistryPermissionAccess Write = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.RegistryPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Write access to registry variables.</summary>
      </Docs>
    </Member>
  </Members>
</Type>