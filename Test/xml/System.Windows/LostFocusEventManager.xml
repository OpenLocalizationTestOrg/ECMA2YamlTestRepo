<Type Name="LostFocusEventManager" FullName="System.Windows.LostFocusEventManager">
  <TypeSignature Language="C#" Value="public class LostFocusEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LostFocusEventManager extends System.Windows.WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a &lt;xref:System.Windows.WeakEventManager&gt; implementation so that you can use the "weak event listener" pattern to attach listeners for the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; events.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.  
  
 [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding uses this <xref:System.Windows.WeakEventManager> so that internal classes that update bindings can attach listeners for a <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName> or <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> event on an object that is the target of a binding. This supports notification for the <xref:System.Windows.Data.UpdateSourceTrigger> mode of data binding, without creating strong references to data binding targets.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The source object that the raises the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</param>
        <param name="handler">The delegate that handles the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</param>
        <summary>Adds the specified event handler, which is called when specified source raises the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to specify the event handler you want to use to subscribe to the <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName> or <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">The object with the event.</param>
        <param name="listener">The object to add as a listener.</param>
        <summary>Adds the provided listener to the list of listeners on the provided source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new object to contain listeners to the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</summary>
        <returns>A new object to contain listeners to the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.Windows.DependencyObject source, EventHandler&lt;System.Windows.RoutedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.Windows.DependencyObject source, class System.EventHandler`1&lt;class System.Windows.RoutedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.RoutedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The source object that the raises the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</param>
        <param name="handler">The delegate that handles the &lt;xref:System.Windows.UIElement.LostFocus?displayProperty=fullName&gt; or &lt;xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName&gt; event.</param>
        <summary>Removes the specified event handler from the specified source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.Windows.DependencyObject source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">The object to remove the listener from.</param>
        <param name="listener">The listener to remove.</param>
        <summary>Removes the specified listener from the list of listeners on the provided source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The object on which to start listening for the pertinent &lt;see cref="E:System.Windows.UIElement.LostFocus"&gt; event.</param>
        <summary>Begins listening for the &lt;see cref="E:System.Windows.UIElement.LostFocus"&gt; event on the given source, attaching an internal class handler to that source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The provided source is checked for type to see if it is <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement> , and then adds the class handler for the appropriate event to that source.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The source object on which to stop listening for &lt;see cref="E:System.Windows.UIElement.LostFocus"&gt;.</param>
        <summary>Stops listening for the &lt;see cref="E:System.Windows.UIElement.LostFocus"&gt; event on the given source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>