<Type Name="ConfigurationElementCollection" FullName="System.Configuration.ConfigurationElementCollection">
  <TypeSignature Language="C#" Value="public abstract class ConfigurationElementCollection : System.Configuration.ConfigurationElement, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConfigurationElementCollection extends System.Configuration.ConfigurationElement implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a configuration element containing a collection of child elements.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ConfigurationElementCollection represents a collection of elements within a configuration file.  
  
> [!NOTE]
>  An element within a configuration file refers to a basic XML element or a section. A simple element is an XML tag with related attributes, if any. A simple element constitutes a section. Complex sections can contain one or more simple elements, a collection of elements, and other sections.  
  
 You use the ConfigurationElementCollection to work with a collection of <xref:System.Configuration.ConfigurationElement> objects. Implement this class to add collections of custom <xref:System.Configuration.ConfigurationElement> elements to a <xref:System.Configuration.ConfigurationSection>.  
  
   
  
## Examples  
 The following example shows how to use the ConfigurationElementCollection.  
  
 The first example consists of three classes: `UrlsSection`, `UrlsCollection` and `UrlConfigElement`.The `UrlsSection` class uses the <xref:System.Configuration.ConfigurationCollectionAttribute> to define a custom configuration section. This section contains a URL collection (defined by the `UrlsCollection` class) of URL elements (defined by the `UrlConfigElement` class).  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#1](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#1)]  
  
 This second code example uses the classes specified before. You combine these two examples in a console application project.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#31](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#31)]  
  
 When you run the console application, an instance of the `UrlsSection` class is created and the following configuration elements are generated in the application configuration file:  
  
```  
<configuration>  
    <configSections>  
        <section name="MyUrls" type="UrlsSection,   
          ConfigurationElementCollection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />  
    </configSections>  
    <MyUrls>  
        <urls>  
           <add name="Contoso" url="http://www.contoso.com" port="4040 />  
        </urls>  
    </MyUrls>  
</configuration  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfigurationElementCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You create a new instance of the <xref:System.Configuration.ConfigurationElementCollection> when your application needs to create a custom <xref:System.Configuration.ConfigurationElementCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfigurationElementCollection (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">The &lt;see cref="T:System.Collections.IComparer"&gt; comparer to use.</param>
        <summary>Creates a new instance of the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.IComparer> is used to set a comparer to use. For example, you can use a case-insensitive comparer to make the key case insensitive.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddElementName">
      <MemberSignature Language="C#" Value="protected string AddElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to associate with the add operation in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt; when overridden in a derived class.</summary>
        <value>The name of the element.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAdd">
      <MemberSignature Language="C#" Value="protected virtual void BaseAdd (System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void BaseAdd(class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="element">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to add.</param>
        <summary>Adds a configuration element to the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the BaseAdd method to add a new <xref:System.Configuration.ConfigurationElement> to the collection. Override it in a derived class if custom behavior is required when the element is added.  
  
 When adding, an element is considered a duplicate only if the keys are identical but the values are different. Elements with identical keys and values are accepted silently because the elements do not compete. However, an element with an identical key but a different value cannot be added because there is no logic to determine which of the competing values should be honored.  
  
   
  
## Examples  
 The following code example shows how to override the BaseAdd method and how to call it from an `Add` method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#2](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAdd">
      <MemberSignature Language="C#" Value="protected void BaseAdd (System.Configuration.ConfigurationElement element, bool throwIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void BaseAdd(class System.Configuration.ConfigurationElement element, bool throwIfExists) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="throwIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to add.</param>
        <param name="throwIfExists">`true` to throw an exception if the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; specified is already contained in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;; otherwise, `false`.</param>
        <summary>Adds a configuration element to the configuration element collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the optional parameter  to throw an <xref:System.Exception> exception if the specified <xref:System.Configuration.ConfigurationElement> object already exists in the <xref:System.Configuration.ConfigurationElementCollection> collection.  
  
 An element is considered a duplicate only if the keys are identical but the values are different. Elements with identical keys and values are accepted silently because the elements do not compete. However, an element with an identical key but a different value cannot be added because there is no logic to determine which of the competing values should be honored.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAdd">
      <MemberSignature Language="C#" Value="protected virtual void BaseAdd (int index, System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void BaseAdd(int32 index, class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="index">The index location at which to add the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</param>
        <param name="element">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to add.</param>
        <summary>Adds a configuration element to the configuration element collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the  parameter to add the <xref:System.Configuration.ConfigurationElement> object to the <xref:System.Configuration.ConfigurationElementCollection> at a specific index location.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseClear">
      <MemberSignature Language="C#" Value="protected void BaseClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void BaseClear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all configuration element objects from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the BaseClear method is called, it removes all <xref:System.Configuration.ConfigurationElement> objects from the collection. It also inserts a `clear` directive into the configuration file.  
  
   
  
## Examples  
 The following code example shows how to call the BaseClear method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#3](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGet">
      <MemberSignature Language="C#" Value="protected System.Configuration.ConfigurationElement BaseGet (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Configuration.ConfigurationElement BaseGet(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index location of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to return.</param>
        <summary>Gets the configuration element at the specified index location.</summary>
        <returns>The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; at the specified index.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to call the BaseGet method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#8](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGet">
      <MemberSignature Language="C#" Value="protected System.Configuration.ConfigurationElement BaseGet (object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Configuration.ConfigurationElement BaseGet(object key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key of the element to return.</param>
        <summary>Returns the configuration element with the specified key.</summary>
        <returns>The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; with the specified key; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BaseGet method returns `null` if there is no <xref:System.Configuration.ConfigurationElement> object with the specified key in the collection.  
  
   
  
## Examples  
 The following code example shows how to call the BaseGet method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#9](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGetAllKeys">
      <MemberSignature Language="C#" Value="protected object[] BaseGetAllKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance object[] BaseGetAllKeys() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of the keys for all of the configuration elements contained in the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</summary>
        <returns>An array that contains the keys for all of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; objects contained in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGetKey">
      <MemberSignature Language="C#" Value="protected object BaseGetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance object BaseGetKey(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index location for the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</param>
        <summary>Gets the key for the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; at the specified index location.</summary>
        <returns>The key for the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseIndexOf">
      <MemberSignature Language="C#" Value="protected int BaseIndexOf (System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 BaseIndexOf(class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="element">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; for the specified index location.</param>
        <summary>Indicates the index of the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</summary>
        <returns>The index of the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to call the BaseIndexOf method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#10](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseIsRemoved">
      <MemberSignature Language="C#" Value="protected bool BaseIsRemoved (object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool BaseIsRemoved(object key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key of the element to check.</param>
        <summary>Indicates whether the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; with the specified key has been removed from the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</summary>
        <returns>`true` if the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; with the specified key has been removed; otherwise, `false`. The default is `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseRemove">
      <MemberSignature Language="C#" Value="protected void BaseRemove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void BaseRemove(object key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to remove.</param>
        <summary>Removes a &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BaseRemove method inserts a `<remove>` directive into the configuration file for the <xref:System.Configuration.ConfigurationElement> with the specified key.  
  
   
  
## Examples  
 The following code example shows how to call the BaseRemove method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#3](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseRemoveAt">
      <MemberSignature Language="C#" Value="protected void BaseRemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void BaseRemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index location of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to remove.</param>
        <summary>Removes the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; at the specified index location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The BaseRemoveAt method inserts a `<remove>` directive into the configuration file for the element at the specified index location.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearElementName">
      <MemberSignature Language="C#" Value="protected string ClearElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClearElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name for the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to associate with the clear operation in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt; when overridden in a derived class.</summary>
        <value>The name of the element.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionType">
      <MemberSignature Language="C#" Value="public virtual System.Configuration.ConfigurationElementCollectionType CollectionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.ConfigurationElementCollectionType CollectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElementCollectionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</summary>
        <value>The &lt;see cref="T:System.Configuration.ConfigurationElementCollectionType"&gt; of this collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The type will be either a <xref:System.Configuration.ConfigurationElementCollectionType> or an <xref:System.Configuration.ConfigurationElementCollectionType> field. For more information, see <xref:System.Configuration.ConfigurationElementCollectionType>.  
  
   
  
## Examples  
 The following code example shows how to get the CollectionType property.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#5](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Configuration.ConfigurationElement[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Configuration.ConfigurationElement[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Configuration.ConfigurationElement[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Array to which to copy the contents of the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</param>
        <param name="index">Index location at which to begin copying.</param>
        <summary>Copies the contents of the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; to an array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements in the collection.</summary>
        <value>The number of elements in the collection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewElement">
      <MemberSignature Language="C#" Value="protected abstract System.Configuration.ConfigurationElement CreateNewElement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Configuration.ConfigurationElement CreateNewElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, creates a new &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</summary>
        <returns>A newly created &lt;see cref="T:System.Configuration.ConfigurationElement"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the CreateNewElement method to create custom <xref:System.Configuration.ConfigurationElement> objects of a specific type. When a collection is loaded from the configuration file, CreateNewElement is called to create individual elements. CreateNewElement must be overridden in classes that derive from the <xref:System.Configuration.ConfigurationElementCollection> class.  
  
   
  
## Examples  
 The following code example shows how to override the CreateNewElement method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#6](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewElement">
      <MemberSignature Language="C#" Value="protected virtual System.Configuration.ConfigurationElement CreateNewElement (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Configuration.ConfigurationElement CreateNewElement(string elementName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">The name of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to create.</param>
        <summary>Creates a new &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; when overridden in a derived class.</summary>
        <returns>A new &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; with a specified name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the CreateNewElement method to create custom <xref:System.Configuration.ConfigurationElement> objects of a specific type. When a collection is loaded from the configuration file, CreateNewElement is called to create individual elements. CreateNewElement must be overridden in classes that derive from the <xref:System.Configuration.ConfigurationElementCollection> class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="protected virtual string ElementName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.</summary>
        <value>The name of the collection; otherwise, an empty string. The default is an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the ElementName property to name a custom <xref:System.Configuration.ConfigurationElementCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitClear">
      <MemberSignature Language="C#" Value="public bool EmitClear { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EmitClear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
        <value>`true` if the collection has been cleared; otherwise, `false`. The default is `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting the EmitClear property to `true` causes a `<clear>` directive to be written to the configuration file when the collection is serialized.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object compareTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object compareTo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="compareTo">The object to compare.</param>
        <summary>Compares the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; to the specified object.</summary>
        <returns>`true` if the object to compare with is equal to the current &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; instance; otherwise, `false`. The default is `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementKey">
      <MemberSignature Language="C#" Value="protected abstract object GetElementKey (System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetElementKey(class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="element">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to return the key for.</param>
        <summary>Gets the element key for a specified configuration element when overridden in a derived class.</summary>
        <returns>An &lt;see cref="T:System.Object"&gt; that acts as the key for the specified &lt;xref:System.Configuration.ConfigurationElement&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to override GetElementKey method.  
  
 [!CODE [System.Configuration.ConfigurationElementCollection#7](../CodeSnippet/VS_Snippets_WebNet/system.configuration.configurationelementcollection#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an &lt;see cref="T:System.Collections.IEnumerator"&gt; which is used to iterate through the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</summary>
        <returns>An &lt;see cref="T:System.Collections.IEnumerator"&gt; which is used to iterate through the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a unique value representing the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; instance.</summary>
        <returns>A unique value representing the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsElementName">
      <MemberSignature Language="C#" Value="protected virtual bool IsElementName (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsElementName(string elementName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">The name of the element to verify.</param>
        <summary>Indicates whether the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; exists in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</summary>
        <returns>`true` if the element exists in the collection; otherwise, `false`. The default is `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override the IsElementName method to provide custom behavior.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsElementRemovable">
      <MemberSignature Language="C#" Value="protected virtual bool IsElementRemovable (System.Configuration.ConfigurationElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsElementRemovable(class System.Configuration.ConfigurationElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="element">The element to check.</param>
        <summary>Indicates whether the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; can be removed from the &lt;xref:System.Configuration.ConfigurationElementCollection&gt;.</summary>
        <returns>`true` if the specified &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; can be removed from this &lt;xref:System.Configuration.ConfigurationElementCollection&gt;; otherwise, `false`. The default is `true`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Query IsElementRemovable before removing a collection element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="protected override bool IsModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsModified() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; has been modified since it was last saved or loaded when overridden in a derived class.</summary>
        <returns>`true` if any contained element has been modified; otherwise, `false`</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Configuration.ConfigurationElement.IsModified%2A> method of any <xref:System.Configuration.ConfigurationElement> contained within a <xref:System.Configuration.ConfigurationElementCollection> returns `true`, the IsModified method of the entire collection returns `true` as well.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public override bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsReadOnly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; object is read only.</summary>
        <returns>`true` if the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; object is read only; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The system defines configuration elements that cannot be modified. Call this method to determine whether elements can be modified.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection is synchronized.</summary>
        <value>`true` if access to the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; is synchronized; otherwise, `false`.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserializeUnrecognizedElement">
      <MemberSignature Language="C#" Value="protected override bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnDeserializeUnrecognizedElement(string elementName, class System.Xml.XmlReader reader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="elementName">The name of the unrecognized element.</param>
        <param name="reader">An input stream that reads XML from the configuration file.</param>
        <summary>Causes the configuration system to throw an exception.</summary>
        <returns>`true` if the unrecognized element was deserialized successfully; otherwise, `false`. The default is `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The OnDeserializeUnrecognizedElement is called when an unrecognized configuration element is read from a configuration file.  
  
 Override this method to provide custom handling of unrecognized configuration elements from a configuration file. The default return value, `false`, causes the configuration system to throw an exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveElementName">
      <MemberSignature Language="C#" Value="protected string RemoveElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RemoveElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to associate with the remove operation in the &lt;xref:System.Configuration.ConfigurationElementCollection&gt; when overridden in a derived class.</summary>
        <value>The name of the element.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="protected override void Reset (System.Configuration.ConfigurationElement parentElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Reset(class System.Configuration.ConfigurationElement parentElement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentElement" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="parentElement">The &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; representing the collection parent element, if any; otherwise, `null`.</param>
        <summary>Resets the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; to its unmodified state when overridden in a derived class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default behavior for the Reset method is to clear any modified elements a <xref:System.Configuration.ConfigurationElementCollection> object contains and to set the modified elements to the values specified by their parent configuration file. If any element in the <xref:System.Configuration.ConfigurationElementCollection> has child elements, Reset is also called on those child elements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetModified">
      <MemberSignature Language="C#" Value="protected override void ResetModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void ResetModified() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the value of the &lt;xref:System.Configuration.ConfigurationElementCollection.IsModified%2A&gt; property to `false` when overridden in a derived class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ResetModified method determines whether the elements of this collection will be written to the configuration file when the configuration is updated.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeElement">
      <MemberSignature Language="C#" Value="protected override bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool SerializeElement(class System.Xml.XmlWriter writer, bool serializeCollectionKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="serializeCollectionKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">Output stream that writes XML to the configuration file.</param>
        <param name="serializeCollectionKey">`true` to serialize the collection key; otherwise, `false`.</param>
        <summary>Writes the configuration data to an XML element in the configuration file when overridden in a derived class.</summary>
        <returns>`true` if the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; was written to the configuration file successfully.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SerializeElement method writes the contents of the configuration elements contained in the collection and any nested elements they contain to the configuration file. Override SerializeElement to provide a custom write procedure out of the collection contents and nested elements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the &lt;xref:System.Configuration.ConfigurationElementCollection.IsReadOnly%2A&gt; property for the &lt;xref:System.Configuration.ConfigurationElementCollection&gt; object and for all sub-elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is used internally to set aside those system configuration elements that cannot be modified. To determine which elements are modifiable, call the <xref:System.Configuration.ConfigurationElementCollection.IsReadOnly%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object used to synchronize access to the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</summary>
        <value>An object used to synchronize access to the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array arr, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arr">Array to which to copy this &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt;.</param>
        <param name="index">Index location at which to begin copying.</param>
        <summary>Copies the &lt;see cref="T:System.Configuration.ConfigurationElementCollection"&gt; to an array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowOnDuplicate">
      <MemberSignature Language="C#" Value="protected virtual bool ThrowOnDuplicate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ThrowOnDuplicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether an attempt to add a duplicate &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to the &lt;xref:System.Configuration.ConfigurationElementCollection&gt; will cause an exception to be thrown.</summary>
        <value>`true` if an attempt to add a duplicate &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; to this &lt;xref:System.Configuration.ConfigurationElementCollection&gt; will cause an exception to be thrown; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you add a duplicate element, an exception is thrown if the <xref:System.Configuration.ConfigurationElementCollection.CollectionType%2A> value of the element is either <xref:System.Configuration.ConfigurationElementCollectionType> or <xref:System.Configuration.ConfigurationElementCollectionType>.  
  
 Note that elements with identical keys and values are not considered duplicates, and are accepted silently. Only elements with identical keys but different values are considered duplicates. For more information, see the Remarks section for the <xref:System.Configuration.ConfigurationElementCollection.BaseAdd%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unmerge">
      <MemberSignature Language="C#" Value="protected override void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Unmerge(class System.Configuration.ConfigurationElement sourceElement, class System.Configuration.ConfigurationElement parentElement, valuetype System.Configuration.ConfigurationSaveMode saveMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceElement" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="parentElement" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="saveMode" Type="System.Configuration.ConfigurationSaveMode" />
      </Parameters>
      <Docs>
        <param name="sourceElement">A &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object at the current level containing a merged view of the properties.</param>
        <param name="parentElement">The parent &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object of the current element, or `null` if this is the top level.</param>
        <param name="saveMode">A &lt;see cref="T:System.Configuration.ConfigurationSaveMode"&gt; enumerated value that determines which property values to include.</param>
        <summary>Reverses the effect of merging configuration information from different levels of the configuration hierarchy</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Unmerge method reverses the effect of merging configuration information from different levels of the configuration hierarchy. This allows configuration set at the current hierarchy level to be differentiated from that set at parent levels, before serialization.  
  
 Unmerge is called by the system on a new temporary element to compare the parent object and the source object. Based on the <xref:System.Configuration.ConfigurationSaveMode> value, it then sets the temporary object to contain the data that needs to be serialized. For details about save modes, see <xref:System.Configuration.ConfigurationSaveMode>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>