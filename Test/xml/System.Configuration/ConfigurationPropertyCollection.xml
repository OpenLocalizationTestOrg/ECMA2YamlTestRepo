<Type Name="ConfigurationPropertyCollection" FullName="System.Configuration.ConfigurationPropertyCollection">
  <TypeSignature Language="C#" Value="public class ConfigurationPropertyCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConfigurationPropertyCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a collection of configuration-element properties.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ConfigurationPropertyCollection class represents the collection of the <xref:System.Configuration.ConfigurationProperty> objects that can be attributes or <xref:System.Configuration.ConfigurationElement> objects of a configuration element.  
  
 The <xref:System.Configuration.ConfigurationProperty> class represents an individual configuration setting. It allows you to get or set the name, type, and default value for a particular configuration entity (attribute or element). Additional options allow you to specify whether the attribute is required, is an element key, or represents a default element collection.  
  
   
  
## Examples  
 The following example shows one possible use of the ConfigurationPropertyCollection. Refer to the example of the related type <xref:System.Configuration.ConfigurationProperty>.  
  
 [!CODE [System.Configuration.ConfigurationProperty#13](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#13)]  
  
 The following is an excerpt from the configuration used by the above example.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<configuration>  
  <configSections>  
    <section name="CustomSection" type="Samples.AspNet, ConfigurationProperty, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" allowDefinition="Everywhere" allowExeDefinition="MachineToApplication" restartOnExternalChanges="true" />  
    </configSections>  
    <CustomSection fileName="default.txt" alias="alias.txt" maxUsers="1000"  
      maxIdleTime="00:05:00" />  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfigurationPropertyCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Configuration.ConfigurationPropertyCollection"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the ConfigurationPropertyCollection to create a new collection that will contain the <xref:System.Configuration.ConfigurationProperty> objects as they apply to your configuration element.  
  
   
  
## Examples  
 The following example shows how to use the ConfigurationPropertyCollection constructor.  
  
 [!CODE [System.Configuration.ConfigurationProperty#25](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Configuration.ConfigurationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Configuration.ConfigurationProperty property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Configuration.ConfigurationProperty" />
      </Parameters>
      <Docs>
        <param name="property">The &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; to add.</param>
        <summary>Adds a configuration property to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 By default, the Add method will add the specified <xref:System.Configuration.ConfigurationProperty> object, if it is not already contained within the collection.  
  
   
  
## Examples  
 The following example shows how to use the Add method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#26](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all configuration property objects from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Clear method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#20](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#20)]  
  
 The following example shows how to call the above method and save the changes to the configuration file.  
  
 [!CODE [System.Configuration.ConfigurationProperty#21](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">An identifier for the &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; to verify.</param>
        <summary>Specifies whether the configuration property is contained in this collection.</summary>
        <returns>`true` if the specified &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; is contained in the collection; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Contains method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#14](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Configuration.ConfigurationProperty[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Configuration.ConfigurationProperty[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Configuration.ConfigurationProperty[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Array to which to copy.</param>
        <param name="index">Index at which to begin copying.</param>
        <summary>Copies this ConfigurationPropertyCollection to an array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the CopyTo method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#18](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of properties in the collection.</summary>
        <value>The number of properties in the collection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Collections.IEnumerator"&gt; object as it applies to the collection.</summary>
        <returns>The &lt;see cref="T:System.Collections.IEnumerator"&gt; object as it applies to the collection</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the GetEnumerator method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#22](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#22)]  
  
 The following example shows how to call the above method to enumerate the <xref:System.Configuration.ConfigurationProperty> objects in the collection.  
  
 [!CODE [System.Configuration.ConfigurationProperty#23](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
        <value>`true` if access to the &lt;see cref="T:System.Configuration.ConfigurationPropertyCollection"&gt; is synchronized; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to get the IsSynchronized property value.  
  
 [!CODE [System.Configuration.ConfigurationProperty#19](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Configuration.ConfigurationProperty this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationProperty Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; to return.</param>
        <summary>Gets the collection item with the specified name.</summary>
        <value>The &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; with the specified .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the <xref:System.Configuration.ConfigurationPropertyCollection.Count%2A> property.  
  
 [!CODE [System.Configuration.ConfigurationProperty#15](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; to remove.</param>
        <summary>Removes a configuration property from the collection.</summary>
        <returns>`true` if the specified &lt;see cref="T:System.Configuration.ConfigurationProperty"&gt; was removed; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A return value of `false` indicates that the specified <xref:System.Configuration.ConfigurationProperty> object was not contained within the collection.  
  
   
  
## Examples  
 The following example shows how to use the Remove method.  
  
 [!CODE [System.Configuration.ConfigurationProperty#16](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#16)]  
  
 The following example shows how to call the above method and save the changes to the configuration file.  
  
 [!CODE [System.Configuration.ConfigurationProperty#17](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object to synchronize access to the collection.</summary>
        <value>The object to synchronize access to the collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to get the SyncRoot property value.  
  
 [!CODE [System.Configuration.ConfigurationProperty#24](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to which to copy.</param>
        <param name="index">The index location at which to begin copying.</param>
        <summary>Copies this collection to an array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>