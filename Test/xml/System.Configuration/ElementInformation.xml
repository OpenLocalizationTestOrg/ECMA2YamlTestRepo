<Type Name="ElementInformation" FullName="System.Configuration.ElementInformation">
  <TypeSignature Language="C#" Value="public sealed class ElementInformation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ElementInformation extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contains meta-information about an individual element within the configuration. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ElementInformation object contains meta-information about an individual element within the configuration. This object can be used when validating and changing the properties of an individual element.  
  
   
  
## Examples  
 The following example shows how to get the ElementInformation associated with a <xref:System.Configuration.ConfigurationElement> object.  
  
 [!CODE [System.Configuration.ConfigurationElement#80](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#80)]  
  
 The following excerpt shows the configuration used by the previous code example.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<configuration>  
  <configSections>  
    <section name="MyUrls" type="Samples.AspNet.UrlsSection,  
      ConfigurationElement, Version=1.0.0.0, Culture=neutral,  
      PublicKeyToken=null" allowDefinition="Everywhere"  
      allowExeDefinition="MachineToApplication"  
      restartOnExternalChanges="true" />  
  </configSections>  
  <MyUrls name="MyFavorites">  
    <simple name="Contoso" url="http://www.contoso.com" port="8080" />  
    <urls>  
      <clear />  
      <add name="Microsoft" url="http://www.microsoft.com" port="0" />  
    </urls>  
  </MyUrls>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the errors for the associated element and subelements</summary>
        <value>The collection containing the errors for the associated element and subelements</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Errors collection.  
  
 [!CODE [System.Configuration.ConfigurationElement#89](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#89)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is a &lt;xref:System.Configuration.ConfigurationElementCollection&gt; collection.</summary>
        <value>`true` if the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is a &lt;xref:System.Configuration.ConfigurationElementCollection&gt; collection; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the IsCollection property.  
  
 [!CODE [System.Configuration.ConfigurationElement#81](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#81)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocked">
      <MemberSignature Language="C#" Value="public bool IsLocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object cannot be modified.</summary>
        <value>`true` if the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object cannot be modified; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsLocked property returns `true` when the related element is locked by the <xref:System.Configuration.SectionInformation.AllowOverride%2A>, <xref:System.Configuration.SectionInformation.AllowDefinition%2A>, or <xref:System.Configuration.ConfigurationElement.LockAllAttributesExcept%2A> property.  
  
   
  
## Examples  
 The following example shows how to use the IsLocked property.  
  
 [!CODE [System.Configuration.ConfigurationElement#82](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPresent">
      <MemberSignature Language="C#" Value="public bool IsPresent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPresent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is in the configuration file.</summary>
        <value>`true` if the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is in the configuration file; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the IsPresent property.  
  
 [!CODE [System.Configuration.ConfigurationElement#83](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#83)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the line number in the configuration file where the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is defined.</summary>
        <value>The line number in the configuration file where the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object is defined.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the LineNumber property.  
  
 [!CODE [System.Configuration.ConfigurationElement#84](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#84)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Configuration.PropertyInformationCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.PropertyInformationCollection Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.PropertyInformationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Configuration.PropertyInformationCollection"&gt; collection of the properties in the associated &lt;xref:System.Configuration.ConfigurationElement&gt; object.</summary>
        <value>A &lt;see cref="T:System.Configuration.PropertyInformationCollection"&gt; collection of the properties in the associated &lt;xref:System.Configuration.ConfigurationElement&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The properties of a <xref:System.Configuration.ConfigurationElement> object are the attributes and subelements associated with that configuration element in the configuration file.  
  
   
  
## Examples  
 The following example shows how to get the Properties collection.  
  
 [!CODE [System.Configuration.ConfigurationElement#85](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#85)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the source file where the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object originated.</summary>
        <value>The source file where the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object originated.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Configuration.ConfigurationElement> object may be created in a default state, in which case this property returns `null`.  
  
   
  
## Examples  
 The following example shows how to use the Source property.  
  
 [!CODE [System.Configuration.ConfigurationElement#86](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object.</summary>
        <value>The type of the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the Type property.  
  
 [!CODE [System.Configuration.ConfigurationElement#87](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validator">
      <MemberSignature Language="C#" Value="public System.Configuration.ConfigurationValidatorBase Validator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationValidatorBase Validator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationValidatorBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object used to validate the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object.</summary>
        <value>The object used to validate the associated &lt;see cref="T:System.Configuration.ConfigurationElement"&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A validator object is not required, and this property may return `null`.  
  
   
  
## Examples  
 The following example shows how to use the Validator property.  
  
 [!CODE [System.Configuration.ConfigurationElement#88](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#88)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>