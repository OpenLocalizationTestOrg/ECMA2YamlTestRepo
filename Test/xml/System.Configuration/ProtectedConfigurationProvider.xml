<Type Name="ProtectedConfigurationProvider" FullName="System.Configuration.ProtectedConfigurationProvider">
  <TypeSignature Language="C#" Value="public abstract class ProtectedConfigurationProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProtectedConfigurationProvider extends System.Configuration.Provider.ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Is the base class to create providers for encrypting and decrypting protected-configuration data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can encrypt sections of a configuration file to protect sensitive information used by your application. This improves security by making it difficult for unauthorized access even if an attacker gains access to your configuration file.  
  
 The .NET Framework includes two protected configuration providers that can be used to encrypt sections of a configuration file. The <xref:System.Configuration.RsaProtectedConfigurationProvider> class uses the <xref:System.Security.Cryptography.RSACryptoServiceProvider> to encrypt configuration sections. The <xref:System.Configuration.DpapiProtectedConfigurationProvider> class uses the Windows Data Protection API (DPAPI) to encrypt configuration sections.  
  
 You might have a requirement to encrypt sensitive information using an algorithm other than the RSA or DPAPI providers. In this case, you can build your own custom protected-configuration provider. The ProtectedConfigurationProvider is an abstract base class that you must inherit from to create your own protected-configuration provider.  
  
 Whether you use a standard or a custom provider, you must ensure that it is configured with the `add` element in the `providers` section of the `configProtectedData`  configuration section. (See next example.)  
  
 For details, see [Implementing a Protected Configuration Provider](../Topic/Implementing%20a%20Protected%20Configuration%20Provider.md).  
  
> [!NOTE]
>  When ASP.NET encounters encrypted configuration data, it performs decryption transparently using the configured provider. No action is required on your side other than making sure that you configure the required provider.  
  
   
  
## Examples  
 The following example shows how to implement a custom ProtectedConfigurationProvider.  
  
 To be able to configure this provider, as shown in the next configuration excerpt, you must install it in the Global Assembly Cache (GAC). Refer to [Implementing a Protected Configuration Provider](../Topic/Implementing%20a%20Protected%20Configuration%20Provider.md) for more information.  
  
 [!CODE [System.Configuration.ProtectedConfigurationProvider#1](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ProtectedConfigurationProvider#1)]  
  
 The following example shows how to use the previous custom ProtectedConfigurationProvider.  
  
 [!CODE [System.Configuration.UsingProtectedConfigurationProvider#11](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.UsingProtectedConfigurationProvider#11)]  
  
 The following is an excerpt of the configuration file used by the above examples.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  
  <configProtectedData >  
    <providers>  
      <clear />  
      <add keyContainerName="pcKey.txt"   
        name="TripleDESProtectedConfigurationProvider"  
type="Samples.Aspnet.TripleDESProtectedConfigurationProvider, protectedconfigurationproviderlib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=79e01ae0f5cfc66f, processorArchitecture=MSIL" />  
    </providers>  
  
  </configProtectedData >  
  
  <connectionStrings>  
    <add name="NorthwindConnectionString"   
      connectionString="Data Source=webnetue2;Initial Catalog=Northwind;User ID=aspnet_test;Password=test"  
providerName="System.Data.SqlClient" />  
  </connectionStrings>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProtectedConfigurationProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Configuration.ProtectedConfigurationProvider"&gt; class using default settings.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNode Decrypt (System.Xml.XmlNode encryptedNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode Decrypt(class System.Xml.XmlNode encryptedNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedNode" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="encryptedNode">The &lt;xref:System.Xml.XmlNode&gt; object to decrypt.</param>
        <summary>Decrypts the passed &lt;xref:System.Xml.XmlNode&gt; object from a configuration file.</summary>
        <returns>The &lt;xref:System.Xml.XmlNode&gt; object containing decrypted data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use Decrypt method to perform custom decryption.  
  
 [!CODE [System.Configuration.ProtectedConfigurationProvider#2](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ProtectedConfigurationProvider#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNode Encrypt (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode Encrypt(class System.Xml.XmlNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node">The &lt;xref:System.Xml.XmlNode&gt; object to encrypt.</param>
        <summary>Encrypts the passed &lt;xref:System.Xml.XmlNode&gt; object from a configuration file.</summary>
        <returns>The &lt;xref:System.Xml.XmlNode&gt; object containing encrypted data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use Encrypt to perform custom encryption.  
  
 [!CODE [System.Configuration.ProtectedConfigurationProvider#3](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ProtectedConfigurationProvider#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>