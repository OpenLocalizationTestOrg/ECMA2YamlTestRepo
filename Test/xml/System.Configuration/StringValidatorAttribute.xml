<Type Name="StringValidatorAttribute" FullName="System.Configuration.StringValidatorAttribute">
  <TypeSignature Language="C#" Value="public sealed class StringValidatorAttribute : System.Configuration.ConfigurationValidatorAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StringValidatorAttribute extends System.Configuration.ConfigurationValidatorAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Declaratively instructs the .NET Framework to perform string validation on a configuration property. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the StringValidatorAttribute to decorate a configuration property. This is to instruct the .NET Framework to validate the property using the <xref:System.Configuration.StringValidator> and pass to it the value of the decorating parameters.  
  
 You can apply StringValidatorAttribute objects to property types only.  
  
   
  
## Examples  
 The following example shows how to decorate the properties of a custom <xref:System.Configuration.ConfigurationSection> object using the StringValidatorAttribute object.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#2](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Configuration.StringValidatorAttribute"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use this constructor in the attributed model to ensure that the value assigned to the configuration-element property is of a string type.  
  
   
  
## Examples  
 The following example shows how to use the StringValidatorAttribute constructor.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#3](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidCharacters">
      <MemberSignature Language="C#" Value="public string InvalidCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InvalidCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the invalid characters for the property.</summary>
        <value>The string that contains the set of characters that are not allowed for the property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the InvalidCharacters property.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#2](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum length allowed for the string to assign to the property.</summary>
        <value>An integer that indicates the maximum allowed length for the string to assign to the property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the MaxLength property.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#2](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLength">
      <MemberSignature Language="C#" Value="public int MinLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum allowed value for the string to assign to the property.</summary>
        <value>An integer that indicates the allowed minimum length for the string to assign to the property.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the MinLength property.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#2](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatorInstance">
      <MemberSignature Language="C#" Value="public override System.Configuration.ConfigurationValidatorBase ValidatorInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationValidatorBase ValidatorInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationValidatorBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an instance of the &lt;see cref="T:System.Configuration.StringValidator"&gt; class.</summary>
        <value>A current &lt;see cref="T:System.Configuration.StringValidator"&gt; settings in a &lt;xref:System.Configuration.ConfigurationValidatorBase&gt; validator instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You use the ValidatorInstance property to perform string validation by calling its <xref:System.Configuration.StringValidator.Validate%2A> method.  
  
   
  
## Examples  
 The following example shows how to use the ValidatorInstance property.  
  
 [!CODE [System.Configuration.ConfigurationValidatorAttributes#14](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationValidatorAttributes#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>