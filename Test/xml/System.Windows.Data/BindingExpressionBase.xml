<Type Name="BindingExpressionBase" FullName="System.Windows.Data.BindingExpressionBase">
  <TypeSignature Language="C#" Value="public abstract class BindingExpressionBase : System.Windows.Expression, System.Windows.IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract BindingExpressionBase extends System.Windows.Expression implements class System.Windows.IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IWeakEventListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents the base class for &lt;see cref="T:System.Windows.Data.BindingExpression"&gt;, &lt;xref:System.Windows.Data.PriorityBindingExpression&gt;, and &lt;xref:System.Windows.Data.MultiBindingExpression&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about bindings and binding expressions, see "Binding and BindingExpression" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Data.BindingGroup"&gt; that this binding expression belongs to.</summary>
        <value>The &lt;see cref="T:System.Windows.Data.BindingGroup"&gt; that this binding expression belongs to. This property returns `null` if the &lt;xref:System.Windows.Data.BindingExpressionBase&gt; is not part of a  &lt;see cref="T:System.Windows.Data.BindingGroup"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasError">
      <MemberSignature Language="C#" Value="public virtual bool HasError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the parent binding has a failed validation rule.</summary>
        <value>`true` if the parent binding has a failed validation rule; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is identical to the <xref:System.Windows.Data.BindingExpressionBase.HasValidationError%2A> property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidationError">
      <MemberSignature Language="C#" Value="public virtual bool HasValidationError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the parent binding has a failed validation rule.</summary>
        <value>`true` if the parent binding has a failed validation rule; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is identical to the HasValidationError property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the target of the binding has a value that has not been written to the source.</summary>
        <value>`true` if the target has a value that has not been written to the source; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property applies only if <xref:System.Windows.Data.Binding.Mode%2A> property of the parent <xref:System.Windows.Data.Binding> is set to <xref:System.Windows.Data.BindingMode> or <xref:System.Windows.Data.BindingMode>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentBindingBase">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase ParentBindingBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase ParentBindingBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Data.BindingBase"&gt; object from which this &lt;xref:System.Windows.Data.BindingExpressionBase&gt; object is created.</summary>
        <value>The &lt;see cref="T:System.Windows.Data.BindingBase"&gt; object from which this &lt;xref:System.Windows.Data.BindingExpressionBase&gt; object is created.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingStatus Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the status of the binding expression.</summary>
        <value>A &lt;see cref="T:System.Windows.Data.BindingStatus"&gt; value that describes the status of the binding expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.IWeakEventListener.ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="bool IWeakEventListener.ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.IWeakEventListener.ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">The type of the &lt;xref:System.Windows.WeakEventManager&gt; calling this method. This only recognizes manager objects of type &lt;xref:System.Collections.Specialized.CollectionChangedEventManager&gt;.</param>
        <param name="sender">Object that originated the event.</param>
        <param name="e">Event data.</param>
        <summary>This member supports the [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <returns>`true` if the listener handled the event; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the element that is the binding target object of this binding expression.</summary>
        <value>The element that is the binding target object of this binding expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty TargetProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the binding target property of this binding expression.</summary>
        <value>The binding target property of this binding expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSource">
      <MemberSignature Language="C#" Value="public virtual void UpdateSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateSource() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sends the current binding target value to the binding source in &lt;see cref="T:System.Windows.Data.BindingMode"&gt; or &lt;see cref="T:System.Windows.Data.BindingMode"&gt; bindings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There is no default implementation on the base class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTarget">
      <MemberSignature Language="C#" Value="public virtual void UpdateTarget ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTarget() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces a data transfer from the binding source to the binding target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There is no default implementation on the base class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateWithoutUpdate">
      <MemberSignature Language="C#" Value="public bool ValidateWithoutUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValidateWithoutUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs any &lt;see cref="T:System.Windows.Controls.ValidationRule"&gt; objects on the associated &lt;xref:System.Windows.Data.Binding&gt; that have the &lt;xref:System.Windows.Controls.ValidationRule.ValidationStep%2A&gt; property set to &lt;xref:System.Windows.Controls.ValidationStep&gt; or &lt;xref:System.Windows.Controls.ValidationStep&gt;. This method does not update the source.</summary>
        <returns>`true` if the validation rules succeed; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ValidateWithoutUpdate method enables you to run validation rules on a binding without updating the source of the binding. This is useful when you want to validate user input and update the source at different times in an application.  
  
 For example, suppose you have a form to update a data source that contains a submit button. You want to provide feedback to the user if an invalid value is entered before the user attempts to submit the form. You can check the validity of a field by setting the binding's <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> property to <xref:System.Windows.Data.UpdateSourceTrigger> and calling ValidateWithoutUpdate when the <xref:System.Windows.Controls.TextBox> loses focus.  
  
   
  
## Examples  
 The following example demonstrates the scenario that is discussed in the Remarks section. The example enables a user to enter data for a library item and submit the data. The binding for the <xref:System.Windows.Controls.TextBox> named `callNum` has a <xref:System.Windows.Controls.ValidationRule> associated with it. When the <xref:System.Windows.Controls.TextBox> loses focus, the example calls ValidateWithoutUpdate. When the user clicks the submit button, the example calls <xref:System.Windows.Data.BindingExpressionBase.UpdateSource%2A> to commit the changes. The following XAML creates the user interface for the application.  
  
 [!code-xml[BindingExpressionBaseValidateWithoutUpdating#WindowXaml](../../add/codesnippet/Xaml/bindingexpressionbasevalidatewithoutupdating/window1.xaml#windowxaml)]  
  
 The following example shows the logic for the user interface.  
  
 [!code-cs[BindingExpressionBaseValidateWithoutUpdating#WindowLogic](../../add/codesnippet/CSharp/bindingexpressionbasevalidatewithoutupdating/window1.xaml.cs#windowlogic)]
 [!code-vb[BindingExpressionBaseValidateWithoutUpdating#WindowLogic](../../add/codesnippet/VisualBasic/bebvalidatewithoutupdating/window1.xaml.vb#windowlogic)]  
  
 The following example shows the data object and <xref:System.Windows.Controls.ValidationRule> for the application.  
  
 [!code-cs[BindingExpressionBaseValidateWithoutUpdating#Data](../../add/codesnippet/CSharp/bindingexpressionbasevalidatewithoutupdating/data.cs#data)]
 [!code-vb[BindingExpressionBaseValidateWithoutUpdating#Data](../../add/codesnippet/VisualBasic/bebvalidatewithoutupdating/data.vb#data)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationError">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Controls.ValidationError ValidationError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ValidationError ValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Controls.ValidationError"&gt; that caused this instance of &lt;xref:System.Windows.Data.BindingExpressionBase&gt; to be invalid.</summary>
        <value>The &lt;see cref="T:System.Windows.Controls.ValidationError"&gt; that caused this instance of &lt;xref:System.Windows.Data.BindingExpressionBase&gt; to be invalid.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationErrors">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt; ValidationErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Controls.ValidationError&gt; ValidationErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Controls.ValidationError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of &lt;see cref="T:System.Windows.Controls.ValidationError"&gt; objects that caused this instance of &lt;xref:System.Windows.Data.BindingExpressionBase&gt; to be invalid.</summary>
        <value>A collection of &lt;see cref="T:System.Windows.Controls.ValidationError"&gt; objects that caused this instance of &lt;xref:System.Windows.Data.BindingExpressionBase&gt; to be invalid.  The value is `null` if there are no errors.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>