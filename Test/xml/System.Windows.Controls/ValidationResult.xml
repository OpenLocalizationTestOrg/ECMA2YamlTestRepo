<Type Name="ValidationResult" FullName="System.Windows.Controls.ValidationResult">
  <TypeSignature Language="C#" Value="public class ValidationResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationResult extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the result returned by the &lt;see cref="T:System.Windows.Controls.ValidationRule"&gt;.&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt; method that indicates whether the checked value passed the &lt;see cref="T:System.Windows.Controls.ValidationRule"&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a ValidationResult object to report whether the checked value is valid.  
  
 For a detailed discussion of the validation process, see "Data Validation" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md).  
  
   
  
## Examples  
 The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned ValidationResult are set to the appropriate error message and `false` respectively.  
  
 For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  
  
 [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationResult (bool isValid, object errorContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isValid, object errorContent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isValid" Type="System.Boolean" />
        <Parameter Name="errorContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isValid">Whether or not the value checked against the &lt;see cref="T:System.Windows.Controls.ValidationRule"&gt; is valid.</param>
        <param name="errorContent">Information about the invalidity.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  
  
 For a detailed discussion of the validation process, see "Data Validation" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md).  
  
   
  
## Examples  
 The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  
  
 For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  
  
 [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt; instance to compare.</param>
        <summary>Compares the specified instance and the current instance of &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt; for value equality.</summary>
        <returns>`true` if  and this instance of &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt;.have the same values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is called by the operator overrides.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that provides additional information about the invalidity.</summary>
        <value>An object that provides additional information about the invalidity.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  
  
 For a detailed discussion of the validation process, see "Data Validation" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md).  
  
   
  
## Examples  
 The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the ErrorContent property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  
  
 For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  
  
 [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt;.</summary>
        <returns>The hash code for this &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the value checked against the &lt;see cref="T:System.Windows.Controls.ValidationRule"&gt; is valid.</summary>
        <value>`true` if the value is valid; otherwise, `false`. The default value is `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  
  
 For a detailed discussion of the validation process, see "Data Validation" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md).  
  
   
  
## Examples  
 The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the IsValid property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  
  
 For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  
  
 [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">The first instance to compare.</param>
        <param name="right">The second instance to compare.</param>
        <summary>Compares two &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt; objects for value equality.</summary>
        <returns>`true` if the two objects are equal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">The first instance to compare.</param>
        <param name="right">The second instance to compare.</param>
        <summary>Compares two &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt; objects for value inequality.</summary>
        <returns>`true` if the values are not equal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResult">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ValidationResult ValidResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.ValidationResult ValidResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a valid instance of &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt;.</summary>
        <value>A valid instance of &lt;see cref="T:System.Windows.Controls.ValidationResult"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>