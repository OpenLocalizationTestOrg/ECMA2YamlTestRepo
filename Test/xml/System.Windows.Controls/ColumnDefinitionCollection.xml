<Type Name="ColumnDefinitionCollection" FullName="System.Windows.Controls.ColumnDefinitionCollection">
  <TypeSignature Language="C#" Value="public sealed class ColumnDefinitionCollection : System.Collections.Generic.ICollection&lt;System.Windows.Controls.ColumnDefinition&gt;, System.Collections.Generic.IEnumerable&lt;System.Windows.Controls.ColumnDefinition&gt;, System.Collections.Generic.IList&lt;System.Windows.Controls.ColumnDefinition&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ColumnDefinitionCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Windows.Controls.ColumnDefinition&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Controls.ColumnDefinition&gt;, class System.Collections.Generic.IList`1&lt;class System.Windows.Controls.ColumnDefinition&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Windows.Controls.ColumnDefinition&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Windows.Controls.ColumnDefinition&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;System.Windows.Controls.ColumnDefinition&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides access to an ordered, strongly typed collection of &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Controls.ColumnDefinition value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Windows.Controls.ColumnDefinition value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Controls.ColumnDefinition" />
      </Parameters>
      <Docs>
        <param name="value">Identifies the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; to add to the collection.</param>
        <summary>Adds a &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; element to a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the Add method to add a <xref:System.Windows.Controls.ColumnDefinition> to a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#11](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#11)]
 [!code-cs[columndefinitionsgrid#11](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#11)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the content of the &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the Clear method to clear the content of a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#12](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#12)]
 [!code-cs[columndefinitionsgrid#12](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#12)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Controls.ColumnDefinition value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Windows.Controls.ColumnDefinition value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Controls.ColumnDefinition" />
      </Parameters>
      <Docs>
        <param name="value">Identifies the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; that is being tested.</param>
        <summary>Determines whether a given &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; exists within a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <returns>`true` if the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; exists within the collection; otherwise `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the Contains method to determine whether a <xref:System.Windows.Controls.ColumnDefinition> exists in a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#13](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#13)]
 [!code-cs[columndefinitionsgrid#13](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#13)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Controls.ColumnDefinition[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Windows.Controls.ColumnDefinition[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Controls.ColumnDefinition[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">An array of &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects.</param>
        <param name="index">Identifies the index position within  to which the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects are copied.</param>
        <summary>Copies an array of &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects to a given index position within a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ColumnDefinitionCollection> uses a zero-based indexing system.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the total number of items within this instance of &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt;.</summary>
        <value>The total number of items in the collection. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the Count property.  
  
 [!code-vb[columndefinitionsgrid#17](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#17)]
 [!code-cs[columndefinitionsgrid#17](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#17)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Controls.ColumnDefinition value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Windows.Controls.ColumnDefinition value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Controls.ColumnDefinition" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; whose index position is desired.</param>
        <summary>Returns the index position of a given &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; within a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <returns>The index of  if found in the collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use the IndexOf method to determine the index position of a <xref:System.Windows.Controls.ColumnDefinition> within a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#14](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#14)]
 [!code-cs[columndefinitionsgrid#14](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#14)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Controls.ColumnDefinition value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Controls.ColumnDefinition value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Windows.Controls.ColumnDefinition" />
      </Parameters>
      <Docs>
        <param name="index">The position within the collection where the item is inserted.</param>
        <param name="value">The &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; to insert.</param>
        <summary>Inserts a &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; at the specified index position within a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ColumnDefinitionCollection> uses a zero-based indexing system.  
  
   
  
## Examples  
 The following example demonstrates how to use the Insert method to insert a <xref:System.Windows.Controls.ColumnDefinition> to a specific  position within a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#14](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#14)]
 [!code-cs[columndefinitionsgrid#14](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#14)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt; is read-only.</summary>
        <value>`true` if the collection is read-only; otherwise `false`. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to get the value of the IsReadOnly property.  
  
 [!code-vb[columndefinitionsgrid#10](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#10)]
 [!code-cs[columndefinitionsgrid#10](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#10)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether access to this &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt; is synchronized (thread safe).</summary>
        <value>`true` if access to this collection is synchronized; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ColumnDefinition this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ColumnDefinition Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ColumnDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The current item in the collection.</param>
        <summary>Gets a value that indicates the current item within a &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt;.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ColumnDefinitionCollection> uses a zero-based indexing system.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Windows.Controls.ColumnDefinition value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Windows.Controls.ColumnDefinition value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Controls.ColumnDefinition" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; to remove from the collection.</param>
        <summary>Removes a &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; from a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <returns>`true` if the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; was found in the collection and removed; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The position within the collection at which the &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; is removed.</param>
        <summary>Removes a &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; from a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt; at the specified index position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ColumnDefinitionCollection> uses a zero-based indexing system.  
  
   
  
## Examples  
 The following example demonstrates how to use the RemoveAt method to remove a <xref:System.Windows.Controls.ColumnDefinition> to a <xref:System.Windows.Controls.ColumnDefinitionCollection> at a specific  position.  
  
 [!code-vb[columndefinitionsgrid#15](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#15)]
 [!code-cs[columndefinitionsgrid#15](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#15)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The position within the collection at which the first &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; is removed.</param>
        <param name="count">The total number of &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects to remove from the collection.</param>
        <summary>Removes a range of &lt;see cref="T:System.Windows.Controls.ColumnDefinition"&gt; objects from a &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ColumnDefinitionCollection> uses a zero-based indexing system.  
  
   
  
## Examples  
 The following example demonstrates how to use the RemoveRange method to remove a range of <xref:System.Windows.Controls.ColumnDefinition> elements from a <xref:System.Windows.Controls.ColumnDefinitionCollection>.  
  
 [!code-vb[columndefinitionsgrid#16](../../add/codesnippet/VisualBasic/ColumnDefinitionsGrid/Window1.xaml.vb#16)]
 [!code-cs[columndefinitionsgrid#16](../../add/codesnippet/CSharp/columndefinitions_grid/Window1.xaml.cs#16)]  
  
 To view the complete sample, see [How to: Manipulate Columns and Rows by Using ColumnDefinitionsCollections and RowDefinitionsCollections](../Topic/How%20to:%20Manipulate%20Columns%20and%20Rows%20by%20Using%20ColumnDefinitionsCollections%20and%20RowDefinitionsCollections.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt;.</summary>
        <value>An object that can be used to synchronize access to the &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Windows.Controls.ColumnDefinition&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Windows.Controls.ColumnDefinition&gt; IEnumerable&lt;ColumnDefinition&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Windows.Controls.ColumnDefinition&gt; System.Collections.Generic.IEnumerable&lt;System.Windows.Controls.ColumnDefinition&gt;.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Windows.Controls.ColumnDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">A zero-based &lt;see cref="T:System.Array"&gt; that receives the copied items from the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <param name="index">The first position in the specified &lt;see cref="T:System.Array"&gt; to receive the copied contents.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.ICollection> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt;.</summary>
        <returns>An &lt;see cref="T:System.Collections.IEnumerator"&gt; object that can be used to iterate through the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Object"&gt; to add to the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Add%2A?displayProperty=fullName&gt;.</summary>
        <returns>The position into which the new element was inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Object"&gt; to locate in the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Contains%2A?displayProperty=fullName&gt;.</summary>
        <returns>`true` if the &lt;see cref="T:System.Object"&gt; is found in the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Object"&gt; to locate in the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.IndexOf%2A?displayProperty=fullName&gt;.</summary>
        <returns>The index of  if found in the list; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which to insert the &lt;see cref="T:System.Object"&gt;.</param>
        <param name="value">The &lt;see cref="T:System.Object"&gt; to insert into the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Insert%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName&gt;.</summary>
        <value>`true` if the the &lt;see cref="T:System.Windows.Controls.ColumnDefinitionCollection"&gt; has a fixed size; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get or set.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Item%2A?displayProperty=fullName&gt;.</summary>
        <value>The element at the specified index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The &lt;see cref="T:System.Object"&gt; to remove from the &lt;xref:System.Windows.Controls.ColumnDefinitionCollection&gt;.</param>
        <summary>For a description of this member, see &lt;xref:System.Collections.IList.Remove%2A?displayProperty=fullName&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Controls.ColumnDefinitionCollection> instance is cast to an <xref:System.Collections.IList> interface.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>