<Type Name="RichTextBox" FullName="System.Windows.Controls.RichTextBox">
  <TypeSignature Language="C#" Value="public class RichTextBox : System.Windows.Controls.Primitives.TextBoxBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi RichTextBox extends System.Windows.Controls.Primitives.TextBoxBase implements class System.Windows.Markup.IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Inherit)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Document")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a rich editing control which operates on &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt; objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.FlowDocument> is the only supported child element for a RichTextBox.  
  
> [!IMPORTANT]
>  RichTextBox has built-in handling for the bubbling  <xref:System.Windows.UIElement.MouseUp> and <xref:System.Windows.UIElement.MouseDown> events.  Consequently, custom event handlers that listen for `MouseUp` or `MouseDown` events from a RichTextBox will never be called.  If you need to respond to these events, listen for the tunneling <xref:System.Windows.UIElement.PreviewMouseUp> and <xref:System.Windows.UIElement.PreviewMouseDown> events instead, or register the handlers with the <xref:System.Windows.EventSetter.HandledEventsToo%2A> argument (this latter option is only available through code). Do not mark the event handled unless you deliberately want to disable RichTextBox native handling of these events, and be aware that this has notable effects on the control's [!INCLUDE[TLA2#tla_ui](../../add/includes/tla2sharptla-ui-md.md)].  
  
 While RichTextBox supports copying and pasting of images, certain scenarios are currently unsupported and may not work properly.  The following table summarizes these scenarios and expected results.  
  
|Image Copy Source|Image Paste Result|  
|-----------------------|------------------------|  
|Image source is a graphic metafile|No image is pasted|  
|Image source uses relative path or link|Garbled or blank image is pasted|  
|Image source link does not end with an expected image format (.PNG, .JPG, .GIF)|Garbled or blank image is pasted|  
|Image source copied from malformed RichText (RTF)|Link to image source is pasted (rather than image)|  
  
 Pasting HTML content into a RichTextBox might result in unexpected behavior because RichTextBox uses RTF format rather than directly using HTML format.  
  
 Text always wraps in a RichTextBox. If you do not want text to wrap then set the <xref:System.Windows.Documents.FlowDocument.PageWidth%2A> on the <xref:System.Windows.Documents.FlowDocument> to be larger than the width of the RichTextBox. However, once the page width is reached the text still wraps.  
  
 Horizontally and vertically aligning content within a RichTextBox is done with the <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A> and <xref:System.Windows.Controls.Control.VerticalContentAlignment%2A> properties. Aligning the RichTextBox within the layout of the page is done with the <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> and <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> properties.  
  
 Scrollbars are not visible on a RichTextBox by default. To make a scrollbar visible, set the <xref:System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibility%2A> property to <xref:System.Windows.Controls.ScrollBarVisibility> or <xref:System.Windows.Controls.ScrollBarVisibility>.  
  
 Usually, the <xref:System.Windows.Controls.Primitives.TextBoxBase.TextChanged> event should be used to detect when the text in a <xref:System.Windows.Controls.TextBox> or RichTextBox changes, rather then <xref:System.Windows.UIElement.KeyDown> as you might expect. For an example, see [How to: Detect When Text in a TextBox Has Changed](../Topic/How%20to:%20Detect%20When%20Text%20in%20a%20TextBox%20Has%20Changed.md).  
  
 RichTextBox supports a variety of keyboard commands. For a list of keyboard commands, see <xref:System.Windows.Documents.EditingCommands>.  
  
 Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
   
  
## Examples  
 The following example declares a RichTextBox that contains a simple <xref:System.Windows.Documents.FlowDocument>.  
  
 [!code-xml[RichTextBoxSnippets#_RTB_XAML](../../add/codesnippet/Xaml/RichTextBoxSnippets/Window1.xaml#_rtb_xaml)]  
  
 [!code-vb[RichTextBoxMiscSnippets_procedural_snip#RichTextBoxCodeOnlyExample](../../add/codesnippet/VisualBasic/RichTextBoxMiscSnippets_procedural_snip.textmiscsnippets_procedural/richtextboxexample.vb#richtextboxcodeonlyexample)]
 [!code-cs[RichTextBoxMiscSnippets_procedural_snip#RichTextBoxCodeOnlyExample](../../add/codesnippet/CSharp/RichTextBoxMiscSnippets_procedural_snip.TextMiscSnippets_procedural/RichTextBoxExample.cs#richtextboxcodeonlyexample)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RichTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new, default instance of the &lt;see cref="T:System.Windows.Controls.RichTextBox"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor creates an empty <xref:System.Windows.Documents.FlowDocument> that is associated with the Document property.  Specifically, the empty <xref:System.Windows.Documents.FlowDocument> contains a single <xref:System.Windows.Documents.Paragraph>, which contains a single <xref:System.Windows.Documents.Run> which contains no text.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RichTextBox (System.Windows.Documents.FlowDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.FlowDocument document) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="document" Type="System.Windows.Documents.FlowDocument" />
      </Parameters>
      <Docs>
        <param name="document">A &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt; to be added as the initial contents of the new &lt;xref:System.Windows.Controls.RichTextBox&gt;.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Controls.RichTextBox"&gt; class, adding a specified &lt;xref:System.Windows.Documents.FlowDocument&gt; as the initial content.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates use of this constructor.  
  
 [!code-vb[RichTextBoxSnippets#_RTB_Constructor](../../add/codesnippet/VisualBasic/richtextboxsnippets/window1.xaml.vb#_rtb_constructor)]
 [!code-cs[RichTextBoxSnippets#_RTB_Constructor](../../add/codesnippet/CSharp/RichTextBoxSnippets/Window1.xaml.cs#_rtb_constructor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaretPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer CaretPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer CaretPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the position of the input caret.</summary>
        <value>A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; object specifying the position of the input caret.  
  
 By default, the caret is at the first insertion position at the beginning of the content hosted by the &lt;xref:System.Windows.Controls.RichTextBox&gt;. See &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; for more information on text position terminology like "insertion position".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates the use of this property.  
  
 [!code-vb[RichTextBoxSnippets#_RTB_CaretPosition](../../add/codesnippet/VisualBasic/richtextboxsnippets/window1.xaml.vb#_rtb_caretposition)]
 [!code-cs[RichTextBoxSnippets#_RTB_CaretPosition](../../add/codesnippet/CSharp/RichTextBoxSnippets/Window1.xaml.cs#_rtb_caretposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.FlowDocument Document { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.FlowDocument Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.FlowDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt; that represents the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <value>A &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt; object that represents the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.  
  
 By default, this property is set to an empty &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt;.  Specifically, the empty &lt;see cref="T:System.Windows.Documents.FlowDocument"&gt; contains a single &lt;xref:System.Windows.Documents.Paragraph&gt;, which contains a single &lt;xref:System.Windows.Documents.Run&gt; which contains no text.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A FlowDocument may only be hosted by a single <xref:System.Windows.Controls.RichTextBox>.  Specifying a single FlowDocument as the contents of multiple <xref:System.Windows.Controls.RichTextBox> controls is not supported.  
  
   
  
## Examples  
 The following example illustrates the use of this property.  
  
 [!code-vb[RichTextBoxSnippets#_RTB_Document](../../add/codesnippet/VisualBasic/richtextboxsnippets/window1.xaml.vb#_rtb_document)]
 [!code-cs[RichTextBoxSnippets#_RTB_Document](../../add/codesnippet/CSharp/RichTextBoxSnippets/Window1.xaml.cs#_rtb_document)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextSpellingErrorPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextSpellingErrorPosition (System.Windows.Documents.TextPointer position, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextSpellingErrorPosition(class System.Windows.Documents.TextPointer position, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="position">A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; indicating a position from which to search for the next spelling error.</param>
        <param name="direction">A &lt;see cref="T:System.Windows.Documents.LogicalDirection"&gt; in which to search for the next spelling error, starting at the specified .</param>
        <summary>Returns a &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; that points to the next spelling error in the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <returns>A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; that points to the next spelling error in the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;, or `null` if no next spelling error exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionFromPoint (System.Windows.Point point, bool snapToText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionFromPoint(valuetype System.Windows.Point point, bool snapToText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="snapToText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">A &lt;xref:System.Windows.Point&gt; object specifying the position to retrieve a &lt;xref:System.Windows.Documents.TextPointer&gt; for.</param>
        <param name="snapToText">If `true`, this method always returns a &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; specifying the closest insertion position for the &lt;xref:System.Windows.Point&gt; specified, regardless or whether or not the supplied &lt;xref:System.Windows.Point&gt; is inside a character's bounding box.  
  
 If `false`, this method returns `null` if the specified &lt;xref:System.Windows.Point&gt; does not fall within any character bounding box.</param>
        <summary>Returns a &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; that points to the insertion point closest to the specified position.</summary>
        <returns>A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; specifying the closest insertion position for the supplied point, or `null` if  is `false` and the supplied &lt;xref:System.Windows.Point&gt; is not within any character's bounding box. Note that the &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; returned is usually the position between two characters. Use the &lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt; property of the returned &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; to determine which of the two characters the &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; corresponds to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.RichTextBox> uses a standard coordinate system with the origin located at the upper-left corner of the <xref:System.Windows.Controls.RichTextBox>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpellingError">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingError GetSpellingError (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Controls.SpellingError GetSpellingError(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; that specifies a position and logical direction that resolves to a character to examine for a spelling error. Use the &lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt; property of this &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; to specify the direction of the character to examine.</param>
        <summary>Returns a &lt;see cref="T:System.Windows.Controls.SpellingError"&gt; object associated with any spelling error at a specified position in the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <returns>A &lt;see cref="T:System.Windows.Controls.SpellingError"&gt; object containing the details of the spelling error found at the character indicated by , or `null` if no spelling error exists at the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Documents.TextPointer> like  usually specifies a position between two characters. Use the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property of  to specify which character to examine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpellingErrorRange">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextRange GetSpellingErrorRange (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextRange GetSpellingErrorRange(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">A &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; that specifies a position and logical direction that resolves to a character to examine for a spelling error. Use the &lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt; property of this &lt;see cref="T:System.Windows.Documents.TextPointer"&gt; to specify the direction of the character to examine.</param>
        <summary>Returns a &lt;see cref="T:System.Windows.Documents.TextRange"&gt; object covering any misspelled word at a specified position in the contents of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <returns>A &lt;see cref="T:System.Windows.Documents.TextRange"&gt; object covering any misspelled word that includes the character specified by , or `null` if no spelling error exists at the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Documents.TextPointer> like  usually specifies a position between two characters. Use the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property of  to specify which character to examine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDocumentEnabled">
      <MemberSignature Language="C#" Value="public bool IsDocumentEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDocumentEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can interact with &lt;see cref="T:System.Windows.UIElement"&gt; and &lt;xref:System.Windows.ContentElement&gt; objects within the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <value>`true` if the user can interact with &lt;see cref="T:System.Windows.UIElement"&gt; and &lt;xref:System.Windows.ContentElement&gt; objects within the &lt;xref:System.Windows.Controls.RichTextBox&gt;; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IsDocumentEnabled is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](../Topic/.NET%20Framework%20Versions%20and%20Dependencies.md).  
  
   
  
## Examples  
 The following example creates <xref:System.Windows.Controls.CheckBox> and a <xref:System.Windows.Controls.RichTextBox> that contains a <xref:System.Windows.Documents.Hyperlink> and a <xref:System.Windows.Controls.Button>.  The IsDocumentEnabled property of the <xref:System.Windows.Controls.RichTextBox> is bound to the <xref:System.Windows.Controls.Primitives.ToggleButton.IsChecked%2A> property of the <xref:System.Windows.Controls.CheckBox>.  When the user selects the <xref:System.Windows.Controls.CheckBox>, the user can interact with the <xref:System.Windows.Controls.Button> and <xref:System.Windows.Documents.Hyperlink>. When the user clears the <xref:System.Windows.Controls.CheckBox>, the <xref:System.Windows.Controls.Button> and <xref:System.Windows.Documents.Hyperlink> are disabled.  
  
 [!CODE [RTBIsDocumentEnabled#1](../CodeSnippet/VS_Snippets_Wpf/RTBIsDocumentEnabled#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDocumentEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDocumentEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDocumentEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.RichTextBox.IsDocumentEnabled%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator that can iterate the logical children of the `RichTextBox`.</summary>
        <value>An enumerator for the logical children.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">A &lt;xref:System.Windows.Size&gt; structure specifying constraints on the size of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</param>
        <summary>Called to re-measure the &lt;see cref="T:System.Windows.Controls.RichTextBox"&gt;.</summary>
        <returns>A &lt;xref:System.Windows.Size&gt; structure indicating the new size of the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides <xref:System.Windows.Controls.Control.MeasureOverride%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns an &lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer"&gt; object for this &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <returns>An &lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer"&gt; object for this &lt;xref:System.Windows.Controls.RichTextBox&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpiScaleInfo, System.Windows.DpiScale newDpiScaleInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpiScaleInfo, valuetype System.Windows.DpiScale newDpiScaleInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpiScaleInfo" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpiScaleInfo" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpiScaleInfo">The previous DPI scale setting.</param>
        <param name="newDpiScaleInfo">The new DPI scale setting.</param>
        <summary>Called when the DPI at which this Rich Text Box is rendered changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextSelection Selection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextSelection Selection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Windows.Documents.TextSelection"&gt; object containing the current selection in the &lt;xref:System.Windows.Controls.RichTextBox&gt;.</summary>
        <value>A &lt;see cref="T:System.Windows.Documents.TextSelection"&gt; object containing the current selection in the &lt;xref:System.Windows.Controls.RichTextBox&gt;.  
  
 The default returned &lt;see cref="T:System.Windows.Documents.TextSelection"&gt; has an &lt;xref:System.Windows.Documents.TextRange.IsEmpty%2A&gt; property value of `True`. An empty &lt;see cref="T:System.Windows.Documents.TextSelection"&gt; renders as a caret in the text area with no selection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Windows.Documents.TextRange.Select%2A> method to programmatically select content.  
  
   
  
## Examples  
 The following example illustrates the use of this property.  
  
 [!code-vb[RichTextBoxSnippets#_RTB_Selection](../../add/codesnippet/VisualBasic/richtextboxsnippets/window1.xaml.vb#_rtb_selection)]
 [!code-cs[RichTextBoxSnippets#_RTB_Selection](../../add/codesnippet/CSharp/RichTextBoxSnippets/Window1.xaml.cs#_rtb_selection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeDocument">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether or not the effective value of the &lt;xref:System.Windows.Controls.RichTextBox.Document%2A&gt; property should be serialized during serialization of a &lt;xref:System.Windows.Controls.RichTextBox&gt; object.</summary>
        <returns>`true` if the &lt;xref:System.Windows.Controls.RichTextBox.Document%2A&gt; property should be serialized; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to add as a child.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string to add to the object.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>