<Type Name="Panel" FullName="System.Windows.Controls.Panel">
  <TypeSignature Language="C#" Value="public abstract class Panel : System.Windows.FrameworkElement, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Panel extends System.Windows.FrameworkElement implements class System.Windows.Markup.IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Children")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects in [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] applications.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Panel contains a collection of <xref:System.Windows.UIElement> objects, which are in the <xref:System.Windows.Controls.Panel.Children%2A> property. Adding a <xref:System.Windows.UIElement> child to a Panel implicitly adds it to the <xref:System.Windows.Controls.UIElementCollection> for the Panel element.  
  
 [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] provides a comprehensive suite of derived Panel implementations, enabling many complex layouts. If you want to implement new layout containers, use the <xref:System.Windows.FrameworkElement.MeasureOverride%2A> and <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> methods. For a demonstration of how to use these methods, see [Create a Custom Content-Wrapping Panel Sample](http://go.microsoft.com/fwlink/?LinkID=159979).  
  
 Panel elements do not receive mouse or stylus events if a <xref:System.Windows.Controls.Panel.Background%2A> is not defined. If you need to handle mouse or stylus events but do not want a background for your Panel, use <xref:System.Windows.Media.Brushes.Transparent%2A>.  
  
 Panel elements do not receive focus by default. To compel a panel element to receive focus, set the <xref:System.Windows.UIElement.Focusable%2A> property to `true`.  
  
   
  
## Examples  
 The following example shows how to use the <xref:System.Windows.Controls.Panel.Children%2A> property to add two <xref:System.Windows.Controls.Button> objects to a <xref:System.Windows.Controls.StackPanel>.  
  
 [!CODE [StackPanel_snip#StackPanelExampleWholePage](../CodeSnippet/VS_Snippets_Wpf/StackPanel_snip#stackpanelexamplewholepage)]  
  
 [!code-vb[Stackpanel_Procedural_snip#StackPanelExampleWholePage](../../add/codesnippet/VisualBasic/stackpanel_vb/stackpanelexample.vb#stackpanelexamplewholepage)]
 [!code-cs[Stackpanel_Procedural_snip#StackPanelExampleWholePage](../../add/codesnippet/CSharp/Stackpanel_csharp/StackpanelExample.cs#stackpanelexamplewholepage)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Panel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Controls.Panel"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a &lt;see cref="T:System.Windows.Media.Brush"&gt; that is used to fill the area between the borders of a &lt;xref:System.Windows.Controls.Panel&gt;.</summary>
        <value>A &lt;see cref="T:System.Windows.Media.Brush"&gt;. This default value is `null`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Panel> elements do not receive mouse or stylus events if a Background is not defined. If you need to handle mouse or stylus events but do not want a background for your <xref:System.Windows.Controls.Panel>, use <xref:System.Windows.Media.Brushes.Transparent%2A>.  
  
<a name="dependencyPropertyInfo_Background"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Panel.BackgroundProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
   
  
## Examples  
 The following example sets the Background of a <xref:System.Windows.Controls.Grid> to a <xref:System.Windows.Media.RadialGradientBrush>.  
  
 [!CODE [PanelBackground#1](../CodeSnippet/VS_Snippets_Wpf/panelbackground#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Panel.Background%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.UIElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.UIElementCollection Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Windows.Controls.UIElementCollection"&gt; of child elements of this &lt;xref:System.Windows.Controls.Panel&gt;.</summary>
        <value>A &lt;see cref="T:System.Windows.Controls.UIElementCollection"&gt;. The default is an empty &lt;see cref="T:System.Windows.Controls.UIElementCollection"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Children collection of a <xref:System.Windows.Controls.Panel> element can only consist of <xref:System.Windows.UIElement> objects. Adding a <xref:System.Windows.UIElement> child to a <xref:System.Windows.Controls.Panel> implicitly adds it to the <xref:System.Windows.Controls.UIElementCollection> for the <xref:System.Windows.Controls.Panel> element.  
  
 Do not use this collection with derived <xref:System.Windows.Controls.Panel> classes; use the <xref:System.Windows.Controls.Panel.InternalChildren%2A> collection instead.  
  
 This property returns `null` if the <xref:System.Windows.Controls.Panel> is data bound.  
  
   
  
## Examples  
 The following code example demonstrates how to use the Children property to add a <xref:System.Windows.UIElement> child to a <xref:System.Windows.Controls.Panel> element.  
  
 [!code-cs[framesnips#FrameNavigateSetup](../../add/codesnippet/CSharp/FrameSnips/Window1.xaml.cs#framenavigatesetup)]
 [!code-vb[framesnips#FrameNavigateSetup](../../add/codesnippet/VisualBasic/framesnips/window1.xaml.vb#framenavigatesetup)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUIElementCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Controls.UIElementCollection CreateUIElementCollection (System.Windows.FrameworkElement logicalParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Controls.UIElementCollection CreateUIElementCollection(class System.Windows.FrameworkElement logicalParent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="logicalParent">The logical parent element of the collection to be created.</param>
        <summary>Creates a new &lt;see cref="T:System.Windows.Controls.UIElementCollection"&gt;.</summary>
        <returns>An ordered collection of elements that have the specified logical parent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the generated <xref:System.Windows.Controls.UIElementCollection> to cache information about child elements or to perform incremental layout updates.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index position of the &lt;see cref="T:System.Windows.Media.Visual"&gt; child.</param>
        <summary>Gets a &lt;see cref="T:System.Windows.Media.Visual"&gt; child of this &lt;xref:System.Windows.Controls.Panel&gt; at the specified index position.</summary>
        <returns>A &lt;see cref="T:System.Windows.Media.Visual"&gt; child of the parent &lt;xref:System.Windows.Controls.Panel&gt; element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetZIndex">
      <MemberSignature Language="C#" Value="public static int GetZIndex (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetZIndex(class System.Windows.UIElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element">The element for which to retrieve the &lt;xref:System.Windows.Controls.Panel.ZIndex%2A&gt; value.</param>
        <summary>Gets the value of the &lt;xref:System.Windows.Controls.Panel.ZIndex%2A&gt; property for a given element.</summary>
        <returns>The &lt;xref:System.Windows.Controls.Panel.ZIndex%2A&gt; position of the element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasLogicalOrientation">
      <MemberSignature Language="C#" Value="protected virtual bool HasLogicalOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasLogicalOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this &lt;see cref="T:System.Windows.Controls.Panel"&gt; arranges its descendants in a single dimension.</summary>
        <value>`true` if the orientation of the &lt;see cref="T:System.Windows.Controls.Panel"&gt; is in one dimension; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Among predefined panel elements, only <xref:System.Windows.Controls.StackPanel> returns `true`, because its orientation is in a single dimension.  Subclasses of <xref:System.Windows.Controls.Panel> can override this property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasLogicalOrientationPublic">
      <MemberSignature Language="C#" Value="public bool HasLogicalOrientationPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasLogicalOrientationPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this &lt;see cref="T:System.Windows.Controls.Panel"&gt; arranges its descendants in a single dimension.</summary>
        <value>`true` if the orientation of the &lt;see cref="T:System.Windows.Controls.Panel"&gt; is in one dimension; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Among predefined panel elements, only <xref:System.Windows.Controls.StackPanel> returns `true`, because its orientation is in a single dimension.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalChildren">
      <MemberSignature Language="C#" Value="protected System.Windows.Controls.UIElementCollection InternalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.UIElementCollection InternalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Windows.Controls.UIElementCollection"&gt; of child elements.</summary>
        <value>An ordered collection of &lt;see cref="T:System.Windows.UIElement"&gt; objects. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned collection includes items that are added directly in code, and also items that are generated by data binding.  
  
 Classes that are derived from <xref:System.Windows.Controls.Panel> should use this property, instead of the <xref:System.Windows.Controls.Panel.Children%2A> property, for internal overrides such as <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemsHost">
      <MemberSignature Language="C#" Value="public bool IsItemsHost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsItemsHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates that this &lt;see cref="T:System.Windows.Controls.Panel"&gt; is a container for [!INCLUDE[TLA#tla_ui](../../add/includes/tlasharptla-ui-md.md)] items that are generated by an &lt;xref:System.Windows.Controls.ItemsControl&gt;.</summary>
        <value>`true` if this instance of &lt;see cref="T:System.Windows.Controls.Panel"&gt; is an items host; otherwise, `false`. The default value is `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot bind data to this property.  
  
<a name="dependencyPropertyInfo_IsItemsHost"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Controls.Panel.IsItemsHostProperty>|  
|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>|  
  
   
  
## Examples  
 The following example uses a <xref:System.Windows.Controls.ControlTemplate> to create a horizontal <xref:System.Windows.Controls.ListBox>. The horizontal <xref:System.Windows.Controls.StackPanel> is specified within the <xref:System.Windows.Controls.ControlTemplate>. The IsItemsHost property is set to `true` on the <xref:System.Windows.Controls.StackPanel>, which indicates that the generated items should be placed in the panel. When you specify it this way, the <xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A> cannot be replaced by the user of the control without using a <xref:System.Windows.Controls.ControlTemplate>. Therefore, do this only if you know that you do not want the panel to be replaced without the use of a template.  
  
 [!CODE [StylingIntroSample#ListBoxCT](../CodeSnippet/VS_Snippets_Wpf/StylingIntroSample#listboxct)]  
  
 Alternatively, you can set the <xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A?displayProperty=fullName> property. The following example sets the <xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A> in a <xref:System.Windows.Style> of a <xref:System.Windows.Controls.ListBox>.  
  
 [!CODE [listboxhorizontal#1](../CodeSnippet/VS_Snippets_Wpf/ListBoxHorizontal#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemsHostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsItemsHostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsItemsHostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Panel.IsItemsHost%2A&gt; dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator that can iterate the logical child elements of this &lt;see cref="T:System.Windows.Controls.Panel"&gt; element.</summary>
        <value>An &lt;see cref="T:System.Collections.IEnumerator"&gt;. This property has no default value.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalOrientation">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Controls.Orientation LogicalOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Orientation LogicalOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The &lt;see cref="T:System.Windows.Controls.Orientation"&gt; of the panel, if the panel supports layout in only a single dimension.</summary>
        <value>The &lt;see cref="T:System.Windows.Controls.Orientation"&gt; of the panel. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Subclasses of <xref:System.Windows.Controls.Panel> can override this property. If <xref:System.Windows.Controls.Panel.HasLogicalOrientation%2A> is `false`, this property value should be ignored.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalOrientationPublic">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Orientation LogicalOrientationPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Orientation LogicalOrientationPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The &lt;see cref="T:System.Windows.Controls.Orientation"&gt; of the panel, if the panel supports layout in only a single dimension.</summary>
        <value>The &lt;see cref="T:System.Windows.Controls.Orientation"&gt; of the panel. This property has no default value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.Windows.Controls.Panel.HasLogicalOrientation%2A> is `false`, this property value should be ignored.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsItemsHostChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsItemsHostChanged (bool oldIsItemsHost, bool newIsItemsHost);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldIsItemsHost" Type="System.Boolean" />
        <Parameter Name="newIsItemsHost" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldIsItemsHost">The old property value.</param>
        <param name="newIsItemsHost">The new property value.</param>
        <summary>Indicates that the &lt;xref:System.Windows.Controls.Panel.IsItemsHost%2A&gt; property value has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected override void OnRender (System.Windows.Media.DrawingContext dc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRender(class System.Windows.Media.DrawingContext dc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="dc">The &lt;see cref="T:System.Windows.Media.DrawingContext"&gt; object to draw.</param>
        <summary>Draws the content of a &lt;see cref="T:System.Windows.Media.DrawingContext"&gt; object during the render pass of a &lt;xref:System.Windows.Controls.Panel&gt; element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="visualAdded">The &lt;see cref="T:System.Windows.Media.Visual"&gt; that was added to the collection.</param>
        <param name="visualRemoved">The &lt;see cref="T:System.Windows.Media.Visual"&gt; that was removed from the collection.</param>
        <summary>Invoked when the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; of a visual object is modified.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Panel.ZIndex%2A> values are automatically recalculated when child elements are added to or removed from the collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetZIndex">
      <MemberSignature Language="C#" Value="public static void SetZIndex (System.Windows.UIElement element, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetZIndex(class System.Windows.UIElement element, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="element">The element on which to apply the property value.</param>
        <param name="value">The order on the z-plane in which this element appears.</param>
        <summary>Sets the value of the &lt;xref:System.Windows.Controls.Panel.ZIndex%2A&gt; attached property for a given element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The greater the  of a given , the more likely the  is to appear in the foreground. Likewise, if an  has a relatively low , the  will likely appear in the background. For example, an  that has a  of 5 will appear above an  that has a  of 4, which in turn will appear above an  that has a value of 3, and so on. Negative values are allowed, and they continue this precedence pattern.  
  
 Members of a <xref:System.Windows.Controls.Panel.Children%2A> collection that have equal <xref:System.Windows.Controls.Panel.ZIndex%2A> values are rendered in the order in which they appear in the visual tree. You can determine the index position of a child by iterating the members of the <xref:System.Windows.Controls.Panel.Children%2A> collection.  
  
   
  
## Examples  
 The following example demonstrates in code how to set the value of the <xref:System.Windows.Controls.Panel.ZIndex%2A> property (by using the SetZIndex method).  
  
 [!code-cs[canvasz-order#2](../../add/codesnippet/CSharp/CanvasZ-Order/CanvasZ-Order.cs#2)]
 [!code-vb[canvasz-order#2](../../add/codesnippet/VisualBasic/CanvasZ_order/CanvasZ-Order.vb#2)]
 [!code-cpp[canvasz-order#2](../../add/codesnippet/CPP/canvasz-order/CanvasZ-Order.cpp#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeChildren">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determines whether the &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection of a panel should be serialized.</summary>
        <returns>`true` if the &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection should be serialized; otherwise, `false`. The &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection is only serialized if it is not empty and not `null`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to add as a child.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string to add to the object.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](../../add/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of child &lt;see cref="T:System.Windows.Media.Visual"&gt; objects in this instance of &lt;xref:System.Windows.Controls.Panel&gt;.</summary>
        <value>The number of child &lt;see cref="T:System.Windows.Media.Visual"&gt; objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZIndexProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ZIndexProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ZIndexProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the &lt;xref:System.Windows.Controls.Panel.ZIndex%2A&gt; attached property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>