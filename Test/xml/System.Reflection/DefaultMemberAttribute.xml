<Type Name="DefaultMemberAttribute" FullName="System.Reflection.DefaultMemberAttribute">
  <TypeSignature Language="C#" Value="public sealed class DefaultMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DefaultMemberAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Interface)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the member of a type that is the default member used by &lt;xref:System.Type.InvokeMember%2A&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A property is imported as an indexer (default indexed property in Visual Basic) if the property has arguments and if the name of the property or one of its accessors matches the name specified by the DefaultMemberAttribute. If the DefaultMemberAttribute is not present on the containing type, then the type does not have an indexer. The C# compiler emits the DefaultMemberAttribute on any type containing an indexer. In C# it is an error to manually attribute a type with the DefaultMemberAttribute if the type also declares an indexer.  
  
   
  
## Examples  
 The following example uses the DefaultMemberAttribute attribute to make the `Age` property the default member of the `MyClass` class.  
  
 [!CODE [Type_GetDefaultMembers#1](../CodeSnippet/VS_Snippets_CLR/Type_GetDefaultMembers#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultMemberAttribute (string memberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberName">A `String` containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty `String` as the name of the member.  
  
 The default member of a type is marked with the `DefaultMemberAttribute` custom attribute or marked in COM in the usual way.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Reflection.DefaultMemberAttribute"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberName">
      <MemberSignature Language="C#" Value="public string MemberName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name from the attribute.</summary>
        <value>A string representing the member name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 There is no set accessor because the name must be provided to the constructor. The name is not optional.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>