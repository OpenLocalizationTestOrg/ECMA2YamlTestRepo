<Type Name="GenericParameterAttributes" FullName="System.Reflection.GenericParameterAttributes">
  <TypeSignature Language="C#" Value="public enum GenericParameterAttributes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed GenericParameterAttributes extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes the constraints on a generic type parameter of a generic type or method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The members of the GenericParameterAttributes enumeration are divided into two groups, the variance group and the special constraints group. To test a GenericParameterAttributes value for variance flags, first perform a bitwise AND operation with F:System.Reflection.GenericParameterAttributes.VarianceMask?qualifyHint=False&autoUpgrade=True. If the result is F:System.Reflection.GenericParameterAttributes.None?qualifyHint=False&autoUpgrade=True, there are no variance flags. Similarly, use F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?qualifyHint=False&autoUpgrade=True to test for constraint flags.  
  
   
  
## Examples  
 The following code example defines a generic type `Test` with two type parameters. The second type parameter has a base class constraint and a reference type constraint. When the program executes, the constraints are examined using the P:System.Type.GenericParameterAttributes?qualifyHint=True&autoUpgrade=True property and the M:System.Type.GetGenericParameterConstraints?qualifyHint=True&autoUpgrade=True method.  
  
 [!CODE [System.Type.GetGenericParameterConstraints#1](../../add/codesnippet/system.type.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Contravariant">
      <MemberSignature Language="C#" Value="Contravariant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes Contravariant = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures.</summary>
      </Docs>
    </Member>
    <Member MemberName="Covariant">
      <MemberSignature Language="C#" Value="Covariant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes Covariant = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultConstructorConstraint">
      <MemberSignature Language="C#" Value="DefaultConstructorConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes DefaultConstructorConstraint = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes None = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>There are no special flags.</summary>
      </Docs>
    </Member>
    <Member MemberName="NotNullableValueTypeConstraint">
      <MemberSignature Language="C#" Value="NotNullableValueTypeConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes NotNullableValueTypeConstraint = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReferenceTypeConstraint">
      <MemberSignature Language="C#" Value="ReferenceTypeConstraint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes ReferenceTypeConstraint = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A type can be substituted for the generic type parameter only if it is a reference type.</summary>
      </Docs>
    </Member>
    <Member MemberName="SpecialConstraintMask">
      <MemberSignature Language="C#" Value="SpecialConstraintMask" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes SpecialConstraintMask = int32(28)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint?qualifyHint=False&amp;autoUpgrade=True, F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint?qualifyHint=False&amp;autoUpgrade=True, and F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint?qualifyHint=False&amp;autoUpgrade=True.</summary>
      </Docs>
    </Member>
    <Member MemberName="VarianceMask">
      <MemberSignature Language="C#" Value="VarianceMask" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.GenericParameterAttributes VarianceMask = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: F:System.Reflection.GenericParameterAttributes.Contravariant?qualifyHint=False&amp;autoUpgrade=True and F:System.Reflection.GenericParameterAttributes.Covariant?qualifyHint=False&amp;autoUpgrade=True.</summary>
      </Docs>
    </Member>
  </Members>
</Type>