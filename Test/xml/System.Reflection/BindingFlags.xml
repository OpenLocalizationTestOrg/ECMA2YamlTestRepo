<Type Name="BindingFlags" FullName="System.Reflection.BindingFlags">
  <TypeSignature Language="C#" Value="public enum BindingFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed BindingFlags extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 These `BindingFlags` control binding for a great many classes in the `System`, `System.Reflection`, and `System.Runtime` namespaces that invoke, create, get, set, and find members and types.  
  
 `BindingFlags` are used in the following <xref:System.Type> methods and other places such as <xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=fullName> :  
  
-   <xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=fullName>  
  
-   <xref:System.Type.GetMembers%2A>  
  
-   <xref:System.Type.GetEvents%2A>  
  
-   <xref:System.Type.InvokeMember%2A>  
  
-   <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>  
  
-   <xref:System.Type.GetConstructor%2A>  
  
-   <xref:System.Type.GetConstructors%2A>  
  
-   <xref:System.Type.GetMethod%2A>  
  
-   <xref:System.Type.GetMethods%2A>  
  
-   <xref:System.Type.GetField%2A>  
  
-   <xref:System.Type.GetFields%2A>  
  
-   <xref:System.Type.GetEvent%2A>  
  
-   <xref:System.Type.GetProperty%2A>  
  
-   <xref:System.Type.GetProperties%2A>  
  
-   <xref:System.Type.GetMember%2A>  
  
-   <xref:System.Type.FindMembers%2A>  
  
 `InvokeMember` and `GetMethod` are especially important.  
  
 The binding flags can be categorized by how they identify a type member, as listed in the following table.  
  
|Identified by Accessibility|Identified by Binding Argument|Identified by Operation|  
|---------------------------------|------------------------------------|-----------------------------|  
|F:System.Reflection.BindingFlags.DeclaredOnly?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.FlattenHierarchy?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.IgnoreCase?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.IgnoreReturn?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.Instance?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.NonPublic?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.Public?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.Static?qualifyHint=False&autoUpgrade=True|F:System.Reflection.BindingFlags.ExactBinding?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.OptionalParamBinding?qualifyHint=False&autoUpgrade=True|F:System.Reflection.BindingFlags.CreateInstance?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.GetField?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.SetField?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.GetProperty?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.SetProperty?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.InvokeMethod?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.PutDispProperty?qualifyHint=False&autoUpgrade=True<br /><br /> F:System.Reflection.BindingFlags.PutRefDispProperty?qualifyHint=False&autoUpgrade=True|  
  
> [!NOTE]
>  You must specify `Instance` or `Static` along with `Public` or `NonPublic` or no members will be returned.  
  
 The following table lists the coercions performed by the default M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)?qualifyHint=True&autoUpgrade=True. This table applies especially to the `ExactBinding` binding flag.  
  
|Source Type|Target Type|  
|-----------------|-----------------|  
|Any type|Its base type.|  
|Any type|The interface it implements.|  
|`Char`|`UInt16`, `UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|  
|`Byte`|`Char`, `UInt16`, `Int16`, `UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|  
|`SByte`|`Int16`, `Int32`, `Int64`, `Single`, `Double`|  
|`UInt16`|`UInt32`, `Int32`, `UInt64`, `Int64`, `Single`, `Double`|  
|`Int16`|`Int32`, `Int64`, `Single`, `Double`|  
|`UInt32`|`UInt64`, `Int64`, `Single`, `Double`|  
|`Int32`|`Int64`, `Single`, `Double`|  
|`UInt64`|`Single`, `Double`|  
|`Int64`|`Single`, `Double`|  
|`Single`|`Double`|  
|Non-reference|By-reference.|  
  
   
  
## Examples  
 The following example demonstrates many of the binding flags.  
  
 [!CODE [BindingFlags#1](../CodeSnippet/VS_Snippets_CLR/BindingFlags#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="CreateInstance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags CreateInstance = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance &amp;#124; Public) will apply. It is not possible to call a type initializer.  
  
 This flag is passed to an `InvokeMember` method to invoke a constructor.</summary>
      </Docs>
    </Member>
    <Member MemberName="DeclaredOnly">
      <MemberSignature Language="C#" Value="DeclaredOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags DeclaredOnly = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</summary>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Default = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that no binding flags are defined.</summary>
      </Docs>
    </Member>
    <Member MemberName="ExactBinding">
      <MemberSignature Language="C#" Value="ExactBinding" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags ExactBinding = int32(65536)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null `Binder` object, since that implies that the caller is supplying `BindToXXX` implementations that will pick the appropriate method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs T:System.Security.Permissions.ReflectionPermission?qualifyHint=False&autoUpgrade=True. This is consistent with lookup of members that are protected, private, and so on.  
  
 The general principle is that M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)?qualifyHint=False&autoUpgrade=True should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.  
  
 The default binder ignores this flag, while custom binders can implement the semantics of this flag.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlattenHierarchy">
      <MemberSignature Language="C#" Value="FlattenHierarchy" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags FlattenHierarchy = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</summary>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="GetField" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags GetField = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the value of the specified field should be returned.  
  
 This flag is passed to an `InvokeMember` method to get a field value.</summary>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="GetProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags GetProperty = int32(4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the value of the specified property should be returned.  
  
 This flag is passed to an `InvokeMember` method to invoke a property getter.</summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="IgnoreCase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags IgnoreCase = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the case of the member name should not be considered when binding.</summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReturn">
      <MemberSignature Language="C#" Value="IgnoreReturn" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags IgnoreReturn = int32(16777216)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used in COM interop to specify that the return value of the member can be ignored.</summary>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="Instance" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Instance = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that instance members are to be included in the search.</summary>
      </Docs>
    </Member>
    <Member MemberName="InvokeMethod">
      <MemberSignature Language="C#" Value="InvokeMethod" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags InvokeMethod = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.  
  
 This flag is passed to an `InvokeMember` method to invoke a method.</summary>
      </Docs>
    </Member>
    <Member MemberName="NonPublic">
      <MemberSignature Language="C#" Value="NonPublic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags NonPublic = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that non-public members are to be included in the search.</summary>
      </Docs>
    </Member>
    <Member MemberName="OptionalParamBinding">
      <MemberSignature Language="C#" Value="OptionalParamBinding" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags OptionalParamBinding = int32(262144)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])?qualifyHint=True&amp;autoUpgrade=True.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parameters with default values are used only in calls where trailing arguments are omitted. They must be the last arguments.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Public">
      <MemberSignature Language="C#" Value="Public" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Public = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that public members are to be included in the search.</summary>
      </Docs>
    </Member>
    <Member MemberName="PutDispProperty">
      <MemberSignature Language="C#" Value="PutDispProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags PutDispProperty = int32(16384)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the `PROPPUT` member on a COM object should be invoked. `PROPPUT` specifies a property-setting function that uses a value. Use `PutDispProperty` if a property has both `PROPPUT` and `PROPPUTREF` and you need to distinguish which one is called.</summary>
      </Docs>
    </Member>
    <Member MemberName="PutRefDispProperty">
      <MemberSignature Language="C#" Value="PutRefDispProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags PutRefDispProperty = int32(32768)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the `PROPPUTREF` member on a COM object should be invoked. `PROPPUTREF` specifies a property-setting function that uses a reference instead of a value. Use `PutRefDispProperty` if a property has both `PROPPUT` and `PROPPUTREF` and you need to distinguish which one is called.</summary>
      </Docs>
    </Member>
    <Member MemberName="SetField">
      <MemberSignature Language="C#" Value="SetField" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SetField = int32(2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the value of the specified field should be set.  
  
 This flag is passed to an `InvokeMember` method to set a field value.</summary>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="SetProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SetProperty = int32(8192)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying `PutDispProperty` and `PutRefDispProperty`.  
  
 This flag is passed to an `InvokeMember` method to invoke a property setter.</summary>
      </Docs>
    </Member>
    <Member MemberName="Static">
      <MemberSignature Language="C#" Value="Static" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags Static = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies that static members are to be included in the search.</summary>
      </Docs>
    </Member>
    <Member MemberName="SuppressChangeType">
      <MemberSignature Language="C#" Value="SuppressChangeType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.BindingFlags SuppressChangeType = int32(131072)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.BindingFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Not implemented.</summary>
      </Docs>
    </Member>
  </Members>
</Type>