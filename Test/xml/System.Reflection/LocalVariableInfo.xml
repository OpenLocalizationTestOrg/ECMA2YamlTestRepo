<Type Name="LocalVariableInfo" FullName="System.Reflection.LocalVariableInfo">
  <TypeSignature Language="C#" Value="public class LocalVariableInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalVariableInfo extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Discovers the attributes of a local variable and provides access to local variable metadata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To get a list of local variables in a method, use the <xref:System.Reflection.MethodBody.LocalVariables%2A?displayProperty=fullName> property. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method to obtain the <xref:System.Reflection.MethodBody> for a <xref:System.Reflection.MethodInfo> object.  
  
> [!NOTE]
>  Local variable names are not persisted in metadata. In Microsoft intermediate language (MSIL), local variables are accessed by their position in the local variable signature.  
  
   
  
## Examples  
 The following example defines a test method named `MethodBodyExample`, and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is then used to obtain a list of LocalVariableInfo objects and to display their types and index order.  
  
 This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  
  
 [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  
[!CODE [MethodBody#3](../CodeSnippet/VS_Snippets_CLR/MethodBody#3)]  
[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  
[!CODE [MethodBody#6](../CodeSnippet/VS_Snippets_CLR/MethodBody#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LocalVariableInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Reflection.LocalVariableInfo"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is invoked by derived classes during the construction of <xref:System.Reflection.LocalVariableInfo> objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPinned">
      <MemberSignature Language="C#" Value="public virtual bool IsPinned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:System.Boolean"&gt; value that indicates whether the object referred to by the local variable is pinned in memory.</summary>
        <value>`true` if the object referred to by the variable is pinned in memory; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalIndex">
      <MemberSignature Language="C#" Value="public virtual int LocalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index of the local variable within the method body.</summary>
        <value>An integer value that represents the order of declaration of the local variable within the method body.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Index numbers are assigned to local variables in the order in which they are declared.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalType">
      <MemberSignature Language="C#" Value="public virtual Type LocalType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type LocalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the local variable.</summary>
        <value>The type of the local variable.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a user-readable string that describes the local variable.</summary>
        <returns>A string that displays information about the local variable, including the type name, index, and pinned status.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>